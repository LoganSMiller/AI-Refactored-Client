// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Ensures persistent AI-Refactored bootstrap across all raid sessions in true headless mode.
    /// Absolutely excluded from traditional client environments.
    /// </summary>
    public sealed class HeadlessBootstrapper : MonoBehaviour
    {
        #region Fields

        private static ManualLogSource? _logger;

        private const float PollIntervalSeconds = 3.0f;
        private static bool _hasBootstrapped;

        #endregion

        #region Entry Point

        /// <summary>
        /// Injected once per session — ONLY on true headless hosts.
        /// </summary>
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
        public static void Inject()
        {
            bool isHeadless = Application.isBatchMode || FikaHeadlessDetector.IsHeadless;

            if (!isHeadless)
            {
                // Fail-safe for traditional clients
                ManualLogSource localLogger = BepInEx.Logging.Logger.CreateLogSource("AIRefactored.HeadlessGuard");
                localLogger.LogInfo("[HeadlessBootstrapper] Skipped — not running in headless mode.");
                return;
            }

            GameObject bootstrapperHost = new GameObject("AIRefactored_HeadlessBootstrapper");
            Object.DontDestroyOnLoad(bootstrapperHost);
            bootstrapperHost.AddComponent<HeadlessBootstrapper>();
        }

        #endregion

        #region MonoBehaviour Events

        private void Awake()
        {
            _logger = BepInEx.Logging.Logger.CreateLogSource("AIRefactored.Headless");
            _logger.LogInfo("[HeadlessBootstrapper] Awake — monitoring GameWorld state for headless.");

            StartCoroutine(MonitorGameWorldLoop());
        }

        #endregion

        #region Coroutine

        private IEnumerator MonitorGameWorldLoop()
        {
            while (true)
            {
                if (GameWorldHandler.IsReady())
                {
                    if (!_hasBootstrapped)
                    {
                        _logger?.LogInfo("[HeadlessBootstrapper] GameWorld ready — initializing AIRefactoredController.");
                        if (_logger != null)
                        {
                            AIRefactoredController.Initialize(_logger);
                        }

                        _hasBootstrapped = true;
                    }
                }
                else if (_hasBootstrapped)
                {
                    _logger?.LogInfo("[HeadlessBootstrapper] GameWorld no longer ready — reset state.");
                    _hasBootstrapped = false;
                }

                yield return new WaitForSecondsRealtime(PollIntervalSeconds);
            }
        }

        #endregion
    }
}
