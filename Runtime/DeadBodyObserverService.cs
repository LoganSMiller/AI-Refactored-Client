// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Scans for dead players and associates them with nearby loot containers.
    /// Executed as a runtime service from WorldBootstrapper or BotWorkScheduler.
    /// </summary>
    public static class DeadBodyObserverService
    {
        private const float ScanIntervalSeconds = 1.0f;
        private const float AssociationRadius = 1.5f;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly List<Player> ObservedPlayers = new List<Player>(64);

        private static float _nextScanTime = -1f;
        private static LootableContainer[] _containers = Array.Empty<LootableContainer>();
        private static bool _containersUpdated;

        /// <summary>
        /// Executes the scan cycle if enough time has elapsed and world is ready.
        /// </summary>
        public static void Tick()
        {
            if (!Application.isPlaying
                || !GameWorldHandler.IsInitialized
                || !GameWorldHandler.IsLocalHost()
                || !GameWorldHandler.IsReady())
            {
                return;
            }

            float now = Time.time;
            if (now < _nextScanTime)
                return;

            _nextScanTime = now + ScanIntervalSeconds;

            if (!_containersUpdated)
            {
                _containers = UnityEngine.Object.FindObjectsOfType<LootableContainer>();
                _containersUpdated = true;
            }

            if (_containers == null || _containers.Length == 0)
                return;

            ObservedPlayers.Clear();
            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            for (int i = 0; i < players.Count; i++)
            {
                Player? player = players[i];
                if (player != null)
                    ObservedPlayers.Add(player);
            }

            for (int i = 0; i < ObservedPlayers.Count; i++)
            {
                Player? player = ObservedPlayers[i];
                if (player == null
                    || player.HealthController == null
                    || player.HealthController.IsAlive
                    || string.IsNullOrEmpty(player.ProfileId))
                {
                    continue;
                }

                if (DeadBodyContainerCache.Contains(player.ProfileId))
                    continue;

                Vector3 corpsePosition = EFTPlayerUtil.GetPosition(player);
                Transform? root = player.Transform != null ? player.Transform.Original?.root : null;

                for (int j = 0; j < _containers.Length; j++)
                {
                    LootableContainer? container = _containers[j];
                    if (container == null || !container.enabled || container.transform == null)
                        continue;

                    bool isRootMatch = root != null && container.transform.root == root;
                    bool isNearby = Vector3.Distance(container.transform.position, corpsePosition) <= AssociationRadius;

                    if (isRootMatch || isNearby)
                    {
                        DeadBodyContainerCache.Register(player, container);
                        Logger.LogDebug($"[DeadBodyObserver] Associated container with dead bot: {player.Profile?.Info?.Nickname ?? "Unnamed"}");
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// Clears cached state and forces a container rescan next tick.
        /// </summary>
        public static void Reset()
        {
            _nextScanTime = -1f;
            _containers = Array.Empty<LootableContainer>();
            _containersUpdated = false;
            ObservedPlayers.Clear();
            Logger.LogInfo("[DeadBodyObserver] Reset.");
        }
    }
}
