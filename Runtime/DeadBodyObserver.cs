// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Observes dead player bodies and links them to nearby loot containers for bot prioritization.
    /// Executes only on authoritative hosts during raid runtime.
    /// </summary>
    public sealed class DeadBodyObserver : MonoBehaviour
    {
        #region Constants

        private const float ScanIntervalSeconds = 1.0f; // Interval between scans
        private const float AssociationRadius = 1.5f;  // Radius within which containers are associated with bodies

        #endregion

        #region Fields

        private float _nextScanTime = -1.0f; // Time until the next scan is due
        private static readonly List<Player> ObservedPlayers = new List<Player>(64); // List to track players being observed
        private LootableContainer[] _containers = new LootableContainer[0]; // Cached lootable containers
        private bool _containersUpdated = false; // Flag to track container state

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            // Ensure this script runs only under appropriate conditions
            if (!Application.isPlaying ||
                !GameWorldHandler.IsInitialized ||
                !GameWorldHandler.IsLocalHost() || // Ensure it runs only on local host
                !GameWorldHandler.IsReady())
            {
                return; // Skip processing if game world isn't ready or we're not the local host
            }

            float now = Time.time;
            if (now < _nextScanTime)
            {
                return; // Skip if it's not time for the next scan
            }

            _nextScanTime = now + ScanIntervalSeconds; // Set next scan time

            // Only update containers periodically to improve performance
            if (!_containersUpdated)
            {
                _containers = Object.FindObjectsOfType<LootableContainer>(); // Get all lootable containers in the scene
                _containersUpdated = true; // Set flag to prevent frequent updates
            }

            if (_containers == null || _containers.Length == 0)
            {
                return; // If no containers, skip the processing
            }

            // Clear previously observed players and get all currently alive players
            ObservedPlayers.Clear();
            List<Player> activePlayers = GameWorldHandler.GetAllAlivePlayers();

            // Populate the observed players list
            foreach (var player in activePlayers)
            {
                if (player != null)
                {
                    ObservedPlayers.Add(player);
                }
            }

            // Loop through each observed player
            foreach (var player in ObservedPlayers)
            {
                // Skip if the player is alive, invalid, or has no profile
                if (player == null || player.HealthController?.IsAlive == true || string.IsNullOrEmpty(player.ProfileId))
                {
                    continue;
                }

                // Skip if body is already associated
                if (DeadBodyContainerCache.Contains(player.ProfileId))
                {
                    continue;
                }

                Vector3 corpsePosition = EFTPlayerUtil.GetPosition(player); // Get position of the dead body
                Transform? playerRoot = player.Transform?.Original?.root;

                // Loop through all containers and check if they are close or match the player's root
                foreach (var container in _containers)
                {
                    if (container == null || !container.enabled || container.transform == null)
                    {
                        continue; // Skip invalid containers
                    }

                    Transform containerTransform = container.transform;

                    bool isRootMatch = playerRoot != null && containerTransform.root == playerRoot;
                    bool isNearby = Vector3.Distance(containerTransform.position, corpsePosition) <= AssociationRadius;

                    // If the container is either near the corpse or matches the root, associate it
                    if (isRootMatch || isNearby)
                    {
                        DeadBodyContainerCache.Register(player, container); // Register association
                        Logger.LogDebug("[DeadBodyObserver] Associated container with dead bot: " + (player.Profile?.Info?.Nickname ?? "Unnamed"));
                        break; // No need to check further once we find a match
                    }
                }
            }
        }

        #endregion
    }
}
