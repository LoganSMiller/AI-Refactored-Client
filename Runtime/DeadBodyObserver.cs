// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Watches for loot containers associated with dead players and registers them.
    /// Prevents redundant looting and ensures corpse-container association is maintained.
    /// </summary>
    public sealed class DeadBodyObserver : MonoBehaviour
    {
        #region Configuration

        private const float ScanInterval = 1.0f;

        #endregion

        #region State

        private float _nextScanTime;

        #endregion

        #region Unity Loop

        private void Update()
        {
            if (!GameWorldHandler.IsInitialized || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            float now = Time.time;
            if (now < this._nextScanTime)
            {
                return;
            }

            this._nextScanTime = now + ScanInterval;

            LootableContainer[] containers = Object.FindObjectsOfType<LootableContainer>();
            if (containers == null || containers.Length == 0)
            {
                return;
            }

            System.Collections.Generic.List<EFT.Player> players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
            {
                return;
            }

            for (int i = 0; i < players.Count; i++)
            {
                EFT.Player? player = players[i];

                if (player == null || player.HealthController == null || player.HealthController.IsAlive)
                {
                    continue;
                }

                string profileId = player.ProfileId;
                if (string.IsNullOrEmpty(profileId) || DeadBodyContainerCache.Contains(profileId))
                {
                    continue;
                }

                Transform? root = player.Transform != null ? player.Transform.Original?.root : null;
                if (root == null)
                {
                    continue;
                }

                for (int j = 0; j < containers.Length; j++)
                {
                    LootableContainer? container = containers[j];
                    if (container == null || !container.enabled)
                    {
                        continue;
                    }

                    if (container.transform.root == root)
                    {
                        DeadBodyContainerCache.Register(player, container);
                        break;
                    }
                }
            }
        }

        #endregion
    }
}
