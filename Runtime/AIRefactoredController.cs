// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Global entry point for AI-Refactored.
    /// Monitors GameWorld state and bootstraps systems once a raid is actually loaded.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        #region Constants

        private const float BootstrapIntervalSeconds = 2.0f;

        #endregion

        #region Static Fields

        private static ManualLogSource? _logger;
        private static GameObject? _host;
        private static AIRefactoredController? _instance;
        private static bool _initialized;

        #endregion

        #region Instance Fields

        private bool _hasBootstrapped;

        #endregion

        #region Public API

        /// <summary>
        /// Shared logger for runtime use.
        /// </summary>
        public static ManualLogSource Logger
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[AIRefactoredController] Logger accessed before Initialize.");
                }

                return _logger;
            }
        }

        /// <summary>
        /// Initializes the controller and attaches to a persistent GameObject.
        /// This method is safe to call repeatedly, and only affects headless hosts.
        /// </summary>
        /// <param name="logger">Logger to use for diagnostic output.</param>
        public static void Initialize(ManualLogSource logger)
        {
            if (!Application.isBatchMode && !FikaHeadlessDetector.IsHeadless)
            {
                logger.LogInfo("[AIRefactoredController] Skipped Initialize — not a headless environment.");
                return;
            }

            if (_initialized && _host != null)
            {
                logger.LogInfo("[AIRefactoredController] Already initialized — skipping.");
                return;
            }

            _logger = logger;

            if (_host == null)
            {
                _host = new GameObject("AIRefactoredController");
                UnityEngine.Object.DontDestroyOnLoad(_host);
                _instance = _host.AddComponent<AIRefactoredController>();
            }

            _initialized = true;
            logger.LogInfo("[AIRefactoredController] Host object created — monitoring GameWorld readiness.");
        }

        #endregion

        #region Unity Events

        private void Awake()
        {
            Application.logMessageReceived += OnLogMessage;

            Logger.LogInfo("[AIRefactoredController] Awake — starting GameWorld readiness loop.");
            StartCoroutine(WatchGameWorldLoop());
        }

        private void OnDestroy()
        {
            if (_instance == this)
            {
                Application.logMessageReceived -= OnLogMessage;
                _instance = null;
                _initialized = false;
            }
        }

        #endregion

        #region Coroutine

        private IEnumerator WatchGameWorldLoop()
        {
            while (!_hasBootstrapped)
            {
                yield return new WaitForSecondsRealtime(BootstrapIntervalSeconds);

                if (!GameWorldHandler.IsHost)
                {
                    Logger.LogDebug("[AIRefactoredController] Skipping — not authoritative host.");
                    continue;
                }

                if (!GameWorldHandler.IsSafeToInitialize)
                {
                    Logger.LogDebug("[AIRefactoredController] Skipping — GameWorld not ready yet.");
                    continue;
                }

                Logger.LogInfo("[AIRefactoredController] GameWorld ready — executing bootstrap.");
                SafeBootstrap();
            }
        }

        #endregion

        #region Bootstrap Logic

        private void SafeBootstrap()
        {
            if (_hasBootstrapped)
                return;

            try
            {
                GameWorldHandler.TryInitializeWorld();
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] TryInitializeWorld() threw: " + ex);
                return;
            }

            if (!GameWorldHandler.IsInitialized)
            {
                Logger.LogInfo("[AIRefactoredController] GameWorld not initialized yet — deferring.");
                return;
            }

            try
            {
                Logger.LogInfo("[AIRefactoredController] ▶ Hooking spawn systems...");
                GameWorldHandler.HookBotSpawns();
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] HookBotSpawns() threw: " + ex);
            }

            try
            {
                Logger.LogInfo("[AIRefactoredController] ▶ Injecting WorldBootstrapper...");
                WorldBootstrapper.TryInitialize();
                _hasBootstrapped = true;
                Logger.LogInfo("[AIRefactoredController] ✅ Bootstrap complete — AI-Refactored systems active.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] WorldBootstrapper.TryInitialize() threw: " + ex);
            }
        }

        private void OnLogMessage(string condition, string stackTrace, LogType type)
        {
            if (type != LogType.Exception)
                return;

            bool isFromAIRefactored =
                condition.IndexOf("AIRefactored", StringComparison.OrdinalIgnoreCase) >= 0 ||
                stackTrace.IndexOf("AIRefactored", StringComparison.OrdinalIgnoreCase) >= 0;

            if (isFromAIRefactored)
            {
                Logger.LogError("[AIRefactoredController] Unhandled internal exception: " + condition + "\n" + stackTrace);
                _hasBootstrapped = true;
            }
            else
            {
                Logger.LogDebug("[AIRefactoredController] Ignored external exception: " + condition);
            }
        }

        #endregion
    }
}
