// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Global runtime controller for AI-Refactored.
    /// Initializes world-safe AI systems, logs startup, and persists across scene loads.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        #region Static Fields

        private static AIRefactoredController? _instance;
        private static ManualLogSource? _logger;

        #endregion

        #region Instance Fields

        private bool _bootstrapped;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the global AIRefactored logger instance.
        /// </summary>
        public static ManualLogSource Logger =>
            _logger ?? throw new InvalidOperationException("[AIRefactored] Logger accessed before controller initialization.");

        /// <summary>
        /// Gets a value indicating whether the controller is initialized.
        /// </summary>
        public static bool IsInitialized => _instance != null;

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Unity Awake() — ensures singleton and preserves this object across scenes.
        /// </summary>
        private void Awake()
        {
            if (_instance != null && _instance != this)
            {
                Destroy(this.gameObject);
                return;
            }

            _instance = this;
            DontDestroyOnLoad(this.gameObject);
        }

        #endregion

        #region Static Initialization

        /// <summary>
        /// Initializes the AIRefactored global runtime controller.
        /// </summary>
        /// <param name="logger">Logger instance to bind globally.</param>
        public static void Initialize(ManualLogSource logger)
        {
            if (_instance != null)
            {
                logger.LogWarning("[AIRefactored] [Init] Controller already active. Re-initialization skipped.");
                return;
            }

            _logger = logger;

            GameObject controllerHost = new GameObject("AIRefactoredController");
            _instance = controllerHost.AddComponent<AIRefactoredController>();
            DontDestroyOnLoad(controllerHost);

            _logger.LogInfo("[AIRefactored] [Init] Runtime controller initialized — awaiting GameWorld...");
            _instance.StartCoroutine(_instance.RunDeferredBootstrap());
        }

        #endregion

        #region Deferred Bootstrap

        /// <summary>
        /// Periodically attempts to bootstrap AI systems once the GameWorld is loaded.
        /// </summary>
        private IEnumerator RunDeferredBootstrap()
        {
            float timeoutAt = Time.time + 60f;

            while (!this._bootstrapped)
            {
                try
                {
                    GameWorldHandler.TryInitializeWorld();

                    if (GameWorldHandler.IsInitialized)
                    {
                        this._bootstrapped = true;
                        _logger?.LogInfo("[AIRefactored] [Bootstrap] GameWorld systems initialized.");
                        yield break;
                    }

                    if (FikaHeadlessDetector.IsHeadless && Time.time >= timeoutAt)
                    {
                        _logger?.LogWarning("[AIRefactored] [Headless Timeout] Forcing bot spawn hook after delay.");
                        GameWorldHandler.HookBotSpawns();
                        this._bootstrapped = true;
                        yield break;
                    }
                }
                catch (Exception ex)
                {
                    _logger?.LogError("[AIRefactored] [Error] Deferred bootstrap exception: " + ex.Message + "\n" + ex.StackTrace);
                }

                yield return new WaitForSeconds(0.5f);
            }
        }

        #endregion
    }
}
