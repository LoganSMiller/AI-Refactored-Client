// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Global runtime controller for AI-Refactored.
    /// Initializes subsystems and holds persistent references for global logic, logging, and lifecycle safety.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        #region Static Fields

        private static AIRefactoredController? _instance;
        private static ManualLogSource? _logger;

        #endregion

        #region Private Fields

        private bool _bootstrapped;

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Called automatically by Unity when the controller is instantiated.
        /// Ensures singleton enforcement and host persistence.
        /// </summary>
        private void Awake()
        {
            if (_instance != null && _instance != this)
            {
                UnityEngine.Object.Destroy(this.gameObject);
                return;
            }

            _instance = this;
            UnityEngine.Object.DontDestroyOnLoad(this.gameObject);
        }

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the global AIRefactored controller. Registers logging and ensures boot loop.
        /// </summary>
        /// <param name="logger">The BepInEx logger instance to bind globally.</param>
        public static void Initialize(ManualLogSource logger)
        {
            if (_instance != null)
            {
                logger.LogWarning("[AIRefactored] Attempted to reinitialize controller — already active.");
                return;
            }

            _logger = logger;

            GameObject host = new GameObject("AIRefactoredController");
            _instance = host.AddComponent<AIRefactoredController>();
            UnityEngine.Object.DontDestroyOnLoad(host);

            _logger.LogInfo("[AIRefactored] 🌐 Global controller initialized and awaiting world load.");

            _instance.StartCoroutine(_instance.LateBootCoroutine());
        }

        #endregion

        #region Boot Coroutine

        /// <summary>
        /// Periodically attempts to bootstrap world systems after scene load.
        /// Ensures reliable startup without race conditions.
        /// </summary>
        private IEnumerator LateBootCoroutine()
        {
            float waitUntil = Time.time + 60f;

            while (!this._bootstrapped)
            {
                try
                {
                    GameWorldHandler.TryInitializeWorld();

                    if (GameWorldHandler.IsInitialized)
                    {
                        this._bootstrapped = true;
                        _logger?.LogInfo("[AIRefactored] ✅ World systems bootstrapped.");
                        yield break;
                    }

                    if (FikaHeadlessDetector.IsHeadless && Time.time > waitUntil)
                    {
                        _logger?.LogWarning("[AIRefactored] ⚠ Headless fallback triggered. Proceeding with manual spawn hook.");
                        GameWorldHandler.HookBotSpawns();
                        this._bootstrapped = true;
                        yield break;
                    }
                }
                catch (Exception ex)
                {
                    _logger?.LogError("[AIRefactored] ❌ GameWorld bootstrap failed: " + ex.Message + "\n" + ex.StackTrace);
                }

                yield return new WaitForSeconds(0.5f);
            }
        }

        #endregion

        #region Public API

        /// <summary>
        /// True if the global controller is initialized and active.
        /// </summary>
        public static bool IsInitialized
        {
            get { return _instance != null; }
        }

        /// <summary>
        /// Accesses the registered logger. Throws if accessed before plugin boot.
        /// </summary>
        public static ManualLogSource Logger
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[AIRefactored] Logger accessed before initialization.");
                }

                return _logger;
            }
        }

        #endregion
    }
}
