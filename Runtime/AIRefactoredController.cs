// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections;
    using BepInEx.Logging;
    using UnityEngine;
    using AIRefactored.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.AI.Optimization;

    /// <summary>
    /// Global entry point for AI-Refactored.
    /// Ensures exactly one controller lives, injects the FlushRunner,
    /// and bootstraps world & bot systems identically in headless and client-host modes.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        #region Static Fields

        private static AIRefactoredController? _instance;
        private static ManualLogSource? _logger;
        private static bool _initialized;
        private static GameObject? _host;
        private static readonly object InitLock = new object();

        #endregion

        #region Properties

        /// <summary>
        /// BepInEx logger, passed from Plugin.cs.
        /// </summary>
        public static ManualLogSource Logger =>
            _logger ?? throw new InvalidOperationException("[AIRefactoredController] Logger accessed before Initialize.");

        #endregion

        #region Initialization

        /// <summary>
        /// Call once from Plugin.Awake().
        /// </summary>
        /// <param name="logger">The BepInEx logger to use.</param>
        public static void Initialize(ManualLogSource logger)
        {
            lock (InitLock)
            {
                if (_initialized)
                {
                    logger.LogWarning("[AIRefactoredController] Already initialized, skipping.");
                    return;
                }

                _logger = logger ?? throw new ArgumentNullException(nameof(logger));

                // Create a dedicated host GameObject
                _host = new GameObject("AIRefactoredController");
                DontDestroyOnLoad(_host);
                _instance = _host.AddComponent<AIRefactoredController>();

                _initialized = true;
                logger.LogInfo("[AIRefactoredController] Initialized host, scheduling bootstrap.");
            }
        }

        #endregion

        #region Unity Lifecycle

        private void Awake()
        {
            // Only the designated host instance should remain
            if (_instance != this)
            {
                Destroy(gameObject);
                return;
            }

            Logger.LogInfo("[AIRefactoredController] Awake — injecting FlushRunner.");

            // Always inject our flush runner (works both headless & client-host)
            BotWorkScheduler.AutoInjectFlushHost();

            // Kick off the bootstrap on next frame
            try
            {
                StartCoroutine(RunBootstrapSafe());
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredController] Error starting bootstrap coroutine: {ex}");
            }
        }

        private void OnDestroy()
        {
            // If the host is destroyed, clear static refs
            if (_instance == this)
            {
                Logger.LogInfo("[AIRefactoredController] OnDestroy — cleaning up static references.");
                _instance = null;
                _logger = null;
                _initialized = false;

                if (_host == this.gameObject)
                {
                    _host = null;
                }
            }
        }

        #endregion

        #region Bootstrapping

        private IEnumerator RunBootstrapSafe()
        {
            // Wait one frame so everything else has awakened
            yield return null;

            Logger.LogInfo("[AIRefactoredController] ▶ Beginning world & bot bootstrap...");

            try
            {
                // Core world init & bot wiring (works both headless & client-host)
                GameWorldHandler.TryInitializeWorld();
                GameWorldHandler.HookBotSpawns();

                // Full world bootstrap (zones, navmesh, loot, hotspots, etc.)
                WorldBootstrapper.TryInitialize();
                Logger.LogInfo("[AIRefactoredController] ✅ WorldBootstrapper injected.");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredController] Exception during bootstrap: {ex}");
            }
        }

        #endregion
    }
}
