// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Global entry point for AI-Refactored.
    /// Spawns a persistent host object and launches phase-based initialization.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        private static GameObject _host;
        private static AIRefactoredController _instance;
        private static bool _initialized;
        private static bool _raidActive;

        /// <summary>
        /// Shared logger for runtime use.
        /// </summary>
        public static ManualLogSource Logger
        {
            get
            {
                ManualLogSource log = Plugin.LoggerInstance;
                if (log == null)
                {
                    throw new InvalidOperationException("[AIRefactoredController] Logger accessed before Plugin initialized.");
                }

                return log;
            }
        }

        /// <summary>
        /// Initializes the AIRefactoredController host and launches boot sequence.
        /// Safe to call repeatedly.
        /// </summary>
        public static void Initialize()
        {
            try
            {
                if (!Application.isBatchMode && !FikaHeadlessDetector.IsHeadless)
                {
                    Logger.LogInfo("[AIRefactoredController] Skipped Initialize — not a headless environment.");
                    return;
                }

                if (_initialized && _host != null)
                {
                    Logger.LogInfo("[AIRefactoredController] Already initialized — skipping.");
                    return;
                }

                if (_host == null)
                {
                    _host = new GameObject("AIRefactoredController");
                    UnityEngine.Object.DontDestroyOnLoad(_host);

                    _instance = _host.AddComponent<AIRefactoredController>();
                    _host.AddComponent<RaidLifecycleWatcher>();

                    Logger.LogInfo("[AIRefactoredController] Host object created and lifecycle watcher attached.");
                }

                WorldTickDispatcher.Initialize();
                _initialized = true;

                Logger.LogInfo("[AIRefactoredController] Initialization complete. Awaiting GameWorld...");
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] Initialization failed: " + ex);
            }
        }

        /// <summary>
        /// Called when a raid begins and GameWorld is valid.
        /// </summary>
        public static void OnRaidStarted(GameWorld world)
        {
            if (!_initialized || _raidActive || world == null)
            {
                return;
            }

            try
            {
                Logger.LogInfo("[AIRefactoredController] 🚀 Raid started. Bootstrapping world systems...");
                GameWorldHandler.Initialize(world);
                WorldBootstrapper.Begin(Logger);
                _raidActive = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] OnRaidStarted error: " + ex);
            }
        }

        /// <summary>
        /// Called when a raid ends and GameWorld is disposed.
        /// </summary>
        public static void OnRaidEnded()
        {
            if (!_raidActive)
            {
                return;
            }

            try
            {
                Logger.LogInfo("[AIRefactoredController] 🧹 Raid ended. Tearing down world systems...");
                WorldBootstrapper.Stop();
                GameWorldHandler.Cleanup();
                BotRecoveryService.Reset();
                _raidActive = false;
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] OnRaidEnded error: " + ex);
            }
        }

        private void Start()
        {
            Logger.LogInfo("[AIRefactoredController] Starting GameWorld wait coroutine...");
            StartCoroutine(WaitForGameWorld());
            StartCoroutine(ForceInitAfterTimeout());
        }

        private IEnumerator WaitForGameWorld()
        {
            while (Singleton<GameWorld>.Instance == null)
            {
                yield return null;
            }

            while (!FikaHeadlessDetector.IsReady || !GameWorldHandler.IsReady())
            {
                yield return null;
            }

            Logger.LogInfo("[AIRefactoredController] ✅ GameWorld ready. Launching InitPhaseRunner...");
            InitPhaseRunner.Begin(Logger);
        }

        private IEnumerator ForceInitAfterTimeout()
        {
            yield return new WaitForSecondsRealtime(15f);

            if (!WorldInitState.IsInitialized)
            {
                Logger.LogWarning("[AIRefactoredController] ⚠️ Forcing InitPhaseRunner fallback after timeout.");
                InitPhaseRunner.Begin(Logger);
            }
        }

        private void Update()
        {
            if (WorldInitState.IsInitialized)
            {
                WorldTickDispatcher.Tick(Time.deltaTime);
            }
        }

        private void OnDestroy()
        {
            try
            {
                if (_instance == this)
                {
                    Logger.LogInfo("[AIRefactoredController] OnDestroy — stopping InitPhaseRunner.");
                    InitPhaseRunner.Stop();

                    _instance = null;
                    _initialized = false;
                    _raidActive = false;

                    WorldBootstrapper.Stop();
                    GameWorldHandler.Cleanup();
                    BotRecoveryService.Reset();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] OnDestroy error: " + ex);
            }
        }
    }
}
