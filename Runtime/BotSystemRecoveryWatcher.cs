// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Ensures AIRefactored systems remain valid and recover gracefully during raid runtime.
    /// Auto-restores BotBrains, re-hooks spawn logic, and rescans world subsystems if necessary.
    /// </summary>
    public sealed class BotSystemRecoveryWatcher : MonoBehaviour
    {
        #region Constants

        private const float TickInterval = 5.0f;

        #endregion

        #region Fields

        private float _nextTickTime;
        private bool _hasRescannedWorld;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            float now = Time.time;

            if (now < this._nextTickTime)
            {
                return;
            }

            this._nextTickTime = now + TickInterval;

            GameWorld? world = GameWorldHandler.Get();
            if (world?.AllAlivePlayersList == null)
            {
                Logger.LogWarning("[RecoveryWatcher] [GameWorld] Null or reset — attempting reinitialization.");
                GameWorldHandler.TryInitializeWorld();
                this._hasRescannedWorld = false;
                return;
            }

            if (!GameWorldHandler.IsInitialized)
            {
                Logger.LogWarning("[RecoveryWatcher] [System] Not initialized — forcing bootstrap.");
                GameWorldHandler.TryInitializeWorld();
                return;
            }

            this.EnsureSpawnerHook();

            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];

                if (player == null || !player.IsAI || player.gameObject == null)
                {
                    continue;
                }

                if (player.GetComponent<BotBrain>() == null)
                {
                    Logger.LogWarning("[RecoveryWatcher] [BotFix] Bot missing brain — restoring: " + (player.Profile?.Info?.Nickname ?? "Unnamed"));

                    BotBrainGuardian.Enforce(player.gameObject);
                    GameWorldHandler.TryAttachBotBrain(player.AIData?.BotOwner);

                    if (!this._hasRescannedWorld)
                    {
                        this._hasRescannedWorld = true;
                        this.RescanWorldSystems();
                    }
                }
            }
        }

        #endregion

        #region Internal Logic

        private void EnsureSpawnerHook()
        {
            if (!Singleton<BotSpawner>.Instantiated)
            {
                return;
            }

            BotSpawner spawner = Singleton<BotSpawner>.Instance;

            spawner.OnBotCreated -= GameWorldHandler.TryAttachBotBrain;
            spawner.OnBotCreated += GameWorldHandler.TryAttachBotBrain;
        }

        private void RescanWorldSystems()
        {
            string mapId = GameWorldHandler.GetCurrentMapName();

            Logger.LogInfo("[RecoveryWatcher] [Rescan] Hotspots, loot, nav: " + mapId);

            HotspotRegistry.Clear();
            HotspotRegistry.Initialize(mapId);

            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();

            NavPointRegistry.Clear();
            NavPointRegistry.RegisterAll(mapId);

            Logger.LogInfo("[RecoveryWatcher] [Rescan] Complete.");
        }

        #endregion
    }
}
