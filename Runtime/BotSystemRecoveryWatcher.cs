// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Monitors GameWorld state and ensures AIRefactored systems remain functional across raid sessions.
    /// Automatically recovers from late GameWorld, bot missing brain, or lost IZones references.
    /// </summary>
    public sealed class BotSystemRecoveryWatcher : MonoBehaviour
    {
        #region Constants

        private const float TickIntervalSeconds = 5.0f;
        private const int MaxRetryAttempts = 3;

        #endregion

        #region Fields

        private float _nextCheckTime = -1f;
        private bool _hasWarnedMissingWorld;
        private bool _hasRescannedWorld;
        private int _retryAttempts;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            float now = Time.time;
            if (now < _nextCheckTime)
            {
                return;
            }

            _nextCheckTime = now + TickIntervalSeconds;

            GameWorld? world = GameWorldHandler.Get();
            bool worldReady = GameWorldHandler.IsReady();

            if (world == null || world.AllAlivePlayersList == null || !worldReady)
            {
                HandleWorldReinitialization(worldReady);
                return;
            }

            if (_hasWarnedMissingWorld)
            {
                Logger.LogInfo("[RecoveryWatcher] GameWorld restored.");
                _hasWarnedMissingWorld = false;
            }

            if (!GameWorldHandler.IsInitialized)
            {
                Logger.LogWarning("[RecoveryWatcher] GameWorld not initialized — triggering bootstrap.");
                GameWorldHandler.TryInitializeWorld();
                return;
            }

            ZoneAutoRefresher.Tick(now);
            EnsureSpawnHook();
            ValidateBotBrains(world.AllAlivePlayersList);
        }

        #endregion

        #region Internal Logic

        private void HandleWorldReinitialization(bool worldReady)
        {
            if (!_hasWarnedMissingWorld)
            {
                Logger.LogWarning("[RecoveryWatcher] GameWorld is missing or not ready — attempting reinitialization.");
                _hasWarnedMissingWorld = true;
            }

            if (_retryAttempts < MaxRetryAttempts)
            {
                _retryAttempts++;
                GameWorldHandler.TryInitializeWorld();
                ZoneAutoRefresher.Reset();
                Logger.LogInfo($"[RecoveryWatcher] Retry attempt #{_retryAttempts} for GameWorld reinitialization.");
            }
            else
            {
                Logger.LogError("[RecoveryWatcher] Max retry attempts reached — GameWorld reinitialization failed.");
            }
        }

        private void EnsureSpawnHook()
        {
            if (!Singleton<BotSpawner>.Instantiated)
            {
                return;
            }

            BotSpawner spawner = Singleton<BotSpawner>.Instance;
            spawner.OnBotCreated -= GameWorldHandler.TryAttachBotBrain;
            spawner.OnBotCreated += GameWorldHandler.TryAttachBotBrain;
        }

        private void ValidateBotBrains(List<Player> players)
        {
            if (players == null || players.Count == 0)
            {
                return;
            }

            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (player == null || !player.IsAI || player.gameObject == null)
                {
                    continue;
                }

                if (player.GetComponent<BotBrain>() != null)
                {
                    continue;
                }

                Logger.LogWarning($"[RecoveryWatcher] Bot missing brain — restoring: {player.Profile?.Info?.Nickname ?? "Unnamed"}");

                BotBrainGuardian.Enforce(player.gameObject);

                BotOwner? botOwner = null;
                if (player.AIData != null)
                {
                    botOwner = player.AIData.BotOwner;
                }
                if (botOwner != null)
                {
                    GameWorldHandler.TryAttachBotBrain(botOwner);
                }

                if (!_hasRescannedWorld)
                {
                    _hasRescannedWorld = true;
                    RescanWorldSystems();
                }
            }
        }

        private void RescanWorldSystems()
        {
            string mapId = GameWorldHandler.GetCurrentMapName();
            Logger.LogInfo($"[RecoveryWatcher] Rescanning world systems for map: {mapId}");

            HotspotRegistry.Clear();
            HotspotRegistry.Initialize(mapId);

            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();

            NavPointRegistry.Clear();
            NavPointRegistry.RegisterAll(mapId);

            ZoneAutoRefresher.Reset();
            Logger.LogInfo("[RecoveryWatcher] World system rescan complete.");
        }

        #endregion
    }
}
