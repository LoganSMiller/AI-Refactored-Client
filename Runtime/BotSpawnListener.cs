// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Watches for new bots entering the raid and enforces BotBrainGuardian logic immediately.
    /// Runs only on the authoritative host (headless, local-host, or client-host).
    /// </summary>
    public sealed class BotSpawnListener : MonoBehaviour
    {
        #region Configuration

        private const float CheckInterval = 1.5f;

        #endregion

        #region Fields

        private float _nextCheckTime;
        private readonly HashSet<int> _seenBots = new HashSet<int>();

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            // Only run on authoritative hosts (headless or client-host)
            if (!GameWorldHandler.IsInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            float now = Time.time;
            if (now < this._nextCheckTime)
            {
                return;
            }

            this._nextCheckTime = now + CheckInterval;

            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (player == null || !player.IsAI || player.gameObject == null || player.Profile == null)
                {
                    continue;
                }

                int instanceId = player.GetInstanceID();
                if (this._seenBots.Contains(instanceId))
                {
                    continue;
                }

                this._seenBots.Add(instanceId);
                BotBrainGuardian.Enforce(player.gameObject);

                string name = player.Profile.Info?.Nickname ?? "Unnamed";
                Logger.LogDebug("[BotSpawnListener] [Enforce] Bot brain verified for: " + name);
            }
        }

        #endregion
    }
}
