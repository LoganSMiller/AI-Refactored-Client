// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Observes new bot spawns and ensures brain injection logic is enforced.
    /// Resets automatically across raids. Skips invalid players and respects GameWorld readiness.
    /// </summary>
    public sealed class BotSpawnListener : MonoBehaviour
    {
        #region Constants

        private const float PollInterval = 1.5f;

        #endregion

        #region Fields

        private static readonly HashSet<int> SeenBotIds = new HashSet<int>();
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private float _nextPollTime = -1f;
        private bool _hasWarnedInvalidState;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            if (!GameWorldHandler.IsInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (!GameWorldHandler.IsReady())
            {
                if (!_hasWarnedInvalidState)
                {
                    Logger.LogWarning("[BotSpawnListener] GameWorld not ready — deferring bot scan.");
                    _hasWarnedInvalidState = true;
                }

                return;
            }

            if (_hasWarnedInvalidState)
            {
                Logger.LogInfo("[BotSpawnListener] GameWorld readiness confirmed. Resuming bot monitoring.");
                _hasWarnedInvalidState = false;
            }

            float now = Time.time;
            if (now < _nextPollTime)
            {
                return;
            }

            _nextPollTime = now + PollInterval;

            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
            {
                return;
            }

            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (player == null || !player.IsAI)
                {
                    continue;
                }

                GameObject go = player.gameObject;
                if (go == null || player.Profile == null || player.HealthController == null || player.AIData?.BotOwner == null)
                {
                    continue;
                }

                int id = go.GetInstanceID();
                if (SeenBotIds.Contains(id))
                {
                    continue;
                }

                SeenBotIds.Add(id);

                if (go.GetComponent<BotBrain>() != null)
                {
                    Logger.LogDebug("[BotSpawnListener] Brain already present for bot: " + (player.Profile.Info?.Nickname ?? "Unnamed"));
                    continue;
                }

                try
                {
                    BotBrain brain = go.AddComponent<BotBrain>();
                    brain.Initialize(player.AIData.BotOwner);

                    Logger.LogDebug("[BotSpawnListener] Brain injected for bot: " + (player.Profile.Info?.Nickname ?? "Unnamed"));
                }
                catch (Exception ex)
                {
                    Logger.LogError("[BotSpawnListener] Failed to inject brain: " + ex);
                }
            }
        }

        private void OnDestroy()
        {
            SeenBotIds.Clear();
            Logger.LogInfo("[BotSpawnListener] Destroyed — reset for next raid.");
        }

        #endregion
    }
}
