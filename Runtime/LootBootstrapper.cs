// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Registers all lootable containers and loose loot items in the scene.
    /// Also links dead player corpses to nearby loot containers for bot prioritization.
    /// Executes only on authoritative hosts.
    /// </summary>
    public static class LootBootstrapper
    {
        #region Constants

        private const float MaxCorpseLinkDistance = 1.5f; // Distance within which loot containers are linked to corpses

        #endregion

        #region Public API

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        /// <summary>
        /// Registers all scene lootable containers and items.
        /// </summary>
        public static void RegisterAllLoot()
        {
            // Ensure this logic runs only on local host and when GameWorld is initialized
            if (!GameWorldHandler.IsInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            // Cache containers and items to avoid redundant queries
            LootableContainer[] containers = Object.FindObjectsOfType<LootableContainer>();
            LootItem[] items = Object.FindObjectsOfType<LootItem>();

            if (containers != null && containers.Length > 0)
            {
                RegisterContainers(containers); // Register containers
            }

            if (items != null && items.Length > 0)
            {
                RegisterLooseItems(items); // Register loose items
            }
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Registers all lootable containers.
        /// </summary>
        private static void RegisterContainers(LootableContainer[] containers)
        {
            foreach (var container in containers)
            {
                if (container == null || !container.enabled)
                {
                    continue; // Skip invalid or disabled containers
                }

                LootRegistry.RegisterContainer(container); // Register the container
                TryLinkToCorpse(container); // Attempt to link the container to nearby corpses
            }
        }

        /// <summary>
        /// Registers all loose loot items.
        /// </summary>
        private static void RegisterLooseItems(LootItem[] items)
        {
            foreach (var item in items)
            {
                if (item == null || !item.enabled)
                {
                    continue; // Skip invalid or disabled items
                }

                LootRegistry.RegisterItem(item); // Register the loot item
            }
        }

        /// <summary>
        /// Attempts to link a loot container to a nearby dead player corpse.
        /// </summary>
        private static void TryLinkToCorpse(LootableContainer container)
        {
            if (container == null)
            {
                return; // Skip if the container is invalid
            }

            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            if (players.Count == 0)
            {
                return; // Skip if there are no players in the world
            }

            Transform? containerTransform = container.transform;
            if (containerTransform == null)
            {
                return; // Skip if container has no valid transform
            }

            Vector3 containerPosition = containerTransform.position; // Get the container's position

            // Only check dead players that aren't already linked to a container
            foreach (var player in players)
            {
                if (player == null || player.HealthController?.IsAlive == true || string.IsNullOrEmpty(player.ProfileId))
                {
                    continue; // Skip if player is alive, invalid, or has no valid profile ID
                }

                // Check if the body is already linked
                if (DeadBodyContainerCache.Contains(player.ProfileId))
                {
                    continue; // Skip if body is already associated
                }

                Vector3 playerPosition = EFTPlayerUtil.GetPosition(player); // Get the player's position (corpse)

                // Check if the container is within distance of the corpse
                bool withinDistance = Vector3.Distance(containerPosition, playerPosition) <= MaxCorpseLinkDistance;

                if (withinDistance)
                {
                    DeadBodyContainerCache.Register(player, container); // Register the container with the player's corpse
                    Logger.LogDebug("[LootBootstrapper] Linked container to corpse: " + (player.Profile?.Info?.Nickname ?? "Unnamed"));
                    break; // No need to continue once a match is found
                }
            }
        }

        #endregion
    }
}
