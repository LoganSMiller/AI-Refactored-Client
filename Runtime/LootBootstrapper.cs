// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using Comfort.Common;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Registers all lootable objects in the current scene for bot interaction.
    /// Includes lootable containers and loose items, and links containers to corpses where applicable.
    /// </summary>
    public static class LootBootstrapper
    {
        #region Constants

        private const float MaxCorpseAssociationDistance = 1.5f;

        #endregion

        #region Public API

        /// <summary>
        /// Registers all loot containers and loose loot objects found in the scene.
        /// </summary>
        public static void RegisterAllLoot()
        {
            if (!GameWorldHandler.IsInitialized)
            {
                return;
            }

            LootableContainer[] containers = Object.FindObjectsOfType<LootableContainer>();
            LootItem[] items = Object.FindObjectsOfType<LootItem>();
            List<Player> players = GameWorldHandler.GetAllAlivePlayers();

            if (containers != null && containers.Length > 0)
            {
                RegisterContainers(containers, players);
            }

            if (items != null && items.Length > 0)
            {
                RegisterLooseItems(items);
            }
        }

        #endregion

        #region Private Methods

        private static void RegisterContainers(LootableContainer[] containers, List<Player> players)
        {
            for (int i = 0; i < containers.Length; i++)
            {
                LootableContainer container = containers[i];
                if (container == null || !container.enabled)
                {
                    continue;
                }

                LootRegistry.RegisterContainer(container);
                TryLinkToCorpse(container, players);
            }
        }

        private static void RegisterLooseItems(LootItem[] items)
        {
            for (int i = 0; i < items.Length; i++)
            {
                LootItem item = items[i];
                if (item == null || !item.enabled)
                {
                    continue;
                }

                LootRegistry.RegisterItem(item);
            }
        }

        private static void TryLinkToCorpse(LootableContainer container, List<Player> players)
        {
            if (container == null || players == null || players.Count == 0)
            {
                return;
            }

            Transform containerTransform = container.transform;
            if (containerTransform == null)
            {
                return;
            }

            Transform containerRoot = containerTransform.root;
            Vector3 containerPosition = containerTransform.position;

            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (player == null || player.HealthController == null || player.HealthController.IsAlive)
                {
                    continue;
                }

                string profileId = player.ProfileId;
                if (string.IsNullOrEmpty(profileId) || DeadBodyContainerCache.Contains(profileId))
                {
                    continue;
                }

                Transform? playerTransform = player.Transform != null ? player.Transform.Original : null;
                if (playerTransform == null)
                {
                    continue;
                }

                Transform playerRoot = playerTransform.root;
                Vector3 playerPosition = EFTPlayerUtil.GetPosition(player);

                bool rootMatch = playerRoot == containerRoot;
                bool closeEnough = Vector3.Distance(playerPosition, containerPosition) <= MaxCorpseAssociationDistance;

                if (rootMatch || closeEnough)
                {
                    DeadBodyContainerCache.Register(player, container);
                    break;
                }
            }
        }

        #endregion
    }
}
