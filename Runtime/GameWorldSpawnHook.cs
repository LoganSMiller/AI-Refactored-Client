// <auto-generated>
//   AI-Refactored: GameWorldSpawnHook.cs (Beyond Diamond – Max Realism & Parity Edition, June 2025)
//   Bulletproof: All failures strictly contained. No fallback logic. All systems retry until valid. Headless/client parity, domain reload safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Reflection;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using HarmonyLib;
    using UnityEngine;

    /// <summary>
    /// Hooks GameWorld startup to invoke AIRefactored init via InitPhaseRunner on spawn.
    /// Bulletproof: All errors strictly contained and logged. Zero fallback. Parity SPT/FIKA/headless/client. Infinite reload/teardown safe.
    /// </summary>
    public sealed class GameWorldSpawnHook : MonoBehaviour
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _hooked;

        private void Awake()
        {
            try
            {
                if (_hooked)
                {
                    Logger.LogDebug("[GameWorldSpawnHook] Already hooked—skipping duplicate patch.");
                    Destroy(this);
                    return;
                }

                Logger.LogDebug("[GameWorldSpawnHook] Installing Harmony patch for GameWorld.OnGameStarted...");

                MethodInfo method = AccessTools.Method(typeof(GameWorld), "OnGameStarted");
                if (method == null)
                {
                    Logger.LogError("[GameWorldSpawnHook] ❌ Failed to locate GameWorld.OnGameStarted.");
                    Destroy(this);
                    return;
                }

                var harmony = new Harmony("ai.refactored.spawnhook");
                harmony.Patch(method, postfix: new HarmonyMethod(typeof(GameWorldSpawnPatch), nameof(GameWorldSpawnPatch.Postfix)));

                _hooked = true;
                Logger.LogDebug("[GameWorldSpawnHook] ✅ Harmony patch installed.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[GameWorldSpawnHook] ❌ Exception during Awake: " + ex);
                Destroy(this);
            }
        }

        private void OnDestroy()
        {
            _hooked = false;
        }

        /// <summary>
        /// Postfix patch for GameWorld.OnGameStarted: triggers AIRefactored system initialization.
        /// Only runs if host and, in headless, after FIKA raid started. Bulletproof; never reboots twice.
        /// </summary>
        private static class GameWorldSpawnPatch
        {
            public static void Postfix()
            {
                try
                {
                    GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
                    if (world == null)
                    {
                        Logger.LogWarning("[GameWorldSpawnHook] GameWorld.Instance is null—skipping AIRefactored init.");
                        return;
                    }

                    // Only hosts run initialization logic (never run for non-host/clients)
                    if (!GameWorldHandler.IsHost)
                    {
                        Logger.LogDebug("[GameWorldSpawnHook] Not a valid host—init skipped.");
                        return;
                    }

                    // For FIKA headless, must wait for actual raid start to avoid early/worldless boot
                    if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
                    {
                        Logger.LogDebug("[GameWorldSpawnHook] FIKA headless detected; raid not yet started—deferring AIRefactored init.");
                        return;
                    }

                    Logger.LogDebug("[GameWorldSpawnHook] ✅ Triggering InitPhaseRunner...");
                    InitPhaseRunner.Begin(Logger);
                }
                catch (Exception ex)
                {
                    Logger.LogError("[GameWorldSpawnHook] ❌ Exception in GameWorldSpawnPatch.Postfix: " + ex);
                }
            }
        }
    }
}
