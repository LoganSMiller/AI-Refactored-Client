// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
//   Bulletproof: All failures are locally contained, never break other subsystems, and always trigger fallback isolation.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;

    /// <summary>
    /// Orchestrates the full AI-Refactored initialization lifecycle using staged world boot phases.
    /// Triggered directly from GameWorldSpawnHook instead of polling.
    /// Bulletproof: All failures are strictly isolated; no global state can be broken.
    /// </summary>
    public static class InitPhaseRunner
    {
        #region Fields

        private static bool _hasStarted;

        #endregion

        #region Lifecycle

        /// <summary>
        /// Starts the full AI-Refactored boot sequence exactly once.
        /// Bulletproof: All failures are locally contained and cannot break mod.
        /// </summary>
        /// <param name="logger">Logger for runtime diagnostics.</param>
        public static void Begin(ManualLogSource logger)
        {
            if (_hasStarted)
            {
                LogWarn(logger, "[InitPhaseRunner] Begin() already called — skipping.");
                return;
            }

            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                LogDebug(logger, "[InitPhaseRunner] Skipped — FIKA headless raid not started.");
                return;
            }

            _hasStarted = true;

            try
            {
                WorldInitState.SetPhase(WorldPhase.PreInit);
                LogDebug(logger, "[InitPhaseRunner] 🚀 Beginning AIRefactored world initialization...");

                if (!IsWorldSafeAndUnique())
                {
                    LogWarn(logger, "[InitPhaseRunner] ❌ Unsafe, duplicate, or fallback world state — aborting.");
                    ResetInternal(logger);
                    return;
                }

                WorldInitState.SetPhase(WorldPhase.AwaitWorld);

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId))
                {
                    LogWarn(logger, "[InitPhaseRunner] ⚠ No valid map ID.");
                }

                // NavMesh/navpoint building is strictly deferred from here.
                GameWorldHandler.Initialize();
                WorldBootstrapper.Begin(logger, mapId);

                WorldInitState.SetPhase(WorldPhase.WorldReady);
                LogDebug(logger, "[InitPhaseRunner] ✅ World systems initialized.");

                WorldInitState.SetPhase(WorldPhase.PostInit);
            }
            catch (Exception ex)
            {
                LogError(logger, "[InitPhaseRunner] ❌ Fatal error during Begin(): " + ex);
                ResetInternal(logger);
            }
        }

        /// <summary>
        /// Stops and resets all world systems in preparation for a new raid.
        /// Bulletproof: No errors can propagate or break the mod.
        /// </summary>
        public static void Stop()
        {
            if (!_hasStarted)
                return;

            try
            {
                ResetInternal(Plugin.LoggerInstance);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[InitPhaseRunner] ❌ Stop() error: " + ex);
            }
        }

        #endregion

        #region Internal Reset

        private static void ResetInternal(ManualLogSource logger)
        {
            _hasStarted = false;

            try { WorldInitState.Reset(); } catch { }
            try { WorldTickDispatcher.Reset(); } catch { }
            try { WorldBootstrapper.Stop(); } catch { }
            try { GameWorldHandler.Cleanup(); } catch { }
            // NavMeshStatus.Reset() removed as no longer exists

            try { LogDebug(logger, "[InitPhaseRunner] 🧹 Cleanup complete — initialization state reset."); } catch { }
        }

        #endregion

        #region Validation

        private static bool IsWorldSafeAndUnique()
        {
            try
            {
                GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
                if (world == null || world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                    return false;

                var seenProfiles = new HashSet<string>();
                for (int i = 0; i < world.RegisteredPlayers.Count; i++)
                {
                    Player player = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                    string profileId = player?.Profile?.Id;
                    if (!EFTPlayerUtil.IsValid(player) || string.IsNullOrEmpty(profileId))
                        continue;
                    if (!seenProfiles.Add(profileId))
                        return false; // Duplicate or null player

                    // Reject fallback bots from registry or fallback utility
                    if (BotRegistry.IsFallbackBot(profileId))
                        return false;
                }
                return seenProfiles.Count > 0;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region Log Helpers

        private static void LogDebug(ManualLogSource logger, string msg)
        {
            if (!FikaHeadlessDetector.IsHeadless)
                logger?.LogDebug(msg);
        }

        private static void LogWarn(ManualLogSource logger, string msg)
        {
            if (!FikaHeadlessDetector.IsHeadless)
                logger?.LogWarning(msg);
        }

        private static void LogError(ManualLogSource logger, string msg)
        {
            if (!FikaHeadlessDetector.IsHeadless)
                logger?.LogError(msg);
        }

        #endregion
    }
}
