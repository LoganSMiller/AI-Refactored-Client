// <auto-generated>
//   AI-Refactored: InitPhaseRunner.cs (Beyond Diamond, Supreme Arbitration & Recovery Edition – June 2025)
//   Bulletproof: No fallback/terminal lockouts, always attempts init, all errors strictly contained, ready for infinite reload.
//   Absolute SPT/FIKA/headless/client parity. MIT License.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;

    /// <summary>
    /// Orchestrates the full AI-Refactored staged world boot lifecycle.
    /// Triggered by GameWorldSpawnHook. Bulletproof: All errors locally isolated, no fallback/terminal disables, infinite reload safe.
    /// Full SPT/FIKA/headless/client parity.
    /// </summary>
    public static class InitPhaseRunner
    {
        private static bool _hasStarted;
        private static ManualLogSource _logger;

        /// <summary>
        /// Begins the full world and AIRefactored initialization sequence.
        /// </summary>
        public static void Begin(ManualLogSource logger)
        {
            _logger = logger ?? Plugin.LoggerInstance;

            if (_hasStarted)
            {
                _logger?.LogWarning("[InitPhaseRunner] Begin() already called—skipping duplicate.");
                return;
            }

            // In headless, only run if FIKA raid is actually started
            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                _logger?.LogDebug("[InitPhaseRunner] Skipped—FIKA headless raid not started.");
                return;
            }

            _hasStarted = true;

            try
            {
                WorldInitState.SetPhase(WorldPhase.PreInit);
                _logger?.LogDebug("[InitPhaseRunner] 🚀 Starting world/AIRefactored initialization...");

                if (!IsWorldSafeAndUnique())
                {
                    _logger?.LogWarning("[InitPhaseRunner] ❌ Unsafe or duplicate world state—aborting.");
                    ResetInternal(_logger);
                    return;
                }

                WorldInitState.SetPhase(WorldPhase.AwaitWorld);

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId))
                {
                    _logger?.LogWarning("[InitPhaseRunner] ⚠ No valid map ID. Proceeding, but world systems may be incomplete.");
                }

                GameWorldHandler.Initialize();
                WorldBootstrapper.Begin(_logger, mapId);

                WorldInitState.SetPhase(WorldPhase.WorldReady);
                _logger?.LogDebug("[InitPhaseRunner] ✅ World and AI systems initialized.");

                WorldInitState.SetPhase(WorldPhase.PostInit);
            }
            catch (Exception ex)
            {
                _logger?.LogError("[InitPhaseRunner] ❌ Fatal error during Begin(): " + ex);
                ResetInternal(_logger);
            }
        }

        /// <summary>
        /// Stops and resets all AIRefactored init state and subsystems.
        /// </summary>
        public static void Stop()
        {
            if (!_hasStarted)
                return;

            try
            {
                ResetInternal(_logger ?? Plugin.LoggerInstance);
            }
            catch (Exception ex)
            {
                (_logger ?? Plugin.LoggerInstance)?.LogError("[InitPhaseRunner] ❌ Stop() error: " + ex);
            }
        }

        /// <summary>
        /// Resets all phases and associated AI/world state, bulletproof for infinite reloads.
        /// </summary>
        private static void ResetInternal(ManualLogSource logger)
        {
            _hasStarted = false;
            try { WorldInitState.Reset(); } catch (Exception ex) { logger?.LogDebug("[InitPhaseRunner] WorldInitState.Reset failed: " + ex); }
            try { WorldTickDispatcher.Reset(); } catch (Exception ex) { logger?.LogDebug("[InitPhaseRunner] WorldTickDispatcher.Reset failed: " + ex); }
            try { WorldBootstrapper.Stop(); } catch (Exception ex) { logger?.LogDebug("[InitPhaseRunner] WorldBootstrapper.Stop failed: " + ex); }
            try { GameWorldHandler.Cleanup(); } catch (Exception ex) { logger?.LogDebug("[InitPhaseRunner] GameWorldHandler.Cleanup failed: " + ex); }
            try { logger?.LogDebug("[InitPhaseRunner] 🧹 Cleanup complete—init state fully reset."); } catch { }
        }

        /// <summary>
        /// Checks that the GameWorld is valid, non-duplicate, and ready for AI init.
        /// </summary>
        private static bool IsWorldSafeAndUnique()
        {
            try
            {
                GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
                if (world == null || world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                    return false;

                var seenProfiles = new HashSet<string>();
                for (int i = 0; i < world.RegisteredPlayers.Count; i++)
                {
                    Player player = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                    string profileId = player?.Profile?.Id;
                    if (!EFTPlayerUtil.IsValid(player) || string.IsNullOrEmpty(profileId))
                        continue;
                    if (!seenProfiles.Add(profileId))
                        return false;
                }
                return seenProfiles.Count > 0;
            }
            catch (Exception ex)
            {
                _logger?.LogDebug("[InitPhaseRunner] IsWorldSafeAndUnique failed: " + ex);
                return false;
            }
        }
    }
}
