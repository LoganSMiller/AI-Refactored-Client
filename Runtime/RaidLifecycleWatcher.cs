// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>


namespace AIRefactored.Runtime
{
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Detects GameWorld lifecycle events and triggers mod startup/teardown accordingly.
    /// Works in both FIKA headless and standard modes.
    /// </summary>
    public sealed class RaidLifecycleWatcher : MonoBehaviour
    {
        private bool _initialized;

        /// <summary>
        /// Monitors for GameWorld presence and invokes raid start logic once.
        /// </summary>
        private void Update()
        {
            if (_initialized)
            {
                return;
            }

            if (!Singleton<GameWorld>.Instantiated)
            {
                return;
            }

            GameWorld world = Singleton<GameWorld>.Instance;
            if (world == null)
            {
                return;
            }

            GameWorld.OnDispose -= OnRaidEnded; // Ensure clean rebind
            GameWorld.OnDispose += OnRaidEnded;

            AIRefactoredController.OnRaidStarted(world);
            _initialized = true;
        }

        /// <summary>
        /// Called by EFT when GameWorld is disposed. Triggers raid shutdown.
        /// </summary>
        private void OnRaidEnded()
        {
            GameWorld.OnDispose -= OnRaidEnded;
            _initialized = false;

            AIRefactoredController.OnRaidEnded();
        }

        /// <summary>
        /// Unity teardown handler to unbind all lifecycle hooks.
        /// </summary>
        private void OnDestroy()
        {
            GameWorld.OnDispose -= OnRaidEnded;
            _initialized = false;
        }
    }
}
