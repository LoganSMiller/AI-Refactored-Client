// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Detects GameWorld lifecycle events and triggers mod startup/teardown accordingly.
    /// Works in both FIKA headless and standard modes.
    /// </summary>
    public sealed class RaidLifecycleWatcher : IAIWorldSystemBootstrapper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static bool _initialized;
        private static bool _bound;

        public static RaidLifecycleWatcher Instance { get; } = new RaidLifecycleWatcher();

        public void Initialize()
        {
            _initialized = false;
            _bound = false;
        }

        public void Tick(float deltaTime)
        {
            try
            {
                if (_initialized)
                {
                    return;
                }

                if (!GameWorldHandler.IsReady())
                {
                    return;
                }

                GameWorld world = GameWorldHandler.Get();
                if (world == null)
                {
                    return;
                }

                if (!_bound)
                {
                    GameWorld.OnDispose -= OnRaidEnded;
                    GameWorld.OnDispose += OnRaidEnded;
                    _bound = true;
                }

                AIRefactoredController.OnRaidStarted(world);
                _initialized = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] Tick error: " + ex);
            }
        }

        public void OnRaidEnd()
        {
            try
            {
                GameWorld.OnDispose -= OnRaidEnded;
                _initialized = false;
                _bound = false;
                AIRefactoredController.OnRaidEnded();
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] OnRaidEnded error: " + ex);
            }
        }

        public bool IsReady()
        {
            return true;
        }

        public WorldPhase RequiredPhase()
        {
            return WorldPhase.AwaitWorld;
        }

        private static void OnRaidEnded()
        {
            Instance.OnRaidEnd();
        }
    }
}
