// <auto-generated>
//   AI-Refactored: RaidLifecycleWatcher.cs (Ultimate Arbitration, Max-Realism, Lockout-Free – June 2025)
//   Bulletproof: No fallback lockouts, all atomic event wiring, world rebinding, and strict error containment. Full parity in all modes.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Detects GameWorld lifecycle events and triggers AIRefactored startup/teardown with full parity.
    /// Bulletproof: No fallback disables, all errors strictly isolated, supports infinite reload, world rebinding, and safe headless/client operation.
    /// </summary>
    public sealed class RaidLifecycleWatcher : IAIWorldSystemBootstrapper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _initialized;
        private static bool _bound;

        public static RaidLifecycleWatcher Instance { get; } = new RaidLifecycleWatcher();

        public void Initialize()
        {
            _initialized = false;
            _bound = false;
            Logger.LogDebug("[RaidLifecycleWatcher] Initialized and state cleared.");
        }

        public void Tick(float deltaTime)
        {
            try
            {
                if (_initialized || !GameWorldHandler.IsHost || !GameWorldHandler.IsReady())
                    return;

                GameWorld world = null;
                try
                {
                    world = GameWorldHandler.Get();
                    if (world == null)
                        return;
                }
                catch (Exception ex)
                {
                    Logger.LogError("[RaidLifecycleWatcher] GameWorld.Get() failed: " + ex);
                    return;
                }

                if (!_bound)
                {
                    try
                    {
                        GameWorld.OnDispose -= OnRaidEnded;
                        GameWorld.OnDispose += OnRaidEnded;
                        _bound = true;
                        Logger.LogDebug("[RaidLifecycleWatcher] Bound to GameWorld.OnDispose.");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] Event bind failed: " + ex);
                        return;
                    }
                }

                if (!IsWorldSafeAndUnique(world))
                {
                    Logger.LogWarning("[RaidLifecycleWatcher] Unsafe or duplicate world state, skipping initialization.");
                    return;
                }

                try
                {
                    AIRefactoredController.OnRaidStarted(world);
                    _initialized = true;
                    Logger.LogDebug("[RaidLifecycleWatcher] ✅ Raid start detected and AIRefactored initialized.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidStarted error: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ Tick error: " + ex);
            }
        }

        public void OnRaidEnd()
        {
            try
            {
                if (_bound)
                {
                    try
                    {
                        GameWorld.OnDispose -= OnRaidEnded;
                        _bound = false;
                        Logger.LogDebug("[RaidLifecycleWatcher] Unbound from GameWorld.OnDispose.");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] Event unbind failed: " + ex);
                    }
                }

                if (_initialized)
                {
                    try
                    {
                        _initialized = false;
                        AIRefactoredController.OnRaidEnded();
                        Logger.LogDebug("[RaidLifecycleWatcher] 🧹 Raid end detected and AIRefactored cleaned up.");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnded cleanup error: " + ex);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnd error: " + ex);
            }
        }

        private static void OnRaidEnded()
        {
            try
            {
                Instance.OnRaidEnd();
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnded static handler error: " + ex);
            }
        }

        public bool IsReady() => true;
        public WorldPhase RequiredPhase() => WorldPhase.AwaitWorld;

        /// <summary>
        /// Ensures no duplicate bots or duplicate world states; only triggers once per unique valid world.
        /// </summary>
        private static bool IsWorldSafeAndUnique(GameWorld world)
        {
            try
            {
                if (world == null || world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                    return false;

                var seenProfiles = new HashSet<string>();
                for (int i = 0; i < world.RegisteredPlayers.Count; i++)
                {
                    Player player = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                    string profileId = player?.Profile?.Id;
                    if (!EFTPlayerUtil.IsValid(player) || string.IsNullOrEmpty(profileId))
                        continue;
                    if (!seenProfiles.Add(profileId))
                        return false;
                }
                return seenProfiles.Count > 0;
            }
            catch (Exception ex)
            {
                Logger.LogDebug("[RaidLifecycleWatcher] IsWorldSafeAndUnique failed: " + ex);
                return false;
            }
        }
    }
}
