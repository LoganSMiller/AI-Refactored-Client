// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// </summary>
    public static class LootRuntimeWatcher
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.15f;

        #endregion

        #region Static Fields

        private static float _nextAllowedRefreshTime = -1f;
        private static bool _isQueued;
        private static ManualLogSource? _logger;

        private static readonly HashSet<int> _registeredInstanceIds = new HashSet<int>();

        #endregion

        #region Public API

        /// <summary>
        /// Ticks the watcher service for refresh opportunities.
        /// </summary>
        /// <param name="now">Current time from Time.time.</param>
        public static void Tick(float now)
        {
            if (!_isQueued)
            {
                return;
            }

            if (now < _nextAllowedRefreshTime)
            {
                return;
            }

            if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            _isQueued = false;
            GameWorldHandler.RefreshLootRegistry();
            Logger.LogInfo("[LootRuntimeWatcher] Loot registry refreshed.");
        }

        /// <summary>
        /// Triggers a delayed refresh from external systems (e.g. loot spawned).
        /// </summary>
        public static void TriggerQueuedRefresh()
        {
            if (_isQueued || !GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            _nextAllowedRefreshTime = Time.time + RefreshDelaySeconds;
            _isQueued = true;
        }

        /// <summary>
        /// Immediately forces a loot refresh if allowed.
        /// </summary>
        public static void TriggerManualRefresh()
        {
            if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            _isQueued = false;
            GameWorldHandler.RefreshLootRegistry();
            Logger.LogInfo("[LootRuntimeWatcher] Manual loot registry refresh triggered.");
        }

        /// <summary>
        /// Registers a GameObject by instance ID for future-safe tracking.
        /// </summary>
        public static void Register(GameObject? go)
        {
            if (go == null)
            {
                return;
            }

            int id = go.GetInstanceID();
            if (_registeredInstanceIds.Contains(id))
            {
                return;
            }

            _registeredInstanceIds.Add(id);
            TriggerQueuedRefresh();
        }

        /// <summary>
        /// Unregisters and clears stale GameObject tracking (e.g. when loot is destroyed).
        /// </summary>
        public static void Unregister(GameObject? go)
        {
            if (go == null)
            {
                return;
            }

            int id = go.GetInstanceID();
            if (_registeredInstanceIds.Remove(id))
            {
                Logger.LogDebug("[LootRuntimeWatcher] Unregistered loot object: " + go.name);
            }
        }

        /// <summary>
        /// Clears all registered dynamic loot watchers.
        /// Safe to call on raid unload or map reset.
        /// </summary>
        public static void Reset()
        {
            _registeredInstanceIds.Clear();
            _isQueued = false;
            _nextAllowedRefreshTime = -1f;

            Logger.LogInfo("[LootRuntimeWatcher] State reset.");
        }

        /// <summary>
        /// Initializes the static logger for this system.
        /// </summary>
        /// <param name="logger">Logger to use.</param>
        public static void InitializeLogger(ManualLogSource logger)
        {
            if (logger == null)
            {
                throw new ArgumentNullException(nameof(logger));
            }

            _logger = logger;
        }

        #endregion

        #region Internal

        private static ManualLogSource Logger
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[LootRuntimeWatcher] Logger is not initialized.");
                }

                return _logger;
            }
        }

        #endregion
    }
}
