// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using AIRefactored.Core;
    using UnityEngine;
    using BepInEx.Logging;
    using System;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// </summary>
    public sealed class LootRuntimeWatcher : MonoBehaviour
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.15f;

        #endregion

        #region Fields

        private static ManualLogSource? _logger;
        private static bool _isRefreshing;

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Unity OnEnable hook. Schedules refresh if world is initialized and host is authoritative.
        /// </summary>
        private void OnEnable()
        {
            if (!Application.isPlaying || !GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return; // Skip if game world isn't ready or we're not the local host
            }

            if (_isRefreshing)
            {
                return; // Prevent multiple refresh triggers at once
            }

            _isRefreshing = true;
            this.Invoke(nameof(this.TriggerRefresh), RefreshDelaySeconds); // Delay refresh
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Performs loot registry refresh. Executes only if world and host are valid.
        /// </summary>
        private void TriggerRefresh()
        {
            if (!Application.isPlaying || !GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return; // Skip if game world isn't ready or we're not the local host
            }

            GameWorldHandler.RefreshLootRegistry(); // Refresh loot registry
            Logger.LogInfo("[LootRuntimeWatcher] Loot registry refreshed.");

            _isRefreshing = false; // Reset refresh flag after operation
        }

        /// <summary>
        /// Allows manual trigger of loot registry refresh, useful for external events.
        /// </summary>
        public static void TriggerManualRefresh()
        {
            if (_isRefreshing || !GameWorldHandler.IsReady() || !GameWorldHandler.IsLocalHost())
            {
                return; // Skip if refreshing already or we're not the local host
            }

            _isRefreshing = true;
            GameWorldHandler.RefreshLootRegistry(); // Perform manual refresh
            Logger.LogInfo("[LootRuntimeWatcher] Manual loot registry refresh triggered.");
            _isRefreshing = false; // Reset refresh flag
        }

        #endregion

        #region Logger Setup

        /// <summary>
        /// Initialize logger for LootRuntimeWatcher.
        /// </summary>
        public static void InitializeLogger(ManualLogSource logger)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger)); // Guard against null logger
        }

        private static ManualLogSource Logger
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[LootRuntimeWatcher] Logger is not initialized."); // Ensure logger is initialized
                }
                return _logger;
            }
        }

        #endregion
    }
}
