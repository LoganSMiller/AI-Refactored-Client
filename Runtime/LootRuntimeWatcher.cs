// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using UnityEngine;

    /// <summary>
    /// Monitors dynamically spawned loot (e.g., from dead players or quest events).
    /// Automatically triggers a registry update after scene settle delay.
    /// </summary>
    public sealed class LootRuntimeWatcher : MonoBehaviour
    {
        #region Configuration

        private const float RefreshDelay = 0.1f;

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Called when this component is enabled. Schedules a loot registry refresh if conditions allow.
        /// </summary>
        private void OnEnable()
        {
            if (!Application.isPlaying || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            this.Invoke(nameof(this.NotifyLootChanged), RefreshDelay);
        }

        #endregion

        #region Refresh Trigger

        /// <summary>
        /// Notifies the world handler to rescan loot objects.
        /// </summary>
        private void NotifyLootChanged()
        {
            if (!Application.isPlaying || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            if (GameWorldHandler.IsInitialized)
            {
                GameWorldHandler.RefreshLootRegistry();
            }
        }

        #endregion
    }
}