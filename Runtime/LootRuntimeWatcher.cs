// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using AIRefactored.Core;
    using UnityEngine;

    /// <summary>
    /// Monitors runtime loot additions from dynamic events (e.g. player death, mission drops).
    /// Triggers a one-time registry refresh shortly after object enable.
    /// </summary>
    public sealed class LootRuntimeWatcher : MonoBehaviour
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.1f;

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Called when this component is enabled. Schedules a loot registry refresh.
        /// </summary>
        private void OnEnable()
        {
            if (!Application.isPlaying)
            {
                return;
            }

            this.Invoke("TriggerRefresh", RefreshDelaySeconds);
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Invoked after delay to rescan loot objects once world is stable.
        /// Works in both headless and client environments.
        /// </summary>
        private void TriggerRefresh()
        {
            if (!Application.isPlaying)
            {
                return;
            }

            if (GameWorldHandler.IsInitialized)
            {
                GameWorldHandler.RefreshLootRegistry();
            }
        }

        #endregion
    }
}