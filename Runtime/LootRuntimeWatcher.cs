// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// </summary>
    public sealed class LootRuntimeWatcher : IAIWorldSystemBootstrapper
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.15f;

        #endregion

        #region Static Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly HashSet<int> RegisteredInstanceIds = new HashSet<int>();

        private static float _nextAllowedRefreshTime = -1f;
        private static bool _isQueued;
        private static bool _hasLoggedReset;

        #endregion

        #region Bootstrap Interface

        public void Initialize()
        {
            try
            {
                _hasLoggedReset = false;
                Reset();
                Logger.LogDebug("[LootRuntimeWatcher] Initialized.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] Initialize error: " + ex);
            }
        }

        public void Tick(float deltaTime)
        {
            try
            {
                if (!_isQueued || Time.time < _nextAllowedRefreshTime)
                {
                    return;
                }

                if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                {
                    return;
                }

                _isQueued = false;
                GameWorldHandler.RefreshLootRegistry();
                Logger.LogDebug("[LootRuntimeWatcher] ✅ Loot registry refreshed.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] Tick error: " + ex);
            }
        }

        public void OnRaidEnd()
        {
            try
            {
                Reset();
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] OnRaidEnd error: " + ex);
            }
        }

        public bool IsReady()
        {
            return true;
        }

        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        #endregion

        #region Public API

        public static void TriggerQueuedRefresh()
        {
            if (_isQueued || !GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
            {
                return;
            }

            _nextAllowedRefreshTime = Time.time + RefreshDelaySeconds;
            _isQueued = true;
        }

        public static void TriggerManualRefresh()
        {
            if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
            {
                return;
            }

            _isQueued = false;
            GameWorldHandler.RefreshLootRegistry();
            Logger.LogDebug("[LootRuntimeWatcher] 🔁 Manual loot registry refresh triggered.");
        }

        public static void Register(GameObject go)
        {
            if (go == null)
            {
                return;
            }

            int id = go.GetInstanceID();
            if (RegisteredInstanceIds.Add(id))
            {
                TriggerQueuedRefresh();
            }
        }

        public static void Unregister(GameObject go)
        {
            if (go == null)
            {
                return;
            }

            int id = go.GetInstanceID();
            if (RegisteredInstanceIds.Remove(id))
            {
                Logger.LogDebug("[LootRuntimeWatcher] Unregistered loot object: " + go.name);
            }
        }

        public static void Reset()
        {
            if (_hasLoggedReset)
            {
                return;
            }

            RegisteredInstanceIds.Clear();
            _isQueued = false;
            _nextAllowedRefreshTime = -1f;
            _hasLoggedReset = true;

            try
            {
                Logger.LogDebug("[LootRuntimeWatcher] Reset.");
            }
            catch
            {
                // Silent fail — logger may not be valid during teardown
            }
        }

        #endregion
    }
}
