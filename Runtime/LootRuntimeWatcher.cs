// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// </summary>
    public sealed class LootRuntimeWatcher : MonoBehaviour
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.15f;

        #endregion

        #region Static Fields

        private static ManualLogSource? _logger;
        private static bool _isRefreshing;

        #endregion

        #region Unity Lifecycle

        private void OnEnable()
        {
            if (!Application.isPlaying ||
                !GameWorldHandler.IsReady() ||
                !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (_isRefreshing)
            {
                return;
            }

            _isRefreshing = true;
            Invoke(nameof(TriggerRefresh), RefreshDelaySeconds);
        }

        #endregion

        #region Refresh Logic

        private void TriggerRefresh()
        {
            if (!Application.isPlaying ||
                !GameWorldHandler.IsReady() ||
                !GameWorldHandler.IsLocalHost())
            {
                _isRefreshing = false;
                return;
            }

            GameWorldHandler.RefreshLootRegistry();
            Logger.LogInfo("[LootRuntimeWatcher] Loot registry refreshed.");

            _isRefreshing = false;
        }

        /// <summary>
        /// Allows external systems to trigger a refresh manually.
        /// </summary>
        public static void TriggerManualRefresh()
        {
            if (_isRefreshing ||
                !GameWorldHandler.IsReady() ||
                !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            _isRefreshing = true;
            GameWorldHandler.RefreshLootRegistry();
            Logger.LogInfo("[LootRuntimeWatcher] Manual loot registry refresh triggered.");
            _isRefreshing = false;
        }

        #endregion

        #region Logger

        /// <summary>
        /// Initializes the static logger for this system.
        /// </summary>
        public static void InitializeLogger(ManualLogSource logger)
        {
            if (logger == null)
            {
                throw new ArgumentNullException(nameof(logger));
            }

            _logger = logger;
        }

        private static ManualLogSource Logger
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[LootRuntimeWatcher] Logger is not initialized.");
                }

                return _logger;
            }
        }

        #endregion
    }
}
