// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Threads;
	using AIRefactored.Bootstrap;
	using AIRefactored.Core;
	using BepInEx.Logging;
	using Comfort.Common;
	using EFT;
	using UnityEngine;

	/// <summary>
	/// Static bot spawn tracker. Injects brains for new bots without using MonoBehaviours.
	/// Called externally on update by WorldBootstrapper or BotWorkScheduler.
	/// </summary>
	public sealed class BotSpawnWatcherService : IAIWorldSystemBootstrapper
	{
		#region Constants

		private const float PollInterval = 1.5f;

		#endregion

		#region Fields

		private static readonly HashSet<int> SeenBotIds = new HashSet<int>();
		private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

		private static float _nextPollTime = -1f;
		private static bool _hasWarnedInvalid;
		private static bool _hasLoggedReset;

		#endregion

		#region Lifecycle

		public void Initialize()
		{
			try
			{
				Reset();
				_hasLoggedReset = false;
				Logger.LogDebug("[BotSpawnWatcher] ✅ Initialized.");
			}
			catch (Exception ex)
			{
				Logger.LogError("[BotSpawnWatcher] ❌ Initialize failed: " + ex);
			}
		}

		public void Tick(float deltaTime)
		{
			try
			{
				if (!GameWorldHandler.IsHost || !GameWorldHandler.IsInitialized || !GameWorldHandler.IsReady() || !WorldInitState.IsInPhase(WorldPhase.WorldReady))
				{
					if (!_hasWarnedInvalid)
					{
						Logger.LogWarning("[BotSpawnWatcher] ⚠ World not ready or not host — deferring.");
						_hasWarnedInvalid = true;
					}

					return;
				}

				if (_hasWarnedInvalid)
				{
					Logger.LogDebug("[BotSpawnWatcher] ✅ World ready. Resuming bot tracking.");
					_hasWarnedInvalid = false;
				}

				float now = Time.time;
				if (now < _nextPollTime)
				{
					return;
				}

				_nextPollTime = now + PollInterval;

				List<Player> players = GameWorldHandler.GetAllAlivePlayers();
				if (players == null || players.Count == 0)
				{
					return;
				}

				for (int i = 0; i < players.Count; i++)
				{
					Player player = players[i];
					if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.gameObject == null)
					{
						continue;
					}

					GameObject go = player.gameObject;
					int id = go.GetInstanceID();

					if (!SeenBotIds.Add(id))
					{
						continue;
					}

					if (go.GetComponent<BotBrain>() != null)
					{
						continue;
					}

					if (player.AIData == null || player.AIData.BotOwner == null)
					{
						continue;
					}

					try
					{
						BotBrainGuardian.Enforce(go);
						GameWorldHandler.TryAttachBotBrain(player.AIData.BotOwner);
						Logger.LogDebug("[BotSpawnWatcher] ✅ Brain injected for bot: " + player.Profile?.Info?.Nickname ?? player.ProfileId);
					}
					catch (Exception ex)
					{
						Logger.LogError("[BotSpawnWatcher] ❌ Brain injection failed for bot: " + ex);
					}
				}
			}
			catch (Exception ex)
			{
				Logger.LogError("[BotSpawnWatcher] ❌ Tick error: " + ex);
			}
		}

		public void OnRaidEnd()
		{
			try
			{
				Reset();
				Logger.LogDebug("[BotSpawnWatcher] 🧹 Reset after raid.");
			}
			catch (Exception ex)
			{
				Logger.LogError("[BotSpawnWatcher] ❌ OnRaidEnd error: " + ex);
			}
		}

		public static void Reset()
		{
			SeenBotIds.Clear();
			_nextPollTime = -1f;
			_hasWarnedInvalid = false;
			_hasLoggedReset = true;

			try
			{
				Logger.LogDebug("[BotSpawnWatcher] Reset complete.");
			}
			catch
			{
				// Logger might not be available during teardown.
			}
		}

		#endregion

		#region Integration

		public bool IsReady()
		{
			return WorldInitState.IsInPhase(WorldPhase.WorldReady);
		}

		public WorldPhase RequiredPhase()
		{
			return WorldPhase.WorldReady;
		}

		#endregion
	}
}
