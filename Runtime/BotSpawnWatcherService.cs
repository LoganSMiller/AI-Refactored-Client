// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All polling, validation, and injection is strictly localized. No fallback lockouts, always retries, atomic cache/owner/brain enforcement.
// </auto-generated>

namespace AIRefactored.Runtime
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Navigation;
	using AIRefactored.AI.Threads;
	using AIRefactored.Bootstrap;
	using AIRefactored.Core;
	using BepInEx.Logging;
	using Comfort.Common;
	using EFT;
	using UnityEngine;

	public sealed class BotSpawnWatcherService : IAIWorldSystemBootstrapper
	{
		#region Constants

		private const float PollInterval = 1.5f;

		#endregion

		#region Fields

		private static readonly HashSet<int> SeenBotIds = new HashSet<int>();
		private static readonly HashSet<string> SeenProfileIds = new HashSet<string>();
		private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

		private static float _nextPollTime = -1f;
		private static bool _hasWarnedInvalid;

		#endregion

		#region Lifecycle

		public void Initialize()
		{
			try
			{
				Reset();
				LogDebug("[BotSpawnWatcher] ✅ Initialized.");
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ Initialize failed: " + ex);
			}
		}

		public void OnRaidEnd()
		{
			try
			{
				Reset();
				LogDebug("[BotSpawnWatcher] 🧹 Reset after raid.");
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ OnRaidEnd error: " + ex);
			}
		}

		public static void Reset()
		{
			try
			{
				SeenBotIds.Clear();
				SeenProfileIds.Clear();
				_nextPollTime = -1f;
				_hasWarnedInvalid = false;
				LogDebug("[BotSpawnWatcher] 🔄 Reset complete.");
			}
			catch { }
		}

		#endregion

		#region Tick

		public void Tick(float deltaTime)
		{
			try
			{
				if (!GameWorldHandler.IsHost || !GameWorldHandler.IsInitialized || !GameWorldHandler.IsReady() || !WorldInitState.IsInPhase(WorldPhase.WorldReady))
				{
					if (!_hasWarnedInvalid)
					{
						LogWarn("[BotSpawnWatcher] ⚠ Not ready or not host — polling deferred.");
						_hasWarnedInvalid = true;
					}
					return;
				}

				if (_hasWarnedInvalid)
				{
					_hasWarnedInvalid = false;
					LogDebug("[BotSpawnWatcher] ✅ Host world recovered — resuming.");
				}

				float now = Time.time;
				if (now < _nextPollTime)
					return;

				_nextPollTime = now + PollInterval;

				List<Player> players = GameWorldHandler.GetAllAlivePlayers();
				if (players == null || players.Count == 0)
					return;

				for (int i = 0; i < players.Count; i++)
				{
					try
					{
						Player player = players[i];
						if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.gameObject == null)
							continue;

						GameObject go = player.gameObject;
						int id = go.GetInstanceID();
						string profileId = player.ProfileId ?? player.Profile?.Id;

						if (!SeenBotIds.Add(id))
							continue;
						if (!string.IsNullOrEmpty(profileId) && !SeenProfileIds.Add(profileId))
							continue;

						if (go.GetComponent<BotBrain>() != null)
							continue;

						if (player.AIData == null || player.AIData.BotOwner == null)
							continue;

						// --- Atomic brain+cache+owner injection start ---
						try
						{
							// Always ensure atomic creation of cache and owner
							var botOwner = player.AIData.BotOwner;
							var cache = BotComponentCacheRegistry.GetOrCreate(botOwner);
							if (cache == null)
							{
								LogWarn("[BotSpawnWatcher] Cache was null after GetOrCreate. Will retry next tick.");
								continue;
							}
							if (cache.AIRefactoredBotOwner == null)
							{
								var aiOwner = new AIRefactoredBotOwner();
								cache.SetOwner(aiOwner);
								aiOwner.Initialize(botOwner);
								BotRegistry.RegisterOwner(profileId, aiOwner);
							}
							else if (!cache.AIRefactoredBotOwner.HasPersonality())
							{
								cache.AIRefactoredBotOwner.Initialize(botOwner);
							}

							BotBrainGuardian.Enforce(go);
							GameWorldHandler.TryAttachBotBrain(botOwner);

							string name = player.Profile?.Info?.Nickname ?? player.ProfileId;
							LogDebug("[BotSpawnWatcher] ✅ Brain injected for bot: " + name);
						}
						catch (Exception ex)
						{
							LogError("[BotSpawnWatcher] ❌ Brain injection failed for bot: " + ex);
						}
						// --- Atomic brain+cache+owner injection end ---
					}
					catch (Exception ex)
					{
						LogError("[BotSpawnWatcher] Bot validation failed: " + ex);
					}
				}
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ Tick error: " + ex);
			}
		}

		#endregion

		#region Integration

		public bool IsReady() => WorldInitState.IsInPhase(WorldPhase.WorldReady);

		public WorldPhase RequiredPhase() => WorldPhase.WorldReady;

		#endregion

		#region Log Helpers

		private static void LogDebug(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogDebug(msg);
		}

		private static void LogWarn(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogWarning(msg);
		}

		private static void LogError(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogError(msg);
		}

		#endregion
	}
}
