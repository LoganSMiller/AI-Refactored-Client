// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Runtime
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Monitors GameWorld state and ensures AIRefactored systems remain functional across sessions.
    /// Can be called externally by WorldBootstrapper, headless tick scheduler, or raid monitor.
    /// </summary>
    public static class BotRecoveryService
    {
        private const float TickInterval = 5f;
        private const int MaxRetryAttempts = 3;

        private static float _nextTick = -1f;
        private static int _retryAttempts;
        private static bool _hasWarnedMissingWorld;
        private static bool _hasRescanned;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        public static void Tick(float now)
        {
            if (!GameWorldHandler.IsLocalHost())
                return;

            if (!GameWorldHandler.IsSafeToInitialize)
                return;

            if (now < _nextTick)
                return;

            _nextTick = now + TickInterval;

            GameWorld? world = GameWorldHandler.Get();
            if (world == null || world.AllAlivePlayersList == null || !GameWorldHandler.IsReady())
            {
                HandleWorldRecovery(GameWorldHandler.IsReady());
                return;
            }

            if (_hasWarnedMissingWorld)
            {
                Logger.LogInfo("[BotRecoveryService] GameWorld recovered.");
                _hasWarnedMissingWorld = false;
            }

            if (!GameWorldHandler.IsInitialized)
            {
                Logger.LogWarning("[BotRecoveryService] World not initialized — forcing bootstrap.");
                GameWorldHandler.TryInitializeWorld();
                return;
            }

            ZoneAutoRefresher.Tick(now);
            EnsureSpawnHook();
            ValidateBotBrains(world.AllAlivePlayersList);
        }

        public static void Reset()
        {
            _retryAttempts = 0;
            _nextTick = -1f;
            _hasWarnedMissingWorld = false;
            _hasRescanned = false;
        }

        private static void HandleWorldRecovery(bool worldReady)
        {
            if (!_hasWarnedMissingWorld)
            {
                Logger.LogWarning("[BotRecoveryService] GameWorld missing or not ready.");
                _hasWarnedMissingWorld = true;
            }

            if (_retryAttempts < MaxRetryAttempts)
            {
                _retryAttempts++;
                GameWorldHandler.TryInitializeWorld();
                ZoneAutoRefresher.Reset();
                Logger.LogInfo($"[BotRecoveryService] Retry attempt #{_retryAttempts} to reinitialize world.");
            }
            else
            {
                Logger.LogError("[BotRecoveryService] Max retries reached — recovery halted.");
            }
        }

        private static void EnsureSpawnHook()
        {
            if (!Singleton<BotSpawner>.Instantiated)
                return;

            BotSpawner spawner = Singleton<BotSpawner>.Instance;
            spawner.OnBotCreated -= GameWorldHandler.TryAttachBotBrain;
            spawner.OnBotCreated += GameWorldHandler.TryAttachBotBrain;
        }

        private static void ValidateBotBrains(List<Player> players)
        {
            for (int i = 0; i < players.Count; i++)
            {
                Player? player = players[i];
                if (player == null || !player.IsAI || player.gameObject == null)
                    continue;

                if (player.GetComponent<BotBrain>() != null)
                    continue;

                Logger.LogWarning($"[BotRecoveryService] Bot missing brain — restoring: {player.Profile?.Info?.Nickname ?? "Unnamed"}");
                BotBrainGuardian.Enforce(player.gameObject);

                if (player.AIData == null || player.AIData.BotOwner == null)
                    continue;

                BotOwner? bot = player.AIData.BotOwner;
                if (bot != null)
                {
                    GameWorldHandler.TryAttachBotBrain(bot);
                }

                if (!_hasRescanned)
                {
                    _hasRescanned = true;
                    RescanWorld();
                }
            }
        }

        private static void RescanWorld()
        {
            string mapId = GameWorldHandler.GetCurrentMapName();
            Logger.LogInfo($"[BotRecoveryService] Rescanning world: {mapId}");

            HotspotRegistry.Clear();
            HotspotRegistry.Initialize(mapId);

            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();

            NavPointRegistry.Clear();
            NavPointRegistry.RegisterAll(mapId);

            ZoneAutoRefresher.Reset();
            Logger.LogInfo("[BotRecoveryService] Rescan complete.");
        }
    }
}
