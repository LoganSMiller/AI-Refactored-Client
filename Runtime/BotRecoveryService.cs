// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Monitors GameWorld state and ensures AIRefactored systems remain functional across sessions.
    /// Called externally by WorldBootstrapper, tick scheduler, or raid monitor.
    /// </summary>
    public sealed class BotRecoveryService : IAIWorldSystemBootstrapper
    {
        private const float TickInterval = 5f;

        private static float _nextTick = -1f;
        private static bool _hasWarnedMissingWorld;
        private static bool _hasRescanned;
        private static bool _hasInitialized;

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        public static BotRecoveryService Instance { get; } = new BotRecoveryService();

        public void Initialize()
        {
            try
            {
                Reset();
                _hasInitialized = true;
                Logger.LogInfo("[BotRecoveryService] Initialized.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotRecoveryService] Initialize failed: " + ex);
            }
        }

        public void Tick(float deltaTime)
        {
            try
            {
                if (!_hasInitialized || !GameWorldHandler.IsLocalHost() || !GameWorldHandler.IsSafeToInitialize)
                {
                    return;
                }

                float now = Time.time;
                if (now < _nextTick)
                {
                    return;
                }

                _nextTick = now + TickInterval;

                GameWorld world = GameWorldHandler.Get();
                if (world == null || world.AllAlivePlayersList == null || !GameWorldHandler.IsReady())
                {
                    if (!_hasWarnedMissingWorld)
                    {
                        Logger.LogWarning("[BotRecoveryService] GameWorld not ready.");
                        _hasWarnedMissingWorld = true;
                    }

                    return;
                }

                if (_hasWarnedMissingWorld)
                {
                    Logger.LogInfo("[BotRecoveryService] GameWorld recovered.");
                    _hasWarnedMissingWorld = false;
                }

                EnsureSpawnHook();
                ValidateBotBrains(world.AllAlivePlayersList);
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotRecoveryService] Tick error: " + ex);
            }
        }

        public void OnRaidEnd()
        {
            try
            {
                Reset();
                _hasInitialized = false;
                Logger.LogInfo("[BotRecoveryService] Reset on raid end.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotRecoveryService] OnRaidEnd error: " + ex);
            }
        }

        public static void Reset()
        {
            _nextTick = -1f;
            _hasWarnedMissingWorld = false;
            _hasRescanned = false;
        }

        public bool IsReady()
        {
            return _hasInitialized && GameWorldHandler.IsLocalHost() && GameWorldHandler.IsReady();
        }

        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        private static void EnsureSpawnHook()
        {
            try
            {
                if (!Singleton<BotSpawner>.Instantiated)
                {
                    return;
                }

                BotSpawner spawner = Singleton<BotSpawner>.Instance;
                spawner.OnBotCreated -= GameWorldHandler.TryAttachBotBrain;
                spawner.OnBotCreated += GameWorldHandler.TryAttachBotBrain;
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotRecoveryService] EnsureSpawnHook error: " + ex);
            }
        }

        private static void ValidateBotBrains(List<Player> players)
        {
            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (player == null || !player.IsAI || player.gameObject == null)
                {
                    continue;
                }

                if (player.GetComponent<BotBrain>() != null)
                {
                    continue;
                }

                Logger.LogWarning("[BotRecoveryService] Bot missing brain — restoring: " + (player.Profile != null ? player.Profile.Info.Nickname : "Unnamed"));

                BotBrainGuardian.Enforce(player.gameObject);

                try
                {
                    BotOwner owner = player.AIData != null ? player.AIData.BotOwner : null;
                    if (owner != null)
                    {
                        GameWorldHandler.TryAttachBotBrain(owner);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError("[BotRecoveryService] Error reattaching BotOwner: " + ex);
                }

                if (!_hasRescanned)
                {
                    _hasRescanned = true;
                    RescanWorld();
                }
            }
        }

        private static void RescanWorld()
        {
            try
            {
                string mapId = GameWorldHandler.TryGetValidMapName();
                if (mapId.Length == 0)
                {
                    Logger.LogWarning("[BotRecoveryService] Rescan aborted — invalid mapId.");
                    return;
                }

                Logger.LogInfo("[BotRecoveryService] Rescanning world: " + mapId);

                HotspotRegistry.Clear();
                HotspotRegistry.Initialize(mapId);

                LootRegistry.Clear();
                LootBootstrapper.RegisterAllLoot();
                BotDeadBodyScanner.ScanAll();

                NavPointRegistry.Clear();
                NavPointRegistry.RegisterAll(mapId);

                Logger.LogInfo("[BotRecoveryService] Rescan complete.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotRecoveryService] RescanWorld error: " + ex);
            }
        }
    }
}
