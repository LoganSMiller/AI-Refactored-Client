// <auto-generated>
//   AI-Refactored: BotMovementHelper.cs (Beyond Diamond Ultra-Realism Edition)
//   Patched for per-bot movement cache, smooth micro-drift, and stutter-proofed issue logic.
//   All navigation is path-based, never teleports or sets position directly.
//   All position reads are via GetPosition() only — never use bot.Position or transform.position directly.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides ultra-realistic, validated, smooth movement operations for bots.
    /// All operations use path-based, drifted targets; zero teleportation, zero position sets.
    /// Adds micro-jitter, personality-driven bias, movement stutter suppression, and full null-guarding.
    /// All position reads use GetPosition(BotOwner).
    /// </summary>
    public static class BotMovementHelper
    {
        #region Constants

        private const float DefaultLookSpeed = 4.25f;
        private const float DefaultRadius = 0.8f;
        private const float DefaultStrafeDistance = 3.0f;
        private const float RetreatDistance = 6.5f;
        private const float MinMoveEpsilon = 0.07f;
        private const float SlerpBias = 0.965f;
        private const float MicroJitterMagnitude = 0.11f;
        private const float MinMoveDelta = 0.25f;
        private const float MinMoveInterval = 0.7f;

        #endregion

        #region Movement Cache Struct

        public class BotMoveCache
        {
            public Vector3 LastMoveTarget = Vector3.zero;
            public float LastMoveTime = -1000f;
            public Vector3 CurrentDriftTarget = Vector3.zero;
            public float NextDriftUpdate = 0f;
        }

        private static BotMoveCache GetCache(BotOwner bot)
        {
            return bot?.GetComponent<BotComponentCache>()?.MoveCache;
        }

        #endregion

        #region Position API (MANDATORY)

        /// <summary>
        /// Returns the bot's authoritative, navmesh/AI-driven position.
        /// Always uses BotOwner.Position. Never calls BotMover.Position (does not exist).
        /// All fallback paths are null/NaN/infinity guarded.
        /// </summary>
        public static Vector3 GetPosition(BotOwner bot)
        {
            if (bot == null)
                return Vector3.zero;

            try
            {
                // 1. Authoritative position from BotOwner.
                var pos = bot.Position;
                if (!float.IsNaN(pos.x) && !float.IsInfinity(pos.x))
                    return pos;

                // 2. Try the player's transform if available.
                var p = bot.GetPlayer;
                if (p != null && p.gameObject != null)
                {
                    var t = p.gameObject.transform;
                    if (t != null && !float.IsNaN(t.position.x) && !float.IsInfinity(t.position.x))
                        return t.position;
                }

                // 3. Fallback: try BotOwner's Transform.Original
                var orig = bot.Transform?.Original;
                if (orig != null && !float.IsNaN(orig.position.x) && !float.IsInfinity(orig.position.x))
                    return orig.position;
            }
            catch { }

            return Vector3.zero;
        }

        #endregion

        #region Public API

        public static void Reset(BotOwner bot)
        {
            var cache = GetCache(bot);
            if (cache != null)
            {
                cache.LastMoveTarget = Vector3.zero;
                cache.LastMoveTime = -1000f;
                cache.CurrentDriftTarget = Vector3.zero;
                cache.NextDriftUpdate = 0f;
            }
        }

        public static void RetreatToCover(BotOwner bot, Vector3 threatDir, float distance = RetreatDistance, bool sprint = true)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 origin = GetPosition(bot);
                Vector3 baseTarget = origin - threatDir.normalized * distance;
                if (!BotNavHelper.TryGetSafeTarget(bot, out Vector3 target))
                    target = baseTarget;
                if (!IsValidTarget(target))
                    target = origin;

                float cohesion = 1f;
                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                if (profile != null)
                {
                    cohesion = Mathf.Clamp(profile.Cohesion, 0.7f, 1.3f);
                    if (profile.IsFrenzied || profile.IsFearful)
                        sprint = true;
                }

                Vector3 drifted = ApplyMicroDrift(target, bot.ProfileId, Time.frameCount, profile, bot);
                IssueMoveIfNotRedundant(bot, drifted, true, cohesion);
                if (sprint)
                    bot.Sprint(true);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] RetreatToCover failed: " + ex);
            }
        }

        public static void SmoothLookTo(BotOwner bot, Vector3 lookTarget, float speed = DefaultLookSpeed)
        {
            try
            {
                if (!IsAlive(bot) || !IsValidTarget(lookTarget))
                    return;

                Transform transform = bot.Transform?.Original;
                if (transform == null)
                    return;

                Vector3 origin = GetPosition(bot);
                Vector3 direction = lookTarget - origin;
                direction.y = 0f;
                if (direction.sqrMagnitude < MinMoveEpsilon)
                    return;

                float humanOvershoot = 1f + ((SeededRandom(bot.ProfileId, Time.frameCount) - 0.5f) * 0.03f);
                Quaternion targetRotation = Quaternion.LookRotation(direction.normalized, Vector3.up);
                float t = SlerpBias * Time.deltaTime * Mathf.Clamp(speed, 1.1f, 9.5f) * humanOvershoot;
                transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, t);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothLookTo failed: " + ex);
            }
        }

        public static bool SmoothMoveToSafe(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            try
            {
                if (!IsAlive(bot) || !IsValidTarget(target))
                    return false;

                Vector3 safeTarget = BotNavHelper.TryGetSafeTarget(bot, out Vector3 fallback) ? fallback : target;
                Vector3 origin = GetPosition(bot);
                if (!IsValidTarget(safeTarget))
                    safeTarget = origin;

                float radius = DefaultRadius * Mathf.Clamp(cohesionScale, 0.7f, 1.3f);
                if ((origin.x - safeTarget.x) * (origin.x - safeTarget.x) + (origin.z - safeTarget.z) * (origin.z - safeTarget.z) < radius * radius)
                    return true;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(safeTarget, bot.ProfileId, Time.frameCount, profile, bot);
                IssueMoveIfNotRedundant(bot, drifted, slow, cohesionScale);
                return true;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothMoveToSafe failed: " + ex);
                return false;
            }
        }

        public static void SmoothMoveTo(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            SmoothMoveToSafe(bot, target, slow, cohesionScale);
        }

        public static void SmoothStrafeFrom(BotOwner bot, Vector3 threatDir, float scale = 1f)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 origin = GetPosition(bot);
                Vector3 right = Vector3.Cross(Vector3.up, threatDir.normalized);
                if (right.sqrMagnitude < 0.01f)
                    right = Vector3.right;

                Vector3 offset = right.normalized * DefaultStrafeDistance * Mathf.Clamp(scale, 0.75f, 1.25f);
                Vector3 rawTarget = origin + offset;

                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : rawTarget;
                if (!IsValidTarget(final))
                    final = origin;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 15, profile, bot);
                IssueMoveIfNotRedundant(bot, drifted, false, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothStrafeFrom failed: " + ex);
            }
        }

        public static void ForceFallbackMove(BotOwner bot)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 origin = GetPosition(bot);
                Vector3 dir = bot.LookDirection;
                Vector3 rawTarget = origin + dir.normalized * 5f;

                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : rawTarget;
                if (!IsValidTarget(final))
                    final = origin;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 21, profile, bot);
                IssueMoveIfNotRedundant(bot, drifted, true, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] ForceFallbackMove failed: " + ex);
            }
        }

        public static void SmoothMoveToSafeExit(BotOwner bot)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 origin = GetPosition(bot);
                Vector3 fallback = origin + bot.LookDirection.normalized * 4f;
                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : fallback;
                if (!IsValidTarget(final))
                    final = origin;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 35, profile, bot);
                IssueMoveIfNotRedundant(bot, drifted, true, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothMoveToSafeExit failed: " + ex);
            }
        }

        #endregion

        #region Internal Logic

        private static void IssueMoveIfNotRedundant(BotOwner bot, Vector3 drifted, bool slow, float cohesion)
        {
            try
            {
                var cache = GetCache(bot);
                if (cache == null) return;

                float time = Time.time;
                if ((drifted - cache.LastMoveTarget).sqrMagnitude > MinMoveDelta || time - cache.LastMoveTime > MinMoveInterval)
                {
                    bot.Mover?.GoToPoint(drifted, slow, cohesion);
                    cache.LastMoveTarget = drifted;
                    cache.LastMoveTime = time;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] IssueMoveIfNotRedundant failed: " + ex);
            }
        }

        private static bool IsAlive(BotOwner bot)
        {
            return bot != null && bot.GetPlayer != null && bot.GetPlayer.IsAI && !bot.IsDead;
        }

        private static bool IsValidTarget(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z)
                && !float.IsInfinity(pos.x) && !float.IsInfinity(pos.y) && !float.IsInfinity(pos.z);
        }

        public static Vector3 ApplyMicroDrift(Vector3 pos, string profileId, int tick, BotPersonalityProfile profile = null, BotOwner bot = null)
        {
            var cache = GetCache(bot);
            if (cache == null)
                return pos;

            float now = Time.time;
            if (now > cache.NextDriftUpdate || cache.CurrentDriftTarget == Vector3.zero)
            {
                float baseMag = MicroJitterMagnitude;
                float personalityBias = 1f;
                if (profile != null)
                {
                    personalityBias = Mathf.Clamp(
                        1f + (profile.MovementJitter * 0.15f) + (profile.AggressionLevel * 0.05f),
                        0.93f, 1.15f);
                }
                int hash = (profileId?.GetHashCode() ?? 0) ^ (tick * 11) ^ 0x17DF413;
                unchecked
                {
                    hash = (int)((hash ^ (hash >> 13)) * 0x7FEDCBA9);
                    float dx = ((hash & 0xFF) / 255f - 0.5f) * baseMag * personalityBias;
                    float dz = (((hash >> 8) & 0xFF) / 255f - 0.5f) * baseMag * personalityBias;
                    cache.CurrentDriftTarget = pos + new Vector3(dx, 0, dz);
                }
                cache.NextDriftUpdate = now + UnityEngine.Random.Range(0.7f, 1.22f);
            }
            return Vector3.Lerp(pos, cache.CurrentDriftTarget, 0.2f);
        }

        private static float SeededRandom(string profileId, int tick)
        {
            int hash = (profileId?.GetHashCode() ?? 0) ^ (tick * 163) ^ 0x1A983D;
            unchecked { hash = (hash ^ (hash >> 13)) * 0x5E2D58B9; }
            return ((hash & 0x7FFFFFFF) % 997) / 997f;
        }

        #endregion
    }
}
