// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides smooth, human-like movement and aim transitions for AIRefactored bots.
    /// Includes fallback, strafing, smooth look, and smooth go-to movement.
    /// </summary>
    public static class BotMovementHelper
    {
        #region Constants

        private const float DefaultLookSpeed = 4f;
        private const float DefaultRadius = 0.8f;
        private const float DefaultStrafeDistance = 3f;
        private const float RetreatDistance = 6f;

        #endregion

        #region Public Methods

        public static void Reset(BotOwner bot)
        {
            // Reserved for future movement interrupt/clear logic
        }

        public static void RetreatToCover(BotOwner bot, Vector3 threatDirection, float distance = RetreatDistance, bool sprint = true)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 fallback = bot.Position - threatDirection.normalized * distance;
            BotComponentCache cache = BotCacheUtility.GetCache(bot);
            if (cache != null && cache.Pathing != null)
            {
                List<Vector3> path = BotCoverRetreatPlanner.GetCoverRetreatPath(bot, threatDirection, cache.Pathing);
                for (int i = path.Count - 1; i >= 0; i--)
                {
                    Vector3 point = path[i];
                    if (!BotCoverHelper.WasRecentlyUsed(point))
                    {
                        fallback = point;
                        break;
                    }
                }
            }

            float cohesion = 1f;
            bool shouldSprint = sprint;

            BotPersonalityProfile profile;
            if (BotRegistry.TryGet(bot.ProfileId, out profile))
            {
                cohesion = Mathf.Clamp(profile.Cohesion, 0.7f, 1.3f);
                if (profile.IsFrenzied || profile.IsFearful)
                {
                    shouldSprint = true;
                }
            }

            BotCoverHelper.MarkUsed(fallback);
            bot.Mover.GoToPoint(fallback, true, cohesion);

            if (shouldSprint)
            {
                bot.Sprint(true);
            }
        }

        public static void SmoothLookTo(BotOwner bot, Vector3 lookTarget, float speed = DefaultLookSpeed)
        {
            if (!IsEligible(bot) || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            Transform transform = bot.Transform != null ? bot.Transform.Original : null;
            if (transform == null)
            {
                return;
            }

            Vector3 direction = lookTarget - bot.Position;
            direction.y = 0f;

            if (direction.sqrMagnitude < 0.01f)
            {
                return;
            }

            Quaternion targetRotation = Quaternion.LookRotation(direction.normalized, Vector3.up);
            float t = Time.deltaTime * Mathf.Clamp(speed, 1f, 8f);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, t);
        }

        public static void SmoothMoveTo(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 position = bot.Position;
            float radius = DefaultRadius * Mathf.Clamp(cohesionScale, 0.7f, 1.3f);

            float dx = position.x - target.x;
            float dz = position.z - target.z;
            float distSqr = (dx * dx) + (dz * dz);

            if (distSqr < radius * radius)
            {
                return;
            }

            bot.Mover.GoToPoint(target, slow, cohesionScale);
        }

        public static void SmoothMoveToSafeExit(BotOwner bot)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            BotComponentCache cache = BotCacheUtility.GetCache(bot);
            if (cache == null || cache.Pathing == null)
            {
                return;
            }

            Vector3? point = BotCoverRetreatPlanner.GetSafeExtractionPoint(bot, cache.Pathing);
            if (point.HasValue)
            {
                bot.Mover.GoToPoint(point.Value, true, 1f);
            }
        }

        public static void SmoothStrafeFrom(BotOwner bot, Vector3 threatDirection, float scale = 1f)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 right = Vector3.Cross(Vector3.up, threatDirection.normalized);
            if (right.sqrMagnitude < 0.01f)
            {
                right = Vector3.right;
            }

            Vector3 offset = right.normalized * DefaultStrafeDistance * Mathf.Clamp(scale, 0.75f, 1.25f);
            Vector3 target = bot.Position + offset;

            bot.Mover.GoToPoint(target, false, 1f);
        }

        public static void ForceFallbackMove(BotOwner bot)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 dir = bot.LookDirection;
            Vector3? point = HybridFallbackResolver.GetBestRetreatPoint(bot, dir);
            if (point.HasValue)
            {
                bot.Mover.GoToPoint(point.Value, true, 1f);
            }
        }

        #endregion

        #region Private Methods

        private static bool IsEligible(BotOwner bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.IsDead &&
                   bot.Mover != null;
        }

        #endregion
    }
}
