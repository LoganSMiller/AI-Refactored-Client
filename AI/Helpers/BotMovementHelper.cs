// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides smooth, human-like movement and aim transitions for AIRefactored bots.
    /// Includes fallback, strafing, smooth look, and smooth go-to movement.
    /// </summary>
    public static class BotMovementHelper
    {
        #region Constants

        private const float DefaultLookSpeed = 4f;
        private const float DefaultRadius = 0.8f;
        private const float DefaultStrafeDistance = 3f;
        private const float RetreatDistance = 6f;

        #endregion

        #region Public Methods

        /// <summary>
        /// Reserved for future movement resets or interruption logic.
        /// </summary>
        /// <param name="bot">The bot to reset movement for.</param>
        public static void Reset(BotOwner bot)
        {
            // Reserved for future use
        }

        /// <summary>
        /// Retreats the bot toward cover using dynamic fallback scoring. Includes sprint flag.
        /// </summary>
        /// <param name="bot">The bot retreating.</param>
        /// <param name="threatDirection">The direction of the threat.</param>
        /// <param name="distance">Fallback retreat distance.</param>
        /// <param name="sprint">Whether to sprint during fallback.</param>
        public static void RetreatToCover(BotOwner bot, Vector3 threatDirection, float distance = RetreatDistance, bool sprint = true)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 fallback = bot.Position - threatDirection.normalized * distance;

            BotComponentCache? cache = BotCacheUtility.GetCache(bot);
            if (cache != null && cache.Pathing != null)
            {
                List<Vector3> path = BotCoverRetreatPlanner.GetCoverRetreatPath(bot, threatDirection, cache.Pathing);
                for (int i = path.Count - 1; i >= 0; i--)
                {
                    Vector3 candidate = path[i];
                    if (!BotCoverHelper.WasRecentlyUsed(candidate))
                    {
                        fallback = candidate;
                        break;
                    }
                }
            }

            float cohesion = 1f;
            bool prefersSprint = sprint;

            BotPersonalityProfile? profile = BotRegistry.TryGet(bot.ProfileId);
            if (profile != null)
            {
                cohesion = Mathf.Clamp(profile.Cohesion, 0.7f, 1.3f);
                if (profile.IsFearful || profile.IsFrenzied)
                {
                    prefersSprint = true;
                }
            }

            BotCoverHelper.MarkUsed(fallback);
            bot.Mover.GoToPoint(fallback, true, cohesion);

            if (prefersSprint)
            {
                bot.Sprint(true);
            }
        }

        /// <summary>
        /// Smoothly rotates the bot’s body to face the specified world-space target.
        /// </summary>
        /// <param name="bot">The bot to rotate.</param>
        /// <param name="lookTarget">The position to look toward.</param>
        /// <param name="speed">The rotation speed factor.</param>
        public static void SmoothLookTo(BotOwner bot, Vector3 lookTarget, float speed = DefaultLookSpeed)
        {
            if (!IsEligible(bot) || bot.Transform == null)
            {
                return;
            }

            Vector3 direction = lookTarget - bot.Position;
            direction.y = 0f;

            if (direction.sqrMagnitude < 0.01f)
            {
                return;
            }

            Quaternion targetRotation = Quaternion.LookRotation(direction.normalized, Vector3.up);
            bot.Transform.rotation = Quaternion.Slerp(
                bot.Transform.rotation,
                targetRotation,
                Time.deltaTime * Mathf.Clamp(speed, 1f, 8f));
        }

        /// <summary>
        /// Smoothly navigates the bot to a world-space position using GoToPoint.
        /// </summary>
        /// <param name="bot">The bot to move.</param>
        /// <param name="target">The destination position.</param>
        /// <param name="slow">Whether to move slowly.</param>
        /// <param name="cohesionScale">Scaling factor for group cohesion distance buffer.</param>
        public static void SmoothMoveTo(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1.0f)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            float buffer = DefaultRadius * Mathf.Clamp(cohesionScale, 0.7f, 1.3f);
            Vector3 pos = bot.Position;

            if ((pos - target).sqrMagnitude < buffer * buffer)
            {
                return;
            }

            bot.Mover.GoToPoint(target, slow, cohesionScale);
        }

        /// <summary>
        /// Navigates the bot to a presumed extraction zone, respecting danger checks and safe zone flags.
        /// </summary>
        /// <param name="bot">The bot to move to extraction.</param>
        public static void SmoothMoveToSafeExit(BotOwner bot)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            BotComponentCache? cache = BotCacheUtility.GetCache(bot);
            if (cache == null || cache.Pathing == null)
            {
                return;
            }

            Vector3? exitPoint = BotCoverRetreatPlanner.GetSafeExtractionPoint(bot, cache.Pathing);
            if (exitPoint.HasValue)
            {
                bot.Mover.GoToPoint(exitPoint.Value, true, 1f);
            }
        }

        /// <summary>
        /// Strafes the bot laterally away from a known threat direction using a realistic sidestep.
        /// </summary>
        /// <param name="bot">The bot to strafe.</param>
        /// <param name="threatDirection">The direction of the incoming threat.</param>
        /// <param name="scale">Scaling factor for strafe distance.</param>
        public static void SmoothStrafeFrom(BotOwner bot, Vector3 threatDirection, float scale = 1.0f)
        {
            if (!IsEligible(bot))
            {
                return;
            }

            Vector3 safeDir = Vector3.Cross(Vector3.up, threatDirection.normalized);
            if (safeDir.sqrMagnitude < 0.01f)
            {
                safeDir = Vector3.right;
            }

            Vector3 offset = safeDir.normalized * DefaultStrafeDistance * Mathf.Clamp(scale, 0.75f, 1.25f);
            Vector3 target = bot.Position + offset;

            bot.Mover.GoToPoint(target, false, 1f);
        }

        #endregion

        #region Private Methods

        private static bool IsEligible(BotOwner? bot)
        {
            return bot != null &&
                   !bot.IsDead &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   bot.Mover != null;
        }

        #endregion
    }
}
