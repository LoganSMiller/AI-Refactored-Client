// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Central registry for gunfire and footstep timestamps and locations.
    /// Bots use this for directional awareness, hearing checks, and zone-based escalation.
    /// </summary>
    public static class BotSoundRegistry
    {
        private const float DefaultHearingRadius = 30f;

        private static readonly Dictionary<string, float> FootstepTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, float> ShotTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, Vector3> SoundZones = new Dictionary<string, Vector3>(64);

        /// <summary>
        /// Clears all sound tracking data.
        /// </summary>
        public static void Clear()
        {
            ShotTimestamps.Clear();
            FootstepTimestamps.Clear();
            SoundZones.Clear();
        }

        /// <summary>
        /// Returns true if the player fired recently within the given timeframe.
        /// </summary>
        public static bool FiredRecently(Player? player, float withinSeconds = 1.5f, float now = -1f)
        {
            return TryGetLastShot(player, out var time) && (now >= 0f ? now : Time.time) - time <= withinSeconds;
        }

        /// <summary>
        /// Records a gunshot sound and position.
        /// </summary>
        public static void NotifyShot(Player? player)
        {
            if (!IsTrackable(player))
            {
                return;
            }

            if (player != null)
            {
                string id = player.ProfileId;
                ShotTimestamps[id] = Time.time;

                if (player is EFT.Player concretePlayer)
                {
                    SoundZones[id] = concretePlayer.Transform.position;
                    TriggerSquadPing(id, concretePlayer.Transform.position, true);
                }
            }
        }

        /// <summary>
        /// Records a footstep sound and position.
        /// </summary>
        public static void NotifyStep(Player? player)
        {
            if (!IsTrackable(player))
            {
                return;
            }

            if (player != null)
            {
                string id = player.ProfileId;

                // Force cast only at usage, not at variable assignment.
                FootstepTimestamps[id] = Time.time;

                if (player is EFT.Player concretePlayer)
                {
                    SoundZones[id] = concretePlayer.Transform.position;
                    TriggerSquadPing(id, concretePlayer.Transform.position, false);
                }
            }
        }

        /// <summary>
        /// Returns true if the player stepped recently within the given timeframe.
        /// </summary>
        public static bool SteppedRecently(Player? player, float withinSeconds = 1.2f, float now = -1f)
        {
            return TryGetLastStep(player, out var time) && (now >= 0f ? now : Time.time) - time <= withinSeconds;
        }

        /// <summary>
        /// Tries to get the last recorded shot time for a player.
        /// </summary>
        public static bool TryGetLastShot(Player? player, out float time)
        {
            time = -1f;
            return player != null && !string.IsNullOrEmpty(player.ProfileId)
                && ShotTimestamps.TryGetValue(player.ProfileId, out time);
        }

        /// <summary>
        /// Tries to get the last recorded footstep time for a player.
        /// </summary>
        public static bool TryGetLastStep(Player? player, out float time)
        {
            time = -1f;
            return player != null && !string.IsNullOrEmpty(player.ProfileId)
                && FootstepTimestamps.TryGetValue(player.ProfileId, out time);
        }

        /// <summary>
        /// Tries to get the last known sound position for a player.
        /// </summary>
        public static bool TryGetSoundPosition(Player? player, out Vector3 pos)
        {
            pos = Vector3.zero;
            return player != null && !string.IsNullOrEmpty(player.ProfileId)
                && SoundZones.TryGetValue(player.ProfileId, out pos);
        }

        private static bool IsTrackable(Player? player)
        {
            return player != null && !player.IsYourPlayer && !string.IsNullOrEmpty(player.ProfileId);
        }

        private static void TriggerSquadPing(string sourceId, Vector3 location, bool isGunshot)
        {
            foreach (var cache in BotCacheUtility.AllActiveBots())
            {
                var bot = cache.Bot;
                if (bot == null || bot.IsDead || bot.ProfileId == sourceId)
                {
                    continue;
                }

                var dist = Vector3.Distance(bot.Position, location);
                if (dist > DefaultHearingRadius)
                {
                    continue;
                }

                cache.RegisterHeardSound(location);

                if (isGunshot)
                {
                    cache.GroupComms?.SaySuppression();
                }
                else
                {
                    cache.GroupComms?.SayFallback();
                }
            }
        }
    }
}
