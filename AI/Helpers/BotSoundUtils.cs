// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using EFT;

    /// <summary>
    /// Sound-based awareness utilities for bots.
    /// Filters audio events based on recency and friend-or-foe logic.
    /// </summary>
    public static class BotSoundUtils
    {
        /// <summary>
        /// Returns true if a non-teammate fired recently.
        /// </summary>
        public static bool DidFireRecently(BotOwner self, Player source, float recentThreshold = 1.5f, float now = -1f)
        {
            if (self == null || source == null)
            {
                return false;
            }

            Player selfPlayer = self.GetPlayer;
            if (selfPlayer == null || source.AIData == null)
            {
                return false;
            }

            return IsValidSoundSource(self, source) &&
                   BotSoundRegistry.FiredRecently(source, recentThreshold, now);
        }

        /// <summary>
        /// Returns true if a non-teammate stepped recently.
        /// </summary>
        public static bool DidStepRecently(BotOwner self, Player source, float recentThreshold = 1.2f, float now = -1f)
        {
            if (self == null || source == null)
            {
                return false;
            }

            Player selfPlayer = self.GetPlayer;
            if (selfPlayer == null || source.AIData == null)
            {
                return false;
            }

            return IsValidSoundSource(self, source) &&
                   BotSoundRegistry.SteppedRecently(source, recentThreshold, now);
        }

        /// <summary>
        /// Filters out invalid sound sources: null, self, same group, or invalid profile.
        /// </summary>
        private static bool IsValidSoundSource(BotOwner self, Player source)
        {
            if (self == null || self.GetPlayer == null || source == null || source.AIData == null)
            {
                return false;
            }

            if (ReferenceEquals(source, self.GetPlayer))
            {
                return false;
            }

            if (self.Profile == null || self.Profile.Info == null ||
                source.Profile == null || source.Profile.Info == null)
            {
                return false;
            }

            string selfGroup = self.Profile.Info.GroupId;
            string sourceGroup = source.Profile.Info.GroupId;

            if (string.IsNullOrEmpty(selfGroup) || string.IsNullOrEmpty(sourceGroup))
            {
                return true;
            }

            return !selfGroup.Equals(sourceGroup);
        }
    }
}
