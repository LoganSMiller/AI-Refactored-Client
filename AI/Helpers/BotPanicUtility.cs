// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Utility class for resolving and triggering panic behavior in bots and squads.
    /// Used by flash, suppression, auditory, and damage systems to propagate fear.
    /// </summary>
    public static class BotPanicUtility
    {
        /// <summary>
        /// Triggers panic on a single bot if valid and eligible.
        /// </summary>
        /// <param name="cache">The bot component cache.</param>
        public static void Trigger(BotComponentCache? cache)
        {
            if (cache?.Bot == null)
            {
                return;
            }

            BotOwner bot = cache.Bot;
            if (!bot.IsDead && bot.GetPlayer?.IsAI == true)
            {
                cache.PanicHandler?.TriggerPanic();
            }
        }

        /// <summary>
        /// Triggers panic across an entire squad or cache group.
        /// </summary>
        /// <param name="group">The list of bot component caches representing the squad.</param>
        public static void TriggerGroup(List<BotComponentCache>? group)
        {
            if (group == null || group.Count == 0)
            {
                return;
            }

            for (int i = 0; i < group.Count; i++)
            {
                BotComponentCache cache = group[i];
                if (cache?.Bot == null)
                {
                    continue;
                }

                BotOwner bot = cache.Bot;
                if (!bot.IsDead && bot.GetPlayer?.IsAI == true)
                {
                    cache.PanicHandler?.TriggerPanic();
                }
            }
        }

        /// <summary>
        /// Legacy alias for TryGetPanicComponent.
        /// Kept for compatibility with older subsystems.
        /// </summary>
        /// <param name="cache">The bot component cache.</param>
        /// <param name="panic">The retrieved panic handler, if available.</param>
        /// <returns>True if a panic handler was found; otherwise, false.</returns>
        public static bool TryGet(BotComponentCache? cache, out BotPanicHandler? panic)
        {
            return TryGetPanicComponent(cache, out panic);
        }

        /// <summary>
        /// Attempts to retrieve the panic handler from a bot’s component cache.
        /// </summary>
        /// <param name="cache">The bot component cache.</param>
        /// <param name="panic">The retrieved panic handler, if available.</param>
        /// <returns>True if a panic handler was found; otherwise, false.</returns>
        public static bool TryGetPanicComponent(BotComponentCache? cache, out BotPanicHandler? panic)
        {
            panic = cache?.PanicHandler;
            return panic != null;
        }

        /// <summary>
        /// Triggers panic in all bots within a radius of the given origin.
        /// Used for fear propagation after explosions, flashes, or loud impacts.
        /// </summary>
        /// <param name="origin">Center point for panic propagation.</param>
        /// <param name="radius">Radius in meters to check for nearby bots.</param>
        public static void TriggerNearby(Vector3 origin, float radius)
        {
            if (radius <= 0f)
            {
                return;
            }

            float radiusSq = radius * radius;

            foreach (BotComponentCache cache in BotCacheUtility.AllActiveBots())
            {
                if (cache?.Bot == null)
                {
                    continue;
                }

                BotOwner bot = cache.Bot;
                if (!bot.IsDead && bot.GetPlayer?.IsAI == true)
                {
                    float distSq = (bot.Position - origin).sqrMagnitude;
                    if (distSq <= radiusSq)
                    {
                        cache.PanicHandler?.TriggerPanic();
                    }
                }
            }
        }
    }
}
