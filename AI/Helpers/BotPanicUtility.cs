// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Utility class for resolving and triggering panic behavior in bots and squads.
    /// Used by flash, suppression, auditory, and damage systems to propagate fear.
    /// </summary>
    public static class BotPanicUtility
    {
        /// <summary>
        /// Triggers panic on a single bot if valid and eligible.
        /// </summary>
        public static void Trigger(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.Bot.IsDead)
            {
                return;
            }

            BotPanicHandler panic = cache.PanicHandler;
            if (panic != null)
            {
                panic.TriggerPanic();
            }
        }

        /// <summary>
        /// Triggers panic across an entire squad or cache group.
        /// </summary>
        public static void TriggerGroup(List<BotComponentCache> group)
        {
            if (group == null)
            {
                return;
            }

            for (int i = 0; i < group.Count; i++)
            {
                BotComponentCache cache = group[i];
                if (cache == null || cache.Bot == null || cache.Bot.IsDead)
                {
                    continue;
                }

                BotPanicHandler panic = cache.PanicHandler;
                if (panic != null)
                {
                    panic.TriggerPanic();
                }
            }
        }

        /// <summary>
        /// Legacy alias for TryGetPanicComponent.
        /// </summary>
        public static bool TryGet(BotComponentCache cache, out BotPanicHandler panic)
        {
            return TryGetPanicComponent(cache, out panic);
        }

        /// <summary>
        /// Attempts to retrieve the panic handler from a bot’s component cache.
        /// </summary>
        public static bool TryGetPanicComponent(BotComponentCache cache, out BotPanicHandler panic)
        {
            if (cache != null && cache.PanicHandler != null)
            {
                panic = cache.PanicHandler;
                return true;
            }

            panic = null;
            return false;
        }

        /// <summary>
        /// Triggers panic in all bots within a radius of the given origin.
        /// </summary>
        public static void TriggerNearby(Vector3 origin, float radius)
        {
            if (radius <= 0f)
            {
                return;
            }

            float radiusSq = radius * radius;

            foreach (BotComponentCache cache in BotCacheUtility.AllActiveBots())
            {
                if (cache == null || cache.Bot == null || cache.Bot.IsDead)
                {
                    continue;
                }

                Vector3 pos = cache.Bot.Position;
                float dx = pos.x - origin.x;
                float dy = pos.y - origin.y;
                float dz = pos.z - origin.z;
                float distSq = (dx * dx) + (dy * dy) + (dz * dz);

                if (distSq <= radiusSq)
                {
                    BotPanicHandler panic = cache.PanicHandler;
                    if (panic != null)
                    {
                        panic.TriggerPanic();
                    }
                }
            }
        }
    }
}
