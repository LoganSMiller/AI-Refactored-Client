// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Centralized runtime registry for bot caches, profiles, and group links.
    /// Provides fast lookup and utility access across AIRefactored systems.
    /// </summary>
    public static class BotCacheUtility
    {
        #region Fields

        private static readonly Dictionary<BotOwner, BotComponentCache> CacheRegistry = new Dictionary<BotOwner, BotComponentCache>(64);
        private static readonly Dictionary<string, BotComponentCache> ProfileIdLookup = new Dictionary<string, BotComponentCache>(64);

        #endregion

        #region Public API

        public static IEnumerable<BotComponentCache> AllActiveBots()
        {
            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                if (kvp.Key != null && !kvp.Key.IsDead)
                {
                    yield return kvp.Value;
                }
            }
        }

        public static void DumpCache()
        {
            Plugin.LoggerInstance.LogInfo($"[BotCacheUtility] Dumping {CacheRegistry.Count} bot caches:");

            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                BotOwner bot = kvp.Key;
                BotComponentCache cache = kvp.Value;

                Plugin.LoggerInstance.LogInfo($" → {GetBotName(cache)}, Pos={bot.Position}, Alive={!bot.IsDead}");
            }
        }

        public static string GetBotName(BotComponentCache? cache)
        {
            if (cache?.Bot?.Profile?.Info == null)
            {
                return "Unknown";
            }

            return $"{cache.Bot.Profile.Info.Nickname} ({cache.Bot.Profile.Side})";
        }

        public static BotComponentCache? GetCache(BotOwner bot)
        {
            return CacheRegistry.TryGetValue(bot, out BotComponentCache? cache) ? cache : null;
        }

        public static BotComponentCache? GetCache(Player player)
        {
            return player?.AIData?.BotOwner is BotOwner bot ? GetCache(bot) : null;
        }

        public static BotComponentCache? GetCache(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            return ProfileIdLookup.TryGetValue(profileId, out BotComponentCache? cache) ? cache : null;
        }

        public static BotComponentCache? GetClosestBot(Vector3 origin, float maxDistance = 40f)
        {
            BotComponentCache? closest = null;
            float minDistSq = maxDistance * maxDistance;

            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                BotOwner bot = kvp.Key;
                if (bot == null || bot.IsDead)
                {
                    continue;
                }

                Vector3 botPos = bot.Position;
                float dx = botPos.x - origin.x;
                float dy = botPos.y - origin.y;
                float dz = botPos.z - origin.z;
                float distSq = (dx * dx) + (dy * dy) + (dz * dz);

                if (distSq < minDistSq)
                {
                    minDistSq = distSq;
                    closest = kvp.Value;
                }
            }

            return closest;
        }

        public static Transform? GetFootTransform(BotComponentCache cache)
        {
            if (cache?.Bot?.MainParts == null)
            {
                return null;
            }

            EnemyPart part;
            if (cache.Bot.MainParts.TryGetValue(BodyPartType.leftLeg, out part) && part._transform != null)
            {
                return part._transform.Original;
            }

            return null;
        }

        public static BotGroupSyncCoordinator? GetGroupSync(BotComponentCache cache)
        {
            return cache.GroupSync ?? cache.GroupBehavior?.GroupSync;
        }

        public static Transform? GetLookTransform(BotComponentCache cache)
        {
            return cache?.Bot?.Fireport?.Original;
        }

        public static BotMissionController? GetMissionController(BotComponentCache cache)
        {
            return cache.AIRefactoredBotOwner?.MissionController;
        }

        public static BotPersonalityProfile? GetPersonality(BotComponentCache cache)
        {
            return cache?.Bot?.ProfileId != null ? BotRegistry.TryGet(cache.Bot.ProfileId) : null;
        }

        public static string GetStance(BotComponentCache cache)
        {
            BotPoseController? pose = cache?.PoseController;
            if (pose == null)
            {
                return "Unknown";
            }

            float level = pose.GetPoseLevel();
            if (level < 25f)
            {
                return "Prone";
            }

            if (level < 75f)
            {
                return "Crouching";
            }

            return "Standing";
        }

        public static Transform? GetWeaponTransform(BotComponentCache cache)
        {
            return cache?.Bot?.Fireport?.Original;
        }

        public static Transform? Head(BotComponentCache cache)
        {
            if (cache?.Bot?.MainParts == null)
            {
                return null;
            }

            EnemyPart part;
            if (cache.Bot.MainParts.TryGetValue(BodyPartType.head, out part) && part._transform != null)
            {
                return part._transform.Original;
            }

            return null;
        }

        public static bool IsFollower(BotComponentCache cache)
        {
            return !IsLeader(cache);
        }

        public static bool IsLeader(BotComponentCache cache)
        {
            BotsGroup? group = cache.Bot?.BotsGroup;
            if (group == null || group.MembersCount == 0)
            {
                return false;
            }

            return group.Member(0)?.ProfileId == cache.Bot?.ProfileId;
        }

        public static void Register(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                return;
            }

            CacheRegistry[bot] = cache;

            if (!string.IsNullOrEmpty(bot.ProfileId))
            {
                ProfileIdLookup[bot.ProfileId] = cache;
            }

            BotTeamTracker.RegisterFromBot(bot);
            GroupMissionCoordinator.RegisterFromBot(bot);
        }

        public static bool TryGetPanicComponent(BotComponentCache cache, out BotPanicHandler? panic)
        {
            panic = cache?.PanicHandler;
            return panic != null;
        }

        public static void Unregister(BotOwner bot)
        {
            if (bot == null)
            {
                return;
            }

            CacheRegistry.Remove(bot);

            if (!string.IsNullOrEmpty(bot.ProfileId))
            {
                ProfileIdLookup.Remove(bot.ProfileId);
            }

            BotTeamTracker.Unregister(bot);
        }

        #endregion
    }
}
