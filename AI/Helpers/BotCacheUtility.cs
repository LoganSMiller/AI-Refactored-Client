// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Centralized runtime registry for bot caches, profiles, and group links.
    /// Provides fast lookup and utility access across AIRefactored systems.
    /// </summary>
    public static class BotCacheUtility
    {
        #region Fields

        private static readonly Dictionary<BotOwner, BotComponentCache> CacheRegistry = new Dictionary<BotOwner, BotComponentCache>(64);
        private static readonly Dictionary<string, BotComponentCache> ProfileIdLookup = new Dictionary<string, BotComponentCache>(64);

        #endregion

        #region Public API

        /// <summary>
        /// Gets all active bot caches (non-dead bots).
        /// </summary>
        public static IEnumerable<BotComponentCache> AllActiveBots()
        {
            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                if (kvp.Key != null && !kvp.Key.IsDead)
                {
                    yield return kvp.Value;
                }
            }
        }

        /// <summary>
        /// Dumps bot cache information for debugging or logging.
        /// </summary>
        public static void DumpCache()
        {
            Plugin.LoggerInstance.LogInfo("[BotCacheUtility] Dumping bot caches:");
            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                BotOwner bot = kvp.Key;
                BotComponentCache cache = kvp.Value;
                if (bot != null)
                {
                    string name = GetBotName(cache);
                    Plugin.LoggerInstance.LogInfo(" → " + name + ", Pos=" + bot.Position + ", Alive=" + (!bot.IsDead));
                }
            }
        }

        /// <summary>
        /// Attempts to retrieve the BotComponentCache associated with a specific bot.
        /// </summary>
        public static bool TryGet(BotOwner bot, out BotComponentCache? cache)
        {
            if (bot == null)
            {
                cache = null;
                return false;
            }

            return CacheRegistry.TryGetValue(bot, out cache);
        }

        /// <summary>
        /// Retrieves the BotComponentCache associated with the provided bot.
        /// </summary>
        public static BotComponentCache? GetCache(BotOwner bot)
        {
            if (bot == null)
            {
                return null;
            }

            return CacheRegistry.TryGetValue(bot, out BotComponentCache? found) ? found : null;
        }

        /// <summary>
        /// Retrieves the BotComponentCache associated with the provided player.
        /// </summary>
        public static BotComponentCache? GetCache(Player player)
        {
            if (player?.AIData?.BotOwner == null)
            {
                return null;
            }

            return GetCache(player.AIData.BotOwner);
        }

        /// <summary>
        /// Retrieves the BotComponentCache associated with the provided profile ID.
        /// </summary>
        public static BotComponentCache? GetCache(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            return ProfileIdLookup.TryGetValue(profileId, out BotComponentCache? cache) ? cache : null;
        }

        /// <summary>
        /// Gets the bot's name from the cache.
        /// </summary>
        public static string GetBotName(BotComponentCache? cache)
        {
            if (cache?.Bot?.Profile?.Info == null)
            {
                return "Unknown";
            }

            return cache.Bot.Profile.Info.Nickname + " (" + cache.Bot.Profile.Side + ")";
        }

        /// <summary>
        /// Retrieves the BotGroupSyncCoordinator for the given bot cache.
        /// </summary>
        public static BotGroupSyncCoordinator? GetGroupSync(BotComponentCache? cache)
        {
            return cache?.GroupSync ?? cache?.GroupBehavior?.GroupSync;
        }

        /// <summary>
        /// Gets the closest bot to a given position within a specified radius.
        /// </summary>
        public static BotComponentCache? GetClosestBot(Vector3 origin, float maxDistance)
        {
            BotComponentCache? closest = null;
            float minDistSq = maxDistance * maxDistance;

            foreach (KeyValuePair<BotOwner, BotComponentCache> kvp in CacheRegistry)
            {
                BotOwner bot = kvp.Key;
                if (bot == null || bot.IsDead)
                {
                    continue;
                }

                Vector3 pos = bot.Position;
                float dx = pos.x - origin.x;
                float dy = pos.y - origin.y;
                float dz = pos.z - origin.z;
                float distSq = (dx * dx) + (dy * dy) + (dz * dz);

                if (distSq < minDistSq)
                {
                    minDistSq = distSq;
                    closest = kvp.Value;
                }
            }

            return closest;
        }

        /// <summary>
        /// Retrieves the head transform of the bot from its cache.
        /// </summary>
        public static Transform? Head(BotComponentCache? cache)
        {
            if (cache?.Bot?.MainParts == null)
            {
                return null;
            }

            return cache.Bot.MainParts.TryGetValue(BodyPartType.head, out EnemyPart part)
                ? part._transform?.Original
                : null;
        }

        /// <summary>
        /// Registers a bot and its cache into the utility.
        /// </summary>
        public static void Register(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null || bot.IsDead)
            {
                return;
            }

            CacheRegistry[bot] = cache;

            if (!string.IsNullOrEmpty(bot.ProfileId))
            {
                ProfileIdLookup[bot.ProfileId] = cache;
            }

            BotTeamTracker.RegisterFromBot(bot);
            GroupMissionCoordinator.RegisterFromBot(bot);
        }

        /// <summary>
        /// Unregisters a bot and its cache from the utility.
        /// </summary>
        public static void Unregister(BotOwner bot)
        {
            if (bot == null)
            {
                return;
            }

            CacheRegistry.Remove(bot);

            if (!string.IsNullOrEmpty(bot.ProfileId))
            {
                ProfileIdLookup.Remove(bot.ProfileId);
            }

            BotTeamTracker.Unregister(bot);
        }

        #endregion
    }
}
