// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Memory
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tactical extensions for BotOwner memory and behavior.
    /// Provides smart fallback, perception updates, state toggles, and auditory reactions.
    /// </summary>
    public static class BotMemoryExtensions
    {
        private const float MinMoveThreshold = 0.5f;
        private const float FlankDotThreshold = 0.25f;
        private const float EnemyTooCloseSqr = 1.0f;
        private const float InvestigateRangeSqr = 625f;

        public static void ClearLastHeardSound(this BotOwner bot)
        {
            if (!IsValid(bot))
            {
                return;
            }

            BotMemoryStore.ClearHeardSound(bot.ProfileId);
        }

        public static void FallbackTo(this BotOwner bot, Vector3 fallbackPosition)
        {
            if (!IsValid(bot) || fallbackPosition.sqrMagnitude < MinMoveThreshold)
            {
                return;
            }

            BotComponentCache? cache = BotCacheUtility.GetCache(bot);
            if (cache?.PanicHandler?.IsPanicking == true)
            {
                return;
            }

            BotMovementHelper.SmoothMoveTo(bot, fallbackPosition);
        }

        public static void ForceMoveTo(this BotOwner bot, Vector3 position)
        {
            if (!IsValid(bot) || position.sqrMagnitude < MinMoveThreshold)
            {
                return;
            }

            BotMovementHelper.SmoothMoveTo(bot, position);
        }

        public static void ReevaluateCurrentCover(this BotOwner bot)
        {
            if (!IsValid(bot) || bot.Memory == null || bot.Memory.GoalEnemy == null || !bot.Memory.GoalEnemy.IsVisible)
            {
                return;
            }

            Vector3 toEnemy = bot.Memory.GoalEnemy.CurrPosition - bot.Position;
            if (toEnemy.sqrMagnitude < EnemyTooCloseSqr)
            {
                return;
            }

            float angle = Vector3.Angle(bot.LookDirection, toEnemy.normalized);
            if (angle < 20f && toEnemy.sqrMagnitude < InvestigateRangeSqr)
            {
                Vector3 fallback = bot.Position - toEnemy.normalized * 5f;
                Vector3 destination = fallback;

                BotComponentCache? cache = BotCacheUtility.GetCache(bot);
                if (cache?.Pathing != null)
                {
                    List<Vector3> path = BotCoverRetreatPlanner.GetCoverRetreatPath(bot, toEnemy, cache.Pathing);
                    if (path != null && path.Count != 0)
                    {
                        destination = path[path.Count - 1];
                    }
                }

                destination = new Vector3(destination.x, bot.Position.y, destination.z);
                BotMovementHelper.SmoothMoveTo(bot, destination);

                if (!FikaHeadlessDetector.IsHeadless)
                {
                    bot.BotTalk?.TrySay(EPhraseTrigger.OnLostVisual);
                }
            }
        }

        public static void SetCautiousSearchMode(this BotOwner bot)
        {
            if (IsValid(bot) && bot.Memory != null)
            {
                bot.Memory.AttackImmediately = false;
                bot.Memory.IsPeace = false;
            }
        }

        public static void SetCombatAggressionMode(this BotOwner bot)
        {
            if (IsValid(bot) && bot.Memory != null)
            {
                bot.Memory.AttackImmediately = true;
                bot.Memory.IsPeace = false;
            }
        }

        public static void SetPeaceMode(this BotOwner bot)
        {
            if (IsValid(bot) && bot.Memory != null)
            {
                bot.Memory.AttackImmediately = false;
                bot.Memory.IsPeace = true;
                bot.Memory.CheckIsPeace();
            }
        }

        public static void SetLastHeardSound(this BotOwner bot, Player source)
        {
            if (!EFTPlayerUtil.IsValid(source) || source.ProfileId == bot.ProfileId)
            {
                return;
            }

            Vector3 sourcePos = EFTPlayerUtil.GetPosition(source);
            if (sourcePos.sqrMagnitude < 0.01f)
            {
                return;
            }

            IPlayer? resolved = EFTPlayerUtil.AsSafeIPlayer(source);
            if (resolved == null)
            {
                return;
            }

            bot.BotsGroup?.LastSoundsController?.AddNeutralSound(resolved, sourcePos);
            BotMemoryStore.AddHeardSound(bot.ProfileId, sourcePos, Time.time);

            Vector3 cautiousAdvance = sourcePos + (bot.Position - sourcePos).normalized * 3f;
            BotMovementHelper.SmoothMoveTo(bot, cautiousAdvance);

            if (!FikaHeadlessDetector.IsHeadless)
            {
                bot.BotTalk?.TrySay(EPhraseTrigger.OnEnemyShot);
            }
        }

        public static Vector3? TryGetFlankDirection(this BotOwner bot)
        {
            if (!IsValid(bot) || bot.Memory?.GoalEnemy == null)
            {
                return null;
            }

            Vector3 toEnemy = bot.Memory.GoalEnemy.CurrPosition - bot.Position;
            if (toEnemy.sqrMagnitude < MinMoveThreshold)
            {
                return null;
            }

            Vector3 enemyDir = toEnemy.normalized;
            Vector3 botDir = bot.LookDirection.normalized;

            float dot = Vector3.Dot(botDir, enemyDir);
            if (dot < FlankDotThreshold)
            {
                return null;
            }

            return Vector3.Cross(enemyDir, Vector3.up);
        }

        private static bool IsValid(BotOwner? bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.GetPlayer.IsYourPlayer &&
                   !bot.IsDead;
        }
    }
}
