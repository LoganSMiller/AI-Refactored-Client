// <auto-generated>
//   AI-Refactored: BotMemoryExtensions.cs (Bulletproof Overlay-Only Navigation Edition – June 2025)
//   All movement is NavMesh-sampled, intent/cooldown-driven, event-only, never tick/spammed.
//   Every method validates targets, never teleports, and routes all movement through BotMovementHelper with dedupe/cooldown.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Memory
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Provides overlay/event-driven navigation and tactical memory helpers for bots.
    /// Bulletproof: All moves are NavMesh-validated, pooled, intent-queued, event-only, and error-shielded.
    /// </summary>
    public static class BotMemoryExtensions
    {
        private const float MinMoveThreshold = 0.5f;
        private const float FlankDotThreshold = 0.25f;
        private const float EnemyTooCloseSqr = 1.0f;
        private const float InvestigateRangeSqr = 625f;
        private const float NavSampleRadius = 1.5f;

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #region Movement Extensions

        public static void ClearLastHeardSound(this BotOwner bot)
        {
            try
            {
                if (bot != null)
                    BotMemoryStore.ClearHeardSound(bot.ProfileId);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ClearLastHeardSound failed: {ex}");
            }
        }

        public static void FallbackTo(this BotOwner bot, Vector3 fallbackPosition)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || fallbackPosition.sqrMagnitude < MinMoveThreshold)
                    return;

                if (!TrySampleNavMesh(fallbackPosition, out Vector3 safe))
                    return;

                var cache = BotCacheUtility.GetCache(bot);
                Vector3 drifted = BotMovementHelper.ApplyMicroDrift(safe, bot.ProfileId, Time.frameCount, cache?.PersonalityProfile);

                if (BotMovementHelper.ShouldMove(bot, drifted))
                    BotMovementHelper.SmoothMoveToSafe(bot, drifted, slow: true, cohesion: 1f);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] FallbackTo failed: {ex}");
            }
        }

        public static void ForceMoveTo(this BotOwner bot, Vector3 position)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || position.sqrMagnitude < MinMoveThreshold)
                    return;

                if (!TrySampleNavMesh(position, out Vector3 safe))
                    return;

                var cache = BotCacheUtility.GetCache(bot);
                Vector3 drifted = BotMovementHelper.ApplyMicroDrift(safe, bot.ProfileId, Time.frameCount, cache?.PersonalityProfile);

                if (BotMovementHelper.ShouldMove(bot, drifted))
                    BotMovementHelper.SmoothMoveToSafe(bot, drifted, slow: false, cohesion: 1f);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ForceMoveTo failed: {ex}");
            }
        }

        public static void ReevaluateCurrentCover(this BotOwner bot)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return;

                var goal = bot.Memory?.GoalEnemy;
                if (goal == null || !goal.IsVisible)
                    return;

                Vector3 toEnemy = goal.CurrPosition - bot.Position;
                if (toEnemy.sqrMagnitude < EnemyTooCloseSqr)
                    return;

                float angle = Vector3.Angle(bot.LookDirection, toEnemy);
                if (angle >= 20f || toEnemy.sqrMagnitude >= InvestigateRangeSqr)
                    return;

                var cache = BotCacheUtility.GetCache(bot);
                Vector3 retreat = bot.Position - (toEnemy.normalized * 5f);
                if (!TrySampleNavMesh(retreat, out Vector3 safeTarget))
                    return;

                Vector3 drifted = BotMovementHelper.ApplyMicroDrift(safeTarget, bot.ProfileId, Time.frameCount, cache?.PersonalityProfile);

                if (BotMovementHelper.ShouldMove(bot, drifted))
                    BotMovementHelper.SmoothMoveToSafe(bot, drifted, slow: true, cohesion: 1f);

                if (!FikaHeadlessDetector.IsHeadless && bot.BotTalk != null)
                    bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ReevaluateCurrentCover failed: {ex}");
            }
        }

        #endregion

        #region Mode Transitions

        public static void SetCautiousSearchMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = false;
                    bot.Memory.IsPeace = false;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetCautiousSearchMode failed: {ex}");
            }
        }

        public static void SetCombatAggressionMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = true;
                    bot.Memory.IsPeace = false;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetCombatAggressionMode failed: {ex}");
            }
        }

        public static void SetPeaceMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = false;
                    bot.Memory.IsPeace = true;
                    bot.Memory.CheckIsPeace();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetPeaceMode failed: {ex}");
            }
        }

        #endregion

        #region Audio Detection

        public static void SetLastHeardSound(this BotOwner bot, Player source)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || !EFTPlayerUtil.IsValid(source))
                    return;
                if (bot.ProfileId == source.ProfileId)
                    return;

                Vector3 pos = EFTPlayerUtil.GetPosition(source);
                if (pos.sqrMagnitude < 0.01f)
                    return;

                BotMemoryStore.AddHeardSound(bot.ProfileId, pos, Time.time);

                Vector3 cautious = pos + (bot.Position - pos).normalized * 3.3f;
                if (!TrySampleNavMesh(cautious, out Vector3 safe))
                    return;

                var cache = BotCacheUtility.GetCache(bot);
                Vector3 drifted = BotMovementHelper.ApplyMicroDrift(safe, bot.ProfileId, Time.frameCount, cache?.PersonalityProfile);

                if (BotMovementHelper.ShouldMove(bot, drifted))
                    BotMovementHelper.SmoothMoveToSafe(bot, drifted, slow: true, cohesion: 1f);

                if (!FikaHeadlessDetector.IsHeadless && bot.BotTalk != null)
                    bot.BotTalk.TrySay(EPhraseTrigger.OnEnemyShot);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetLastHeardSound failed: {ex}");
            }
        }

        #endregion

        #region Flanking

        public static Vector3 TryGetFlankDirection(this BotOwner bot, out bool success)
        {
            success = false;
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return Vector3.zero;

                var goal = bot.Memory?.GoalEnemy;
                if (goal == null)
                    return Vector3.zero;

                Vector3 toEnemy = goal.CurrPosition - bot.Position;
                if (toEnemy.sqrMagnitude < MinMoveThreshold)
                    return Vector3.zero;

                Vector3 enemyDir = toEnemy.normalized;
                Vector3 botDir = bot.LookDirection.normalized;

                if (Vector3.Dot(botDir, enemyDir) < FlankDotThreshold)
                    return Vector3.zero;

                success = true;
                return Vector3.Cross(enemyDir, Vector3.up).normalized * 1.2f;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] TryGetFlankDirection failed: {ex}");
                success = false;
                return Vector3.zero;
            }
        }

        #endregion

        #region Utility

        private static bool TrySampleNavMesh(Vector3 pos, out Vector3 result)
        {
            result = pos;
            if (NavMesh.SamplePosition(pos, out NavMeshHit hit, NavSampleRadius, NavMesh.AllAreas))
            {
                result = hit.position;
                return true;
            }
            return false;
        }

        #endregion
    }
}
