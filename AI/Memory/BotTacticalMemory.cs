// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Memory
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using UnityEngine;

    /// <summary>
    /// Tracks enemy sightings and cleared tactical zones.
    /// Used to prevent over-investigation, support fallback, and enable squad memory sync.
    /// </summary>
    public sealed class BotTacticalMemory
    {
        #region Constants

        private const float ClearedMemoryDuration = 10f;
        private const float GridSnapSize = 0.5f;
        private const float MaxMemoryTime = 14f;
        private const float PositionToleranceSqr = 0.25f;

        #endregion

        #region Fields

        private readonly Dictionary<Vector3, float> _clearedSpots = new Dictionary<Vector3, float>(32, new Vector3EqualityComparer());
        private readonly Dictionary<string, SeenEnemyRecord> _enemyMemoryById = new Dictionary<string, SeenEnemyRecord>(4, StringComparer.OrdinalIgnoreCase);
        private readonly List<SeenEnemyRecord> _enemyMemoryList = new List<SeenEnemyRecord>(4);

        private BotComponentCache? _cache;
        private bool _extractionStarted;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache cache)
        {
            this._cache = cache;
        }

        #endregion

        #region Memory Management

        public void CullExpired()
        {
            float now = Time.time;

            for (int i = this._enemyMemoryList.Count - 1; i >= 0; i--)
            {
                if (now - this._enemyMemoryList[i].TimeSeen > MaxMemoryTime)
                {
                    this._enemyMemoryList.RemoveAt(i);
                }
            }

            List<string> toRemove = new List<string>();
            foreach (KeyValuePair<string, SeenEnemyRecord> kvp in this._enemyMemoryById)
            {
                if (now - kvp.Value.TimeSeen > MaxMemoryTime)
                {
                    toRemove.Add(kvp.Key);
                }
            }

            for (int i = 0; i < toRemove.Count; i++)
            {
                this._enemyMemoryById.Remove(toRemove[i]);
            }
        }

        public void ResetMemory()
        {
            this._enemyMemoryList.Clear();
            this._enemyMemoryById.Clear();
            this._clearedSpots.Clear();
            this._extractionStarted = false;
        }

        public void ClearAll()
        {
            this._enemyMemoryList.Clear();
            this._enemyMemoryById.Clear();
            this._clearedSpots.Clear();
            this._extractionStarted = false;
        }

        #endregion

        #region Enemy Memory

        public void RecordEnemyPosition(Vector3 position, string? tag, string? enemyId)
        {
            if (this._cache == null || this._cache.IsBlinded)
            {
                return;
            }

            BotPanicHandler? panicHandler = this._cache.PanicHandler;
            if (panicHandler != null && panicHandler.IsPanicking)
            {
                return;
            }

            float now = Time.time;
            Vector3 gridPos = SnapToGrid(position);

            string finalTag = "Generic";
            if (tag != null)
            {
                string trimmedTag = tag.Trim();
                if (trimmedTag.Length > 0)
                {
                    finalTag = trimmedTag;
                }
            }

            if (enemyId != null)
            {
                string trimmedId = enemyId.Trim();
                if (trimmedId.Length > 0)
                {
                    SeenEnemyRecord record = new SeenEnemyRecord(gridPos, now, finalTag);
                    this._enemyMemoryById[trimmedId] = record;
                }
            }

            for (int i = 0; i < this._enemyMemoryList.Count; i++)
            {
                if ((gridPos - this._enemyMemoryList[i].Position).sqrMagnitude < PositionToleranceSqr)
                {
                    this._enemyMemoryList[i] = new SeenEnemyRecord(gridPos, now, finalTag);
                    return;
                }
            }

            this._enemyMemoryList.Add(new SeenEnemyRecord(gridPos, now, finalTag));
        }

        public Vector3? GetRecentEnemyMemory()
        {
            float now = Time.time;
            SeenEnemyRecord? freshest = null;

            for (int i = 0; i < this._enemyMemoryList.Count; i++)
            {
                SeenEnemyRecord record = this._enemyMemoryList[i];
                if (now - record.TimeSeen <= MaxMemoryTime)
                {
                    if (!freshest.HasValue || record.TimeSeen > freshest.Value.TimeSeen)
                    {
                        freshest = record;
                    }
                }
            }

            return freshest?.Position;
        }

        public List<SeenEnemyRecord> GetAllMemory()
        {
            return this._enemyMemoryList;
        }

        public void SyncMemory(Vector3 position, string tag = "AllyEcho")
        {
            this.RecordEnemyPosition(position, tag, null);
        }

        public void ShareMemoryWith(List<BotComponentCache> teammates)
        {
            if (teammates == null || teammates.Count == 0)
            {
                return;
            }

            string selfId = this._cache?.Bot?.Profile?.Id ?? "unknown";

            for (int i = 0; i < this._enemyMemoryList.Count; i++)
            {
                SeenEnemyRecord record = this._enemyMemoryList[i];
                for (int j = 0; j < teammates.Count; j++)
                {
                    BotComponentCache mate = teammates[j];
                    if (mate == null || mate.Bot == null || mate.Bot == this._cache?.Bot)
                    {
                        continue;
                    }

                    if (mate.TacticalMemory != null)
                    {
                        mate.TacticalMemory.SyncMemory(record.Position, "Echo:" + selfId);
                    }
                }
            }
        }

        #endregion

        #region Zone Memory

        public void MarkCleared(Vector3 position)
        {
            this._clearedSpots[SnapToGrid(position)] = Time.time;
        }

        public bool WasRecentlyCleared(Vector3 position)
        {
            Vector3 gridPos = SnapToGrid(position);
            float lastTime;
            return this._clearedSpots.TryGetValue(gridPos, out lastTime)
                && Time.time - lastTime < ClearedMemoryDuration;
        }

        public bool IsZoneUnsafe(Vector3 position)
        {
            if (this._cache == null || this._cache.Bot == null)
            {
                return false;
            }

            float now = Time.time;
            Vector3 gridPos = SnapToGrid(position);

            for (int i = 0; i < this._enemyMemoryList.Count; i++)
            {
                if ((gridPos - this._enemyMemoryList[i].Position).sqrMagnitude < PositionToleranceSqr)
                {
                    return true;
                }
            }

            foreach (KeyValuePair<Vector3, float> kvp in this._clearedSpots)
            {
                if ((kvp.Key - gridPos).sqrMagnitude < PositionToleranceSqr && now - kvp.Value < ClearedMemoryDuration)
                {
                    return true;
                }
            }

            string mapId = GameWorldHandler.GetCurrentMapName();
            return BotMemoryStore.IsPositionInDangerZone(mapId, position);
        }

        public void MarkExtractionStarted()
        {
            this._extractionStarted = true;
        }

        public bool IsExtracting()
        {
            return this._extractionStarted;
        }

        #endregion

        #region Utility

        private static Vector3 SnapToGrid(Vector3 pos)
        {
            return new Vector3(
                Mathf.Round(pos.x / GridSnapSize) * GridSnapSize,
                Mathf.Round(pos.y / GridSnapSize) * GridSnapSize,
                Mathf.Round(pos.z / GridSnapSize) * GridSnapSize);
        }

        #endregion

        #region Structs

        public struct SeenEnemyRecord
        {
            public Vector3 Position;
            public float TimeSeen;
            public string Tag;

            public SeenEnemyRecord(Vector3 position, float time, string tag)
            {
                this.Position = position;
                this.TimeSeen = time;
                this.Tag = tag;
            }
        }

        private sealed class Vector3EqualityComparer : IEqualityComparer<Vector3>
        {
            public bool Equals(Vector3 a, Vector3 b)
            {
                return (a - b).sqrMagnitude < PositionToleranceSqr;
            }

            public int GetHashCode(Vector3 v)
            {
                unchecked
                {
                    int hash = 17;
                    hash = (hash * 23) + Mathf.RoundToInt(v.x * 10f);
                    hash = (hash * 23) + Mathf.RoundToInt(v.y * 10f);
                    hash = (hash * 23) + Mathf.RoundToInt(v.z * 10f);
                    return hash;
                }
            }
        }

        #endregion
    }
}
