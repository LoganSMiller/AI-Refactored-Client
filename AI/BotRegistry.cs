// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI
{
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;

    /// <summary>
    /// Global personality registry that maps bot profile IDs to their assigned AIRefactored profiles.
    /// Supports registration, lookup, fallback generation, and debug diagnostics.
    /// </summary>
    public static class BotRegistry
    {
        #region Fields

        private static readonly ConcurrentDictionary<string, BotPersonalityProfile> _profileRegistry =
            new ConcurrentDictionary<string, BotPersonalityProfile>();

        private static readonly ConcurrentDictionary<string, AIRefactoredBotOwner> _ownerRegistry =
            new ConcurrentDictionary<string, AIRefactoredBotOwner>();

        private static readonly HashSet<string> _missingLogged = new HashSet<string>();

        private static bool _debug = true;

        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        #endregion

        #region Public API

        public static void Clear()
        {
            _profileRegistry.Clear();
            _ownerRegistry.Clear();
            _missingLogged.Clear();

            Logger?.LogInfo("[BotRegistry] Cleared all personality and owner data.");
        }

        public static void EnableDebug(bool enable)
        {
            _debug = enable && !FikaHeadlessDetector.IsHeadless; // Disable debug in headless mode
            Logger?.LogInfo("[BotRegistry] Debug logging " + (enable ? "enabled." : "disabled."));
        }

        public static bool Exists(string profileId)
        {
            return !string.IsNullOrEmpty(profileId) && _profileRegistry.ContainsKey(profileId);
        }

        public static BotPersonalityProfile Get(string profileId, PersonalityType fallback = PersonalityType.Balanced)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                Logger?.LogWarning("[BotRegistry] Requested null or empty profileId. Returning fallback.");
                return GetFallbackProfile(fallback);
            }

            if (_profileRegistry.TryGetValue(profileId, out BotPersonalityProfile profile))
            {
                return profile;
            }

            if (_debug && _missingLogged.Add(profileId))
            {
                Logger?.LogWarning("[BotRegistry] Missing profile for '" + profileId + "'. Using fallback: " + fallback + ".");
            }

            return GetFallbackProfile(fallback); // Fallback profile if not found
        }

        public static void Register(string profileId, BotPersonalityProfile profile)
        {
            if (string.IsNullOrEmpty(profileId) || profile == null)
            {
                return;
            }

            if (_profileRegistry.ContainsKey(profileId))
            {
                Logger?.LogInfo("[BotRegistry] Profile already exists for '" + profileId + "'. Skipping registration.");
                return;
            }

            _profileRegistry[profileId] = profile;
            Logger?.LogInfo("[BotRegistry] Registered profile for '" + profileId + "': " + profile.Personality);
        }

        public static void RegisterOwner(string profileId, AIRefactoredBotOwner owner)
        {
            if (string.IsNullOrEmpty(profileId) || owner == null || _ownerRegistry.ContainsKey(profileId))
            {
                return; // Prevent overwriting of existing profile
            }

            _ownerRegistry[profileId] = owner;
            Logger?.LogInfo("[BotRegistry] Registered owner for '" + profileId + "'.");
        }

        public static BotPersonalityProfile? TryGet(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            return _profileRegistry.TryGetValue(profileId, out BotPersonalityProfile profile) ? profile : null;
        }

        public static AIRefactoredBotOwner? TryGetRefactoredOwner(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            return _ownerRegistry.TryGetValue(profileId, out AIRefactoredBotOwner owner) ? owner : null;
        }

        public static BotComponentCache? TryGetCache(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            AIRefactoredBotOwner? owner = TryGetRefactoredOwner(profileId);
            return owner != null ? owner.Cache : null;
        }

        #endregion

        #region Internal Logic

        private static BotPersonalityProfile GetFallbackProfile(PersonalityType fallback)
        {
            var profile = BotPersonalityPresets.GenerateProfile(fallback);
            Logger?.LogDebug("[BotRegistry] Returning fallback profile: " + profile.Personality);
            return profile;
        }

        #endregion
    }
}
