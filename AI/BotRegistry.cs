// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;

    /// <summary>
    /// Global personality registry that maps bot profile IDs to their assigned AIRefactored profiles.
    /// Supports registration, lookup, fallback generation, and debug diagnostics.
    /// </summary>
    public static class BotRegistry
    {
        #region Fields

        private static readonly HashSet<string> _missingLogged = new HashSet<string>(64);
        private static readonly Dictionary<string, AIRefactoredBotOwner> _ownerRegistry = new Dictionary<string, AIRefactoredBotOwner>(128);
        private static readonly Dictionary<string, BotPersonalityProfile> _profileRegistry = new Dictionary<string, BotPersonalityProfile>(128);
        private static bool _debug = true;

        private static ManualLogSource Logger
        {
            get { return AIRefactoredController.Logger; }
        }

        #endregion

        #region Public API

        /// <summary>
        /// Clears all registered profiles and owners.
        /// </summary>
        public static void Clear()
        {
            _profileRegistry.Clear();
            _ownerRegistry.Clear();
            _missingLogged.Clear();

            if (_debug)
            {
                Logger.LogInfo("[BotRegistry] 🧹 Cleared all personality and owner data.");
            }
        }

        /// <summary>
        /// Enables or disables debug logging.
        /// </summary>
        /// <param name="enable">Whether to enable debug logging.</param>
        public static void EnableDebug(bool enable)
        {
            _debug = enable;

            Logger.LogInfo("[BotRegistry] Debug logging " + (enable ? "enabled." : "disabled."));
        }

        /// <summary>
        /// Checks if a profile is already registered.
        /// </summary>
        /// <param name="profileId">The unique profile ID.</param>
        /// <returns>True if a profile is registered for that ID.</returns>
        public static bool Exists(string profileId)
        {
            return !string.IsNullOrEmpty(profileId) && _profileRegistry.ContainsKey(profileId);
        }

        /// <summary>
        /// Retrieves a registered personality profile, or generates a fallback if missing.
        /// </summary>
        /// <param name="profileId">The profile identifier.</param>
        /// <param name="fallback">Fallback personality type.</param>
        /// <returns>The registered or fallback profile.</returns>
        public static BotPersonalityProfile Get(string profileId, PersonalityType fallback = PersonalityType.Balanced)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                if (_debug)
                {
                    Logger.LogWarning("[BotRegistry] Requested null/empty profileId. Returning fallback.");
                }

                return BotPersonalityPresets.GenerateProfile(fallback);
            }

            BotPersonalityProfile profile;
            if (_profileRegistry.TryGetValue(profileId, out profile))
            {
                return profile;
            }

            if (_debug && _missingLogged.Add(profileId))
            {
                Logger.LogWarning("[BotRegistry] ❌ Missing profile for '" + profileId + "'. Using fallback: " + fallback + ".");
            }

            return BotPersonalityPresets.GenerateProfile(fallback);
        }

        /// <summary>
        /// Registers a bot personality profile with the specified profile ID.
        /// </summary>
        /// <param name="profileId">The unique profile ID.</param>
        /// <param name="profile">The profile to register.</param>
        public static void Register(string profileId, BotPersonalityProfile profile)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return;
            }

            if (profile == null)
            {
                return;
            }

            if (_profileRegistry.ContainsKey(profileId))
            {
                return;
            }

            _profileRegistry[profileId] = profile;

            if (_debug)
            {
                Logger.LogInfo("[BotRegistry] ✅ Registered profile for '" + profileId + "': " + profile.Personality);
            }
        }

        /// <summary>
        /// Registers a refactored bot owner for the specified profile ID.
        /// </summary>
        /// <param name="profileId">The unique profile ID.</param>
        /// <param name="owner">The bot owner instance to track.</param>
        public static void RegisterOwner(string profileId, AIRefactoredBotOwner owner)
        {
            if (!string.IsNullOrEmpty(profileId) && owner != null)
            {
                _ownerRegistry[profileId] = owner;
            }
        }

        /// <summary>
        /// Tries to get a profile without generating a fallback. Returns null if not found.
        /// </summary>
        /// <param name="profileId">The profile ID to look up.</param>
        /// <returns>The profile if found; otherwise, null.</returns>
        public static BotPersonalityProfile? TryGet(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            BotPersonalityProfile profile;
            return _profileRegistry.TryGetValue(profileId, out profile) ? profile : null;
        }

        /// <summary>
        /// Tries to retrieve a previously registered AIRefactoredBotOwner.
        /// </summary>
        /// <param name="profileId">The profile ID to look up.</param>
        /// <returns>The owner if found; otherwise, null.</returns>
        public static AIRefactoredBotOwner? TryGetRefactoredOwner(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            AIRefactoredBotOwner owner;
            return _ownerRegistry.TryGetValue(profileId, out owner) ? owner : null;
        }

        #endregion
    }
}
