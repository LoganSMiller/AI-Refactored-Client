// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored
{
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using AIRefactored.AI;
    using AIRefactored.AI.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Global personality registry that maps bot profile IDs or roles to their assigned AIRefactored profiles.
    /// Supports registration, lookup, fallback generation, and debug diagnostics.
    /// </summary>
    public static class BotRegistry
    {
        private static readonly ConcurrentDictionary<string, BotPersonalityProfile> _profileRegistry = new ConcurrentDictionary<string, BotPersonalityProfile>();
        private static readonly ConcurrentDictionary<string, AIRefactoredBotOwner> _ownerRegistry = new ConcurrentDictionary<string, AIRefactoredBotOwner>();
        private static readonly Dictionary<PersonalityType, BotPersonalityProfile> _fallbackProfiles = new Dictionary<PersonalityType, BotPersonalityProfile>();
        private static readonly HashSet<string> _missingLogged = new HashSet<string>();

        private static readonly Dictionary<WildSpawnType, PersonalityType> _roleMap = new Dictionary<WildSpawnType, PersonalityType>
        {
            { WildSpawnType.assault, PersonalityType.Aggressive },
            { WildSpawnType.marksman, PersonalityType.Sniper },
            { WildSpawnType.pmcUSEC, PersonalityType.Strategic },
            { WildSpawnType.pmcBEAR, PersonalityType.Strategic },
            { WildSpawnType.exUsec, PersonalityType.Methodical },
            { WildSpawnType.crazyAssaultEvent, PersonalityType.Erratic },
            { WildSpawnType.bossBully, PersonalityType.Bulldozer },
            { WildSpawnType.followerBully, PersonalityType.Bulldozer },
            { WildSpawnType.bossTagilla, PersonalityType.Bulldozer },
            { WildSpawnType.bossGluhar, PersonalityType.Sentinel },
            { WildSpawnType.followerGluharAssault, PersonalityType.Sentinel },
            { WildSpawnType.followerGluharSecurity, PersonalityType.Sentinel },
            { WildSpawnType.followerGluharScout, PersonalityType.Strategic },
            { WildSpawnType.bossKilla, PersonalityType.Frenzied },
            { WildSpawnType.bossKnight, PersonalityType.Cowboy },
            { WildSpawnType.followerBigPipe, PersonalityType.Hunter },
            { WildSpawnType.followerBirdEye, PersonalityType.Sniper },
            { WildSpawnType.sectantPriest, PersonalityType.Cautious },
            { WildSpawnType.sectantWarrior, PersonalityType.Disruptor },
            { WildSpawnType.bossSanitar, PersonalityType.Supportive },
            { WildSpawnType.followerSanitar, PersonalityType.Supportive },
            { WildSpawnType.bossKojaniy, PersonalityType.Vigilante },
            { WildSpawnType.followerKojaniy, PersonalityType.Stalker },
            { WildSpawnType.bossZryachiy, PersonalityType.Strategic },
            { WildSpawnType.followerZryachiy, PersonalityType.Cautious }
        };

        private static readonly BotPersonalityProfile _nullProfileFallback = BotPersonalityPresets.GenerateProfile(PersonalityType.Balanced);
        private static readonly AIRefactoredBotOwner _nullOwnerFallback = new AIRefactoredBotOwner();
        private static readonly BotComponentCache _nullCacheFallback = new BotComponentCache();

        private static bool _debug = true;
        private static ManualLogSource Logger => Plugin.LoggerInstance;

        public static void Clear()
        {
            _profileRegistry.Clear();
            _ownerRegistry.Clear();
            _missingLogged.Clear();
            _fallbackProfiles.Clear();
            Logger.LogDebug("[BotRegistry] Cleared all personality and owner data.");
        }

        public static void EnableDebug(bool enable)
        {
            _debug = enable && !FikaHeadlessDetector.IsHeadless;
            Logger.LogDebug("[BotRegistry] Debug logging " + (enable ? "enabled." : "disabled."));
        }

        public static bool Exists(string profileId)
        {
            return !string.IsNullOrEmpty(profileId) && _profileRegistry.ContainsKey(profileId);
        }

        public static BotPersonalityProfile Get(string profileId, PersonalityType fallback = PersonalityType.Balanced)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                Logger.LogWarning("[BotRegistry] Requested null or empty profileId. Returning fallback.");
                return GetFallbackProfile(fallback);
            }

            if (_profileRegistry.TryGetValue(profileId, out var profile))
            {
                return profile;
            }

            if (_debug && _missingLogged.Add(profileId))
            {
                Logger.LogWarning("[BotRegistry] Missing profile for '" + profileId + "'. Using fallback: " + fallback + ".");
            }

            return GetFallbackProfile(fallback);
        }

        public static BotPersonalityProfile GetOrRegister(BotOwner bot)
        {
            if (bot == null || bot.Profile == null || bot.Profile.Info == null)
            {
                return _nullProfileFallback;
            }

            var profileId = bot.Profile.Id;
            if (_profileRegistry.TryGetValue(profileId, out var existing))
            {
                return existing;
            }

            var role = bot.Profile.Info.Settings != null ? bot.Profile.Info.Settings.Role : WildSpawnType.assault;
            if (!_roleMap.TryGetValue(role, out var type))
            {
                type = PersonalityType.Balanced;
            }

            var generated = BotPersonalityPresets.GenerateProfile(type);
            _profileRegistry[profileId] = generated;

            Logger.LogDebug("[BotRegistry] Registered profile '" + type + "' for bot role '" + role + "' (" + profileId + ")");
            return generated;
        }

        public static BotPersonalityProfile GetOrGenerate(string profileId, PersonalityType defaultType)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                Logger.LogWarning("[BotRegistry] GetOrGenerate failed — null or empty profileId.");
                return GetFallbackProfile(defaultType);
            }

            if (_profileRegistry.TryGetValue(profileId, out var profile))
            {
                return profile;
            }

            profile = BotPersonalityPresets.GenerateProfile(defaultType);
            _profileRegistry[profileId] = profile;

            Logger.LogDebug("[BotRegistry] Auto-generated profile for '" + profileId + "' with type: " + defaultType);
            return profile;
        }

        public static BotPersonalityProfile GetOrGenerate(string profileId, PersonalityType defaultType, WildSpawnType role)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                if (!_roleMap.TryGetValue(role, out var resolved))
                {
                    resolved = defaultType;
                }

                Logger.LogWarning("[BotRegistry] Null profileId. Fallback resolved to: " + resolved);
                return GetFallbackProfile(resolved);
            }

            if (_profileRegistry.TryGetValue(profileId, out var profile))
            {
                return profile;
            }

            if (!_roleMap.TryGetValue(role, out var type))
            {
                type = defaultType;
            }

            profile = BotPersonalityPresets.GenerateProfile(type);
            _profileRegistry[profileId] = profile;

            Logger.LogDebug("[BotRegistry] Auto-generated profile for '" + profileId + "' with type: " + type + " (role: " + role + ")");
            return profile;
        }

        public static void Register(string profileId, BotPersonalityProfile profile)
        {
            if (string.IsNullOrEmpty(profileId) || profile == null)
            {
                return;
            }

            if (_profileRegistry.ContainsKey(profileId))
            {
                Logger.LogDebug("[BotRegistry] Profile already exists for '" + profileId + "'. Skipping.");
                return;
            }

            _profileRegistry[profileId] = profile;
            Logger.LogDebug("[BotRegistry] Registered profile for '" + profileId + "': " + profile.Personality);
        }

        public static void RegisterOwner(string profileId, AIRefactoredBotOwner owner)
        {
            if (string.IsNullOrEmpty(profileId) || owner == null || _ownerRegistry.ContainsKey(profileId))
            {
                return;
            }

            _ownerRegistry[profileId] = owner;
            Logger.LogDebug("[BotRegistry] Registered owner for '" + profileId + "'.");
        }

        public static bool TryGet(string profileId, out BotPersonalityProfile profile)
        {
            if (string.IsNullOrEmpty(profileId) || !_profileRegistry.TryGetValue(profileId, out profile))
            {
                profile = _nullProfileFallback;
                return false;
            }

            return true;
        }

        public static bool TryGetRefactoredOwner(string profileId, out AIRefactoredBotOwner owner)
        {
            if (string.IsNullOrEmpty(profileId) || !_ownerRegistry.TryGetValue(profileId, out owner))
            {
                owner = _nullOwnerFallback;
                return false;
            }

            return true;
        }

        public static bool TryGetCache(string profileId, out BotComponentCache cache)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                cache = _nullCacheFallback;
                return false;
            }

            if (!_ownerRegistry.TryGetValue(profileId, out var owner) || owner.Cache == null)
            {
                cache = _nullCacheFallback;
                return false;
            }

            cache = owner.Cache;
            return true;
        }

        private static BotPersonalityProfile GetFallbackProfile(PersonalityType fallback)
        {
            if (_fallbackProfiles.TryGetValue(fallback, out var cached))
            {
                return cached;
            }

            var profile = BotPersonalityPresets.GenerateProfile(fallback);
            _fallbackProfiles[fallback] = profile;

            Logger.LogDebug("[BotRegistry] Created fallback profile: " + profile.Personality);
            return profile;
        }
    }
}
