// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Scans and prioritizes lootable containers and corpses near the bot.
    /// Supports visibility checks, cooldowns, and value filtering.
    /// </summary>
    public sealed class BotLootScanner
    {
        #region Constants

        private const float ScanInterval = 1.6f;
        private const float LootRadius = 12f;
        private const float HighValueRadius = 24f;
        private const float MaxAngle = 120f;
        private const float CooldownSeconds = 6f;
        private const float StaleResetSeconds = 10f;

        #endregion

        #region Fields

        private readonly Dictionary<string, float> _cooldowns = new Dictionary<string, float>(64);

        private BotOwner _bot;
        private BotComponentCache _cache;

        private float _nextScanTime;
        private float _lastUpdate;
        private float _cachedValue;

        #endregion

        #region Properties

        public float TotalLootValue => _cachedValue;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentException("BotLootScanner: cache or bot is null.");
            }

            _cache = cache;
            _bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        public void Tick(float time)
        {
            if (!IsEligible(time))
            {
                return;
            }

            _nextScanTime = time + ScanInterval;

            if (ShouldLoot())
            {
                TryLootNearby();
                _cachedValue = CalculateNearbyLootValue();
                _lastUpdate = time;
            }

            if (_cachedValue <= 0f && time - _lastUpdate > StaleResetSeconds)
            {
                _cachedValue = 0f;
            }
        }

        public Vector3 GetBestLootPosition()
        {
            if (_bot == null || FikaHeadlessDetector.IsHeadless)
            {
                return Vector3.zero;
            }

            float bestValue = 0f;
            Vector3 bestPos = _bot.Position;
            List<LootableContainer> containers = LootRegistry.GetAllContainers();

            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled || IsOnCooldown(c.name))
                {
                    continue;
                }

                float dist = Vector3.Distance(_bot.Position, c.transform.position);
                if (dist > HighValueRadius || !HasLOS(c.transform.position))
                {
                    continue;
                }

                float val = EstimateContainerValue(c);
                if (val > bestValue)
                {
                    bestValue = val;
                    bestPos = c.transform.position;
                }
            }

            return bestPos;
        }

        public void TryLootNearby()
        {
            if (!ShouldLoot() || _bot == null)
            {
                return;
            }

            Vector3 origin = _bot.Position;

            // Check corpse
            LootableContainer corpse = DeadBodyContainerCache.Get(_bot.ProfileId);
            if (corpse != null && corpse.enabled && !IsOnCooldown(corpse.name))
            {
                if (Vector3.Distance(origin, corpse.transform.position) <= LootRadius && HasLOS(corpse.transform.position))
                {
                    Loot(corpse);
                    return;
                }
            }

            // Check containers
            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c != null && c.enabled && !IsOnCooldown(c.name))
                {
                    if (Vector3.Distance(origin, c.transform.position) <= LootRadius && HasLOS(c.transform.position))
                    {
                        Loot(c);
                        return;
                    }
                }
            }

            // Check loose items
            List<LootItem> items = LootRegistry.GetAllItems();
            for (int i = 0; i < items.Count; i++)
            {
                LootItem item = items[i];
                if (item != null && item.enabled && !IsOnCooldown(item.name))
                {
                    if (Vector3.Distance(origin, item.transform.position) <= LootRadius && HasLOS(item.transform.position))
                    {
                        MarkCooldown(item.name);
                        _cache.Movement.EnterLootingMode();
                        _cache.Movement.ExitLootingMode();
                        Plugin.LoggerInstance.LogInfo("[BotLootScanner] Noticed item: " + item.name);
                        return;
                    }
                }
            }
        }

        #endregion

        #region Private Methods

        private bool IsEligible(float time)
        {
            return _bot != null &&
                   !_bot.IsDead &&
                   time >= _nextScanTime &&
                   !FikaHeadlessDetector.IsHeadless;
        }

        private bool ShouldLoot()
        {
            return _bot != null &&
                   !_bot.IsDead &&
                   _cache.PanicHandler.IsPanicking == false &&
                   _bot.Memory.GoalEnemy == null &&
                   (_bot.EnemiesController == null || _bot.EnemiesController.EnemyInfos.Count == 0);
        }

        private void Loot(LootableContainer container)
        {
            if (container == null || string.IsNullOrWhiteSpace(container.name))
            {
                return;
            }

            MarkCooldown(container.name);

            _cache.Movement.EnterLootingMode();
            container.Interact(new InteractionResult(EInteractionType.Open));
            _cache.Movement.ExitLootingMode();

            Plugin.LoggerInstance.LogInfo("[BotLootScanner] Looted container: " + container.name);
        }

        private float EstimateContainerValue(LootableContainer container)
        {
            if (container.ItemOwner == null || container.ItemOwner.RootItem == null)
            {
                return 0f;
            }

            float sum = 0f;
            List<Item> contents = TempListPool.Rent<Item>();
            contents.AddRange(container.ItemOwner.RootItem.GetAllItems());

            for (int i = 0; i < contents.Count; i++)
            {
                Item item = contents[i];
                if (item.Template != null && item.Template.CreditsPrice > 0)
                {
                    sum += item.Template.CreditsPrice;
                }
            }

            TempListPool.Return(contents);
            return sum;
        }

        private float CalculateNearbyLootValue()
        {
            if (_bot == null)
            {
                return 0f;
            }

            float value = 0f;
            Vector3 origin = _bot.Position;
            List<LootableContainer> containers = LootRegistry.GetAllContainers();

            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c != null && c.enabled)
                {
                    if (Vector3.Distance(origin, c.transform.position) <= LootRadius)
                    {
                        value += EstimateContainerValue(c);
                    }
                }
            }

            return value;
        }

        private bool HasLOS(Vector3 target)
        {
            if (_bot == null)
            {
                return false;
            }

            Vector3 origin = _bot.WeaponRoot.position;
            Vector3 dir = target - origin;

            if (Vector3.Angle(_bot.WeaponRoot.forward, dir) > MaxAngle)
            {
                return false;
            }

            if (Physics.Raycast(origin, dir.normalized, out RaycastHit hit, dir.magnitude + 0.3f, AIRefactoredLayerMasks.HighPolyWithTerrainMaskAI))
            {
                return Vector3.Distance(hit.point, target) < 0.4f;
            }

            return true;
        }

        private void MarkCooldown(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
            {
                _cooldowns[id.Trim()] = Time.time + CooldownSeconds;
            }
        }

        private bool IsOnCooldown(string id)
        {
            return !string.IsNullOrWhiteSpace(id) &&
                   _cooldowns.TryGetValue(id.Trim(), out float expires) &&
                   Time.time < expires;
        }

        #endregion
    }
}
