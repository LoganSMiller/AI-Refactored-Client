// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Scans and prioritizes lootable containers and corpses near the bot. Supports visibility checks and value filtering.
    /// </summary>
    public sealed class BotLootScanner
    {
        #region Constants

        private const float ScanInterval = 1.6f;
        private const float LootRadius = 12f;
        private const float HighValueRadius = 24f;
        private const float MaxAngle = 120f;
        private const float CooldownSeconds = 6f;
        private const float StaleResetSeconds = 10f;

        #endregion

        #region Fields

        private readonly Dictionary<string, float> _cooldowns = new Dictionary<string, float>(64);

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private float _nextScanTime;
        private float _lastUpdate;
        private float _cachedValue;

        #endregion

        #region Properties

        public float TotalLootValue => this._cachedValue;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public Methods

        public void Tick(float time)
        {
            if (!this.IsEligible(time))
            {
                return;
            }

            this._nextScanTime = time + ScanInterval;

            if (this.ShouldLoot())
            {
                this.TryLootNearby();
                this._cachedValue = this.CalculateNearbyLootValue();
                this._lastUpdate = time;
            }

            if (this._cachedValue <= 0f && time - this._lastUpdate > StaleResetSeconds)
            {
                this._cachedValue = 0f;
            }
        }

        public Vector3 GetBestLootPosition()
        {
            if (this._bot == null || FikaHeadlessDetector.IsHeadless)
            {
                return Vector3.zero;
            }

            float bestValue = 0f;
            Vector3 bestPos = this._bot.Position;

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled || this.IsOnCooldown(c.name))
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, c.transform.position);
                if (dist > HighValueRadius || !this.HasLOS(c.transform.position))
                {
                    continue;
                }

                float val = this.EstimateContainerValue(c);
                if (val > bestValue)
                {
                    bestValue = val;
                    bestPos = c.transform.position;
                }
            }

            return bestPos;
        }

        public void TryLootNearby()
        {
            if (!this.ShouldLoot() || this._bot == null)
            {
                return;
            }

            Vector3 origin = this._bot.Position;

            // Dead body first
            LootableContainer? corpse = DeadBodyContainerCache.Get(this._bot.ProfileId);
            if (corpse != null && corpse.enabled && !this.IsOnCooldown(corpse.name))
            {
                if (Vector3.Distance(origin, corpse.transform.position) <= LootRadius && this.HasLOS(corpse.transform.position))
                {
                    this.Loot(corpse);
                    return;
                }
            }

            // Containers
            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled || this.IsOnCooldown(c.name))
                {
                    continue;
                }

                if (Vector3.Distance(origin, c.transform.position) <= LootRadius && this.HasLOS(c.transform.position))
                {
                    this.Loot(c);
                    return;
                }
            }

            // Loose loot
            List<LootItem> items = LootRegistry.GetAllItems();
            for (int i = 0; i < items.Count; i++)
            {
                LootItem item = items[i];
                if (item == null || !item.enabled || this.IsOnCooldown(item.name))
                {
                    continue;
                }

                if (Vector3.Distance(origin, item.transform.position) <= LootRadius && this.HasLOS(item.transform.position))
                {
                    this.MarkCooldown(item.name);
                    this._cache?.Movement?.EnterLootingMode();
                    this._cache?.Movement?.ExitLootingMode();
                    AIRefactoredController.Logger.LogInfo($"[BotLootScanner] Noticed item: {item.name}");
                    return;
                }
            }
        }

        #endregion

        #region Private Methods

        private bool IsEligible(float time)
        {
            return this._bot != null &&
                   !this._bot.IsDead &&
                   time >= this._nextScanTime &&
                   !FikaHeadlessDetector.IsHeadless;
        }

        private bool ShouldLoot()
        {
            return this._bot != null &&
                   !this._bot.IsDead &&
                   this._cache?.PanicHandler?.IsPanicking != true &&
                   this._bot.Memory?.GoalEnemy == null &&
                   this._bot.EnemiesController?.EnemyInfos.Count == 0;
        }

        private void Loot(LootableContainer container)
        {
            if (container == null || string.IsNullOrWhiteSpace(container.name))
            {
                return;
            }

            this.MarkCooldown(container.name);

            this._cache?.Movement?.EnterLootingMode();
            container.Interact(new InteractionResult(EInteractionType.Open));
            this._cache?.Movement?.ExitLootingMode();

            AIRefactoredController.Logger.LogInfo($"[BotLootScanner] Looted container: {container.name}");
        }

        private float EstimateContainerValue(LootableContainer container)
        {
            if (container.ItemOwner?.RootItem == null)
            {
                return 0f;
            }

            float sum = 0f;
            List<Item> contents = new List<Item>(container.ItemOwner.RootItem.GetAllItems());
            for (int i = 0; i < contents.Count; i++)
            {
                Item item = contents[i];
                if (item?.Template?.CreditsPrice > 0)
                {
                    sum += item.Template.CreditsPrice;
                }
            }

            return sum;
        }

        private float CalculateNearbyLootValue()
        {
            if (this._bot == null)
            {
                return 0f;
            }

            float value = 0f;
            Vector3 origin = this._bot.Position;
            List<LootableContainer> containers = LootRegistry.GetAllContainers();

            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled)
                {
                    continue;
                }

                if (Vector3.Distance(origin, c.transform.position) <= LootRadius)
                {
                    value += this.EstimateContainerValue(c);
                }
            }

            return value;
        }

        private bool HasLOS(Vector3 target)
        {
            if (this._bot == null)
            {
                return false;
            }

            Vector3 origin = this._bot.WeaponRoot.position;
            Vector3 dir = target - origin;

            if (Vector3.Angle(this._bot.WeaponRoot.forward, dir) > MaxAngle)
            {
                return false;
            }

            if (Physics.Raycast(origin, dir.normalized, out RaycastHit hit, dir.magnitude + 0.3f, AIRefactoredLayerMasks.HighPolyWithTerrainMaskAI))
            {
                return Vector3.Distance(hit.point, target) < 0.4f;
            }

            return true;
        }

        private void MarkCooldown(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
            {
                this._cooldowns[id.Trim()] = Time.time + CooldownSeconds;
            }
        }

        private bool IsOnCooldown(string id)
        {
            return !string.IsNullOrWhiteSpace(id) &&
                   this._cooldowns.TryGetValue(id.Trim(), out float expires) &&
                   Time.time < expires;
        }

        #endregion
    }
}
