// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Scans for nearby loot targets and selects high-value options for tactical looting.
    /// </summary>
    public sealed class BotLootScanner
    {
        #region Constants

        private const float ScanInterval = 1.6f;
        private const float ScanRadius = 12f;
        private const float HighestValueRadius = 24f;
        private const float CooldownSeconds = 6f;
        private const float MaxAngle = 120f;

        #endregion

        #region Fields

        private readonly Dictionary<string, float> _lootCooldowns = new Dictionary<string, float>(64);

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private float _nextScanTime;
        private float _cachedValue;
        private float _lastValueUpdate;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the estimated total loot value near the bot.
        /// </summary>
        public float TotalLootValue => this._cachedValue;

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the scanner with the bot cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            this._cache = cache;
            this._bot = cache.Bot;
        }

        /// <summary>
        /// Ticks the loot scan logic.
        /// </summary>
        public void Tick(float time)
        {
            if (this._bot == null || time < this._nextScanTime || !this.CanEvaluate())
            {
                return;
            }

            this._nextScanTime = time + ScanInterval;

            if (this.CanLoot())
            {
                this.TryLootNearby();
                this._cachedValue = this.EvaluateNearbyLootValue();
                this._lastValueUpdate = time;
            }
        }

        /// <summary>
        /// Attempts to loot containers or items within range.
        /// </summary>
        public void TryLootNearby()
        {
            if (!this.CanLoot() || this._bot == null)
            {
                return;
            }

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled || this.IsOnCooldown(c.name))
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, c.transform.position);
                if (dist > ScanRadius || !this.CanSee(c.transform.position))
                {
                    continue;
                }

                this.MarkCooldown(c.name);
                c.Interact(new InteractionResult(EInteractionType.Open));
                return;
            }

            List<LootItem> items = LootRegistry.GetAllItems();
            for (int i = 0; i < items.Count; i++)
            {
                LootItem item = items[i];
                if (item == null || !item.enabled || this.IsOnCooldown(item.name))
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, item.transform.position);
                if (dist > ScanRadius || !this.CanSee(item.transform.position))
                {
                    continue;
                }

                this.MarkCooldown(item.name);
                return;
            }
        }

        /// <summary>
        /// Returns the highest-value container position within range.
        /// </summary>
        public Vector3 GetHighestValueLootPoint()
        {
            if (this._bot == null || FikaHeadlessDetector.IsHeadless)
            {
                return Vector3.zero;
            }

            float bestValue = 0f;
            Vector3 bestPoint = this._bot.Position;

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled)
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, c.transform.position);
                if (dist > HighestValueRadius || !this.CanSee(c.transform.position))
                {
                    continue;
                }

                float value = this.EstimateValue(c);
                if (value > bestValue)
                {
                    bestValue = value;
                    bestPoint = c.transform.position;
                }
            }

            return bestPoint;
        }

        #endregion

        #region Private Helpers

        private bool CanEvaluate()
        {
            return this._bot != null && !this._bot.IsDead && !FikaHeadlessDetector.IsHeadless;
        }

        private bool CanLoot()
        {
            if (this._bot == null || this._bot.IsDead)
            {
                return false;
            }

            if (this._cache?.PanicHandler?.IsPanicking == true)
            {
                return false;
            }

            if (this._bot.Memory?.GoalEnemy != null)
            {
                return false;
            }

            return this._bot.EnemiesController?.EnemyInfos.Count == 0;
        }

        private bool CanSee(Vector3 target)
        {
            if (this._bot == null)
            {
                return false;
            }

            Vector3 origin = this._bot.WeaponRoot.position;
            Vector3 dir = target - origin;
            float angle = Vector3.Angle(this._bot.WeaponRoot.forward, dir);

            if (angle > MaxAngle)
            {
                return false;
            }

            if (Physics.Raycast(origin, dir.normalized, out RaycastHit hit, dir.magnitude + 0.3f, AIRefactoredLayerMasks.HighPolyWithTerrainMaskAI))
            {
                return Vector3.Distance(hit.point, target) < 0.4f;
            }

            return true;
        }

        private float EstimateValue(LootableContainer container)
        {
            if (container.ItemOwner == null || container.ItemOwner.RootItem == null)
            {
                return 0f;
            }

            float value = 0f;
            List<Item> items = new List<Item>(container.ItemOwner.RootItem.GetAllItems());
            for (int i = 0; i < items.Count; i++)
            {
                Item item = items[i];
                if (item != null && item.Template?.CreditsPrice > 0)
                {
                    value += item.Template.CreditsPrice;
                }
            }

            return value;
        }

        private float EvaluateNearbyLootValue()
        {
            if (this._bot == null)
            {
                return 0f;
            }

            float totalValue = 0f;
            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled)
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, c.transform.position);
                if (dist > ScanRadius)
                {
                    continue;
                }

                totalValue += this.EstimateValue(c);
            }

            return totalValue;
        }

        private bool IsOnCooldown(string id)
        {
            return !string.IsNullOrWhiteSpace(id)
                   && this._lootCooldowns.TryGetValue(id.Trim(), out float t)
                   && Time.time < t;
        }

        private void MarkCooldown(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
            {
                this._lootCooldowns[id.Trim()] = Time.time + CooldownSeconds;
            }
        }

        #endregion
    }
}
