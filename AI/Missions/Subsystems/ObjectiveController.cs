// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles all routing, objective assignment, quest queueing, and re-pathing logic
    /// for active missions (Loot, Fight, Quest). Fully integrated with squad pathing.
    /// </summary>
    public sealed class ObjectiveController
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotLootScanner? _lootScanner;
        private readonly Queue<Vector3> _questRoute;
        private readonly System.Random _rng;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectiveController"/> class.
        /// </summary>
        /// <param name="bot">Bot owner reference.</param>
        /// <param name="cache">Bot component cache reference.</param>
        public ObjectiveController(BotOwner bot, BotComponentCache cache)
        {
            this._bot = bot ?? throw new ArgumentNullException(nameof(bot));
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._lootScanner = cache.LootScanner;
            this._questRoute = new Queue<Vector3>(4);
            this._rng = new System.Random();
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current world-space objective the bot is routing toward.
        /// </summary>
        public Vector3 CurrentObjective { get; private set; }

        #endregion

        #region Public Methods

        /// <summary>
        /// Called when an objective is reached. Requeues or updates based on mission type.
        /// </summary>
        /// <param name="type">Current mission type.</param>
        public void OnObjectiveReached(MissionType type)
        {
            Vector3 next;

            switch (type)
            {
                case MissionType.Quest:
                    next = this.GetNextQuestObjective();
                    break;
                case MissionType.Fight:
                    next = this.GetFightZone();
                    break;
                case MissionType.Loot:
                    next = this.GetLootObjective();
                    break;
                default:
                    next = this._bot.Position;
                    break;
            }

            this.CurrentObjective = next;
            BotMovementHelper.SmoothMoveTo(this._bot, next);
        }

        /// <summary>
        /// Resumes quest routing after fallback, combat, or diversion.
        /// </summary>
        public void ResumeQuesting()
        {
            if (this._questRoute.Count == 0)
            {
                this.PopulateQuestRoute();
            }

            if (this._questRoute.Count > 0)
            {
                Vector3 next = this.GetNextQuestObjective();
                this.CurrentObjective = next;
                BotMovementHelper.SmoothMoveTo(this._bot, next);
            }
        }

        /// <summary>
        /// Sets the first objective for a newly assigned mission.
        /// </summary>
        /// <param name="type">Mission type to initialize.</param>
        public void SetInitialObjective(MissionType type)
        {
            Vector3 target;

            switch (type)
            {
                case MissionType.Quest:
                    target = this.GetNextQuestObjective();
                    break;
                case MissionType.Fight:
                    target = this.GetFightZone();
                    break;
                case MissionType.Loot:
                    target = this.GetLootObjective();
                    break;
                default:
                    target = this._bot.Position;
                    break;
            }

            this.CurrentObjective = target;
            BotMovementHelper.SmoothMoveTo(this._bot, target);
        }

        #endregion

        #region Private Methods

        private Vector3 GetFightZone()
        {
            BotZone[] zones = GameObject.FindObjectsOfType<BotZone>();
            if (zones.Length > 0)
            {
                return zones[this._rng.Next(0, zones.Length)].transform.position;
            }

            return this._bot.Position;
        }

        private Vector3 GetLootObjective()
        {
            return this._lootScanner != null
                ? this._lootScanner.GetHighestValueLootPoint()
                : this._bot.Position;
        }

        private Vector3 GetNextQuestObjective()
        {
            return this._questRoute.Count > 0
                ? this._questRoute.Dequeue()
                : this._bot.Position;
        }

        private void PopulateQuestRoute()
        {
            this._questRoute.Clear();
            Vector3 origin = this._bot.Position;

            Predicate<HotspotRegistry.Hotspot> directionFilter = delegate (HotspotRegistry.Hotspot h)
            {
                return Vector3.Dot((h.Position - origin).normalized, this._bot.LookDirection.normalized) > 0.25f;
            };

            List<HotspotRegistry.Hotspot> filtered = new List<HotspotRegistry.Hotspot>(
                HotspotRegistry.QueryNearby(origin, 100f, directionFilter));

            if (filtered.Count == 0)
            {
                return;
            }

            int count = UnityEngine.Random.Range(2, 4);
            HashSet<int> used = new HashSet<int>(EqualityComparer<int>.Default);

            while (this._questRoute.Count < count && used.Count < filtered.Count)
            {
                int index = UnityEngine.Random.Range(0, filtered.Count);
                if (used.Add(index))
                {
                    this._questRoute.Enqueue(filtered[index].Position);
                }
            }
        }

        #endregion
    }
}
