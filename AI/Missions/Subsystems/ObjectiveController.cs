// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles routing, objective assignment, and mission-based movement logic.
    /// Supports squad-aware quest paths and loot/fight transitions.
    /// </summary>
    public sealed class ObjectiveController
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotLootScanner _lootScanner;
        private readonly Queue<Vector3> _questRoute;
        private readonly System.Random _rng;

        #endregion

        #region Constructor

        public ObjectiveController(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                throw new ArgumentException("ObjectiveController: bot or cache is null.");
            }

            _bot = bot;
            _cache = cache;
            _lootScanner = cache.LootScanner;
            _questRoute = new Queue<Vector3>(4);
            _rng = new System.Random();
        }

        #endregion

        #region Properties

        public Vector3 CurrentObjective { get; private set; }

        #endregion

        #region Public Methods

        public void OnObjectiveReached(MissionType type)
        {
            Vector3 next;

            switch (type)
            {
                case MissionType.Quest:
                    next = GetNextQuestObjective();
                    break;
                case MissionType.Fight:
                    next = GetFightZone();
                    break;
                case MissionType.Loot:
                    next = GetLootObjective();
                    break;
                default:
                    next = _bot.Position;
                    break;
            }

            CurrentObjective = next;
            BotMovementHelper.SmoothMoveTo(_bot, next);
        }

        public void ResumeQuesting()
        {
            if (_questRoute.Count == 0)
            {
                PopulateQuestRoute();
            }

            if (_questRoute.Count > 0)
            {
                Vector3 next = GetNextQuestObjective();
                CurrentObjective = next;
                BotMovementHelper.SmoothMoveTo(_bot, next);
            }
        }

        public void SetInitialObjective(MissionType type)
        {
            Vector3 target;

            switch (type)
            {
                case MissionType.Quest:
                    target = GetNextQuestObjective();
                    break;
                case MissionType.Fight:
                    target = GetFightZone();
                    break;
                case MissionType.Loot:
                    target = GetLootObjective();
                    break;
                default:
                    target = _bot.Position;
                    break;
            }

            CurrentObjective = target;
            BotMovementHelper.SmoothMoveTo(_bot, target);
        }

        #endregion

        #region Private Methods

        private Vector3 GetFightZone()
        {
            BotZone[] zones = GameObject.FindObjectsOfType<BotZone>();
            if (zones.Length > 0)
            {
                return zones[_rng.Next(0, zones.Length)].transform.position;
            }

            return _bot.Position;
        }

        private Vector3 GetLootObjective()
        {
            return _lootScanner != null ? _lootScanner.GetBestLootPosition() : _bot.Position;
        }

        private Vector3 GetNextQuestObjective()
        {
            return _questRoute.Count > 0 ? _questRoute.Dequeue() : _bot.Position;
        }

        private void PopulateQuestRoute()
        {
            _questRoute.Clear();
            Vector3 origin = _bot.Position;

            Predicate<HotspotRegistry.Hotspot> directionFilter = delegate (HotspotRegistry.Hotspot h)
            {
                return Vector3.Dot((h.Position - origin).normalized, _bot.LookDirection.normalized) > 0.25f;
            };

            List<HotspotRegistry.Hotspot> nearby = TempListPool.Rent<HotspotRegistry.Hotspot>();
            nearby.AddRange(HotspotRegistry.QueryNearby(origin, 100f, directionFilter));

            if (nearby.Count == 0)
            {
                TempListPool.Return(nearby);
                return;
            }

            int desired = UnityEngine.Random.Range(2, 4);
            HashSet<int> used = TempHashSetPool.Rent<int>();

            while (_questRoute.Count < desired && used.Count < nearby.Count)
            {
                int index = UnityEngine.Random.Range(0, nearby.Count);
                if (used.Add(index))
                {
                    _questRoute.Enqueue(nearby[index].Position);
                }
            }

            TempHashSetPool.Return(used);
            TempListPool.Return(nearby);
        }

        #endregion
    }
}
