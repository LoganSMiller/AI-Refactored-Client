// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Evaluates combat, squad cohesion, loot status, and fallback triggers to adjust bot missions.
    /// </summary>
    public sealed class MissionEvaluator
    {
        #region Constants

        private const int LootItemCountThreshold = 40;
        private const float SquadCohesionRange = 10f;
        private const float StuckCooldown = 30f;
        private const float StuckDuration = 25f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotPersonalityProfile _profile;

        private int _fallbackAttempts;
        private float _lastMoveTime;
        private float _stuckSince;
        private float _lastStuckFallbackTime;
        private Vector3 _lastPos;

        #endregion

        #region Constructor

        public MissionEvaluator(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.Profile.Id);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lastPos = bot.Position;
            _lastMoveTime = Time.time;
        }

        #endregion

        #region Public Methods

        public bool IsGroupAligned()
        {
            if (_group == null)
            {
                return true;
            }

            List<BotOwner> teammates = TempListPool.Rent<BotOwner>();
            try
            {
                IReadOnlyList<BotOwner> groupMembers = _group.GetTeammates();
                for (int i = 0; i < groupMembers.Count; i++)
                {
                    BotOwner member = groupMembers[i];
                    if (member != null)
                    {
                        teammates.Add(member);
                    }
                }

                int nearby = 0;
                Vector3 selfPos = _bot.Position;

                for (int i = 0; i < teammates.Count; i++)
                {
                    BotOwner mate = teammates[i];
                    if (mate != null)
                    {
                        float dist = Vector3.Distance(mate.Position, selfPos);
                        if (dist < SquadCohesionRange)
                        {
                            nearby++;
                        }
                    }
                }

                int required = Mathf.CeilToInt(teammates.Count * 0.6f);
                return nearby >= required;
            }
            finally
            {
                TempListPool.Return(teammates);
            }
        }

        public bool ShouldExtractEarly()
        {
            if (_profile.IsFrenzied || _profile.Caution <= 0.6f)
            {
                return false;
            }

            Player player = _bot.GetPlayer;
            if (player == null)
            {
                return false;
            }

            Inventory inventory = player.Inventory;
            if (inventory == null)
            {
                return false;
            }

            Slot backpackSlot = inventory.Equipment?.GetSlot(EquipmentSlot.Backpack);
            if (backpackSlot == null)
            {
                return false;
            }

            Item backpack = backpackSlot.ContainedItem;
            if (backpack == null)
            {
                return false;
            }

            List<Item> items = TempListPool.Rent<Item>();
            try
            {
                items.AddRange(backpack.GetAllItems());
                float fullness = (float)items.Count / LootItemCountThreshold;
                return fullness >= _profile.RetreatThreshold;
            }
            finally
            {
                TempListPool.Return(items);
            }
        }

        public void TryExtract()
        {
            try
            {
                ExfiltrationPoint closest = null;
                float minDist = float.MaxValue;
                ExfiltrationPoint[] all = GameObject.FindObjectsOfType<ExfiltrationPoint>();

                for (int i = 0; i < all.Length; i++)
                {
                    ExfiltrationPoint point = all[i];
                    if (point != null && point.Status == EExfiltrationStatus.RegularMode)
                    {
                        float dist = Vector3.Distance(_bot.Position, point.transform.position);
                        if (dist < minDist)
                        {
                            minDist = dist;
                            closest = point;
                        }
                    }
                }

                if (closest != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, closest.transform.position);
                    Say(EPhraseTrigger.ExitLocated);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] Extraction failed: " + ex.Message);
            }
        }

        public void UpdateStuckCheck(float time)
        {
            float moved = Vector3.Distance(_bot.Position, _lastPos);

            if (moved > 0.3f)
            {
                _lastPos = _bot.Position;
                _lastMoveTime = time;
                _fallbackAttempts = 0;
                return;
            }

            bool cooldownPassed = time - _stuckSince > StuckCooldown;
            bool stuckLongEnough = time - _lastMoveTime > StuckDuration;
            bool notRecentlyFellback = time - _lastStuckFallbackTime > StuckCooldown;

            if (stuckLongEnough && cooldownPassed && notRecentlyFellback && _fallbackAttempts < 2)
            {
                _stuckSince = time;
                _lastStuckFallbackTime = time;
                _fallbackAttempts++;

                Vector3 direction = _bot.LookDirection;
                Vector3? fallback = HybridFallbackResolver.GetBestRetreatPoint(_bot, direction);
                if (fallback.HasValue)
                {
                    string name = _bot.Profile != null && _bot.Profile.Info != null ? _bot.Profile.Info.Nickname : "Unknown";
                    Logger.LogDebug("[MissionEvaluator] " + name + " fallback #" + _fallbackAttempts + " → " + fallback.Value);
                    BotMovementHelper.SmoothMoveTo(_bot, fallback.Value);
                }
            }
        }

        #endregion

        #region Private Methods

        private void Say(EPhraseTrigger phrase)
        {
            try
            {
                if (!FikaHeadlessDetector.IsHeadless)
                {
                    Player player = _bot.GetPlayer;
                    if (player != null)
                    {
                        player.Say(phrase);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] VO failed: " + ex.Message);
            }
        }

        #endregion
    }
}
