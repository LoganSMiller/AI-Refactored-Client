// <auto-generated>
//   AI-Refactored: MissionSwitcher.cs (Supreme Arbitration/Overlay, Max Realism & Human Priorities Edition – June 2025, Mastermoveplan Compliant)
//   Dynamically switches bot missions with full squad, threat, loot, fallback, anti-stuck, and personality logic.
//   No direct movement. All state changes are pooled, overlay/event only, and strictly bulletproofed.
//   Internal logger only. No Unity/Debug logging allowed. SPT/FIKA/headless safe. MIT License.
// </auto-generated>

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Supreme arbitration-driven mission state switcher.
    /// Considers threat, loot, squad, fallback, panic, anti-stuck, extraction, and personality overlays.
    /// Overlay/event only. All state changes, intent, and logging are bulletproofed and pooled. Multiplayer/headless safe.
    /// </summary>
    public sealed class MissionSwitcher
    {
        #region Constants

        private const float SwitchCooldown = 10f;
        private const float PostStuckCooldown = 15f;
        private const float PanicRetreatChance = 0.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotLootDecisionSystem _lootDecision;
        private readonly BotPersonalityProfile _profile;
        private readonly ManualLogSource _log;

        private float _lastSwitchTime;
        private float _lastPanicRetreatTime;
        private bool _pendingFallback;
        private bool _wasStuck;

        #endregion

        #region Construction

        public MissionSwitcher(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
                throw new ArgumentException("[MissionSwitcher] Invalid bot or component cache.");

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.ProfileId);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lootDecision = cache.LootDecisionSystem;
            _log = Plugin.LoggerInstance;
            _lastSwitchTime = -99f;
            _lastPanicRetreatTime = -99f;
            _pendingFallback = false;
            _wasStuck = false;
        }

        #endregion

        #region Mission Arbitration Logic

        /// <summary>
        /// Evaluates and switches bot mission intent using supreme arbitration logic.
        /// No movement or overlay actions, only intent/type switching. Bulletproof, zero-alloc, overlay/event only.
        /// </summary>
        /// <param name="currentMission">Current mission type, modified in-place.</param>
        /// <param name="time">Current world time.</param>
        /// <param name="switchToFight">Callback for escalation to Fight.</param>
        /// <param name="resumeQuesting">Callback for returning to Quest.</param>
        /// <param name="isGroupAligned">Predicate for squad alignment check.</param>
        /// <param name="isBotPanicking">Predicate for panic/fallback condition.</param>
        /// <param name="isBotStuck">Predicate for anti-stuck fallback check.</param>
        /// <param name="shouldExtractEarly">Predicate for extraction/retreat overlays.</param>
        public void Evaluate(
            ref MissionType currentMission,
            float time,
            Action switchToFight,
            Action resumeQuesting,
            Func<bool> isGroupAligned,
            Func<bool> isBotPanicking,
            Func<bool> isBotStuck,
            Func<bool> shouldExtractEarly)
        {
            try
            {
                if (_bot == null || _cache == null || _profile == null || _bot.IsDead || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
                    return;
                if (time - _lastSwitchTime < SwitchCooldown)
                    return;

                string botName = _bot.Profile?.Info?.Nickname ?? "Unknown";

                // === 1. Emergency/Panic Handling (panic fallback, anti-stuck overlays) ===

                // Panic/retreat logic: high stress, suppression, or personality threshold.
                if (isBotPanicking != null && isBotPanicking() && currentMission != MissionType.Fallback &&
                    (time - _lastPanicRetreatTime) > PostStuckCooldown && _profile.Caution > 0.65f)
                {
                    if (UnityEngine.Random.value < PanicRetreatChance)
                    {
                        currentMission = MissionType.Fallback;
                        _lastPanicRetreatTime = time;
                        _lastSwitchTime = time;
                        _pendingFallback = true;
                        _log.LogWarning($"[MissionSwitcher] {botName} PANIC fallback → Fallback (panic/personality trigger)");
                        return;
                    }
                }

                // Anti-stuck fallback logic: stuck overlays, mission switch to fallback.
                if (isBotStuck != null && isBotStuck() && !_wasStuck && currentMission != MissionType.Fallback)
                {
                    currentMission = MissionType.Fallback;
                    _lastSwitchTime = time;
                    _wasStuck = true;
                    _log.LogWarning($"[MissionSwitcher] {botName} stuck → Fallback (anti-stuck overlay)");
                    return;
                }
                if (!isBotStuck?.Invoke() ?? true)
                    _wasStuck = false; // Reset stuck flag if not currently stuck.

                // === 2. Immediate Threat Escalation ===

                // Escalate to Fight if under fire and aggressive, not currently fighting.
                if (_bot.Memory?.IsUnderFire == true &&
                    _profile.AggressionLevel > 0.6f &&
                    currentMission != MissionType.Fight)
                {
                    currentMission = MissionType.Fight;
                    _lastSwitchTime = time;
                    switchToFight?.Invoke();
                    _log.LogInfo($"[MissionSwitcher] {botName} escalating → Fight (under fire + aggressive)");
                    return;
                }

                // Squad-mates in combat (custom heuristic, as IsSquadInCombat does not exist).
                if (_group != null && AnyTeammateFighting(_group) &&
                    currentMission != MissionType.Fight && _profile.AggressionLevel > 0.45f)
                {
                    currentMission = MissionType.Fight;
                    _lastSwitchTime = time;
                    _log.LogInfo($"[MissionSwitcher] {botName} squad escalation → Fight (teammate engaged)");
                    return;
                }

                // === 3. Loot/Extraction/Quest Overlays ===

                // Switch to Loot if questing, loot-biased, and high value loot nearby.
                if (currentMission == MissionType.Quest &&
                    _profile.PreferredMission == MissionBias.Loot &&
                    _lootDecision != null &&
                    _lootDecision.ShouldLootNow())
                {
                    Vector3 lootPos = _lootDecision.GetLootDestination();
                    if (lootPos != Vector3.zero)
                    {
                        currentMission = MissionType.Loot;
                        _lastSwitchTime = time;
                        _log.LogInfo($"[MissionSwitcher] {botName} switching → Loot (loot detected)");
                        return;
                    }
                }

                // Early extraction/retreat if inventory/loot is full or personality/caution threshold reached.
                if (shouldExtractEarly != null && shouldExtractEarly() &&
                    currentMission != MissionType.Extract && _profile.Caution > 0.7f)
                {
                    currentMission = MissionType.Extract;
                    _lastSwitchTime = time;
                    _log.LogInfo($"[MissionSwitcher] {botName} early extract → Extract (loot/personal threshold)");
                    return;
                }

                // === 4. Squad/Group Awareness and Realignment ===

                // Revert to Quest if fighting but squad is lost/dispersed, or fallback is resolved.
                if ((currentMission == MissionType.Fight || currentMission == MissionType.Fallback) &&
                    isGroupAligned != null && !isGroupAligned())
                {
                    currentMission = MissionType.Quest;
                    _lastSwitchTime = time;
                    resumeQuesting?.Invoke();
                    _log.LogInfo($"[MissionSwitcher] {botName} fallback → Quest (squad separated)");
                    return;
                }

                // Reset pending fallback if resolved.
                if (_pendingFallback && currentMission != MissionType.Fallback)
                    _pendingFallback = false;
            }
            catch (Exception ex)
            {
                _log.LogError($"[MissionSwitcher] Evaluate failed: {ex}");
            }
        }

        /// <summary>
        /// Returns true if any living, valid teammate is actively fighting.
        /// </summary>
        private bool AnyTeammateFighting(BotGroupSyncCoordinator group)
        {
            try
            {
                var teammates = group.GetTeammates();
                for (int i = 0; i < teammates.Count; i++)
                {
                    var mate = teammates[i];
                    if (mate != null && !mate.IsDead && mate.Memory != null && mate.Memory.IsUnderFire)
                        return true;
                }
                return false;
            }
            catch { return false; }
        }

        #endregion
    }
}
