// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Looting;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Dynamically switches bot mission type based on panic, aggression, loot opportunity, or squad separation.
    /// </summary>
    public sealed class MissionSwitcher
    {
        #region Constants

        private const float SwitchCooldown = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotLootDecisionSystem _lootDecision;
        private readonly BotPersonalityProfile _profile;
        private readonly ManualLogSource _log;

        private float _lastSwitchTime;

        #endregion

        #region Constructor

        public MissionSwitcher(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                throw new ArgumentException("MissionSwitcher: bot or cache is null.");
            }

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.Profile.Id);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lootDecision = cache.LootDecisionSystem;
            _log = Plugin.LoggerInstance;
        }

        #endregion

        #region Public Methods

        public void Evaluate(
            ref MissionType currentMission,
            float time,
            Action switchToFight,
            Action resumeQuesting,
            Func<bool> isGroupAligned)
        {
            if (time - _lastSwitchTime < SwitchCooldown)
            {
                return;
            }

            if (_bot.IsDead || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
            {
                return;
            }

            string nickname = _bot.Profile?.Info?.Nickname ?? "Unknown";

            if (_bot.Memory.IsUnderFire &&
                _profile.AggressionLevel > 0.6f &&
                currentMission != MissionType.Fight)
            {
                _lastSwitchTime = time;
                currentMission = MissionType.Fight;
                switchToFight();
                _log.LogInfo("[MissionSwitcher] " + nickname + " escalating → Fight (under fire + aggressive)");
                return;
            }

            if (currentMission == MissionType.Quest &&
                _profile.PreferredMission == MissionBias.Loot &&
                _lootDecision != null &&
                _lootDecision.ShouldLootNow() &&
                _lootDecision.GetLootDestination() != Vector3.zero)
            {
                _lastSwitchTime = time;
                currentMission = MissionType.Loot;
                _log.LogInfo("[MissionSwitcher] " + nickname + " switching → Loot (loot opportunity nearby)");
                return;
            }

            if (currentMission == MissionType.Fight && !isGroupAligned())
            {
                _lastSwitchTime = time;
                currentMission = MissionType.Quest;
                resumeQuesting();
                _log.LogInfo("[MissionSwitcher] " + nickname + " falling back → Quest (squad separation)");
            }
        }

        #endregion
    }
}
