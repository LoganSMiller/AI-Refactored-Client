// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Looting;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Dynamically switches bot mission type based on context:
    /// panic, aggression, squad cohesion, loot opportunity, etc.
    /// </summary>
    public sealed class MissionSwitcher
    {
        #region Constants

        private const float SwitchCooldown = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator? _group;
        private readonly BotLootDecisionSystem? _lootDecision;
        private readonly BotPersonalityProfile _profile;
        private readonly ManualLogSource _log;

        private float _lastSwitchTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="MissionSwitcher"/> class.
        /// </summary>
        /// <param name="bot">Bot owner reference.</param>
        /// <param name="cache">Bot component cache reference.</param>
        public MissionSwitcher(BotOwner bot, BotComponentCache cache)
        {
            this._bot = bot ?? throw new ArgumentNullException(nameof(bot));
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._profile = BotRegistry.Get(bot.Profile.Id);
            this._group = BotCacheUtility.GetGroupSync(cache);
            this._lootDecision = cache.LootDecisionSystem;
            this._log = AIRefactoredController.Logger;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Evaluates and switches the mission type based on current combat and squad context.
        /// </summary>
        /// <param name="currentMission">Reference to the bot's current mission type.</param>
        /// <param name="time">Current game time in seconds.</param>
        /// <param name="switchToFight">Action to trigger if switching to Fight mission.</param>
        /// <param name="resumeQuesting">Action to trigger if switching back to Quest mission.</param>
        /// <param name="isGroupAligned">Function to evaluate squad cohesion.</param>
        public void Evaluate(
            ref MissionType currentMission,
            float time,
            Action switchToFight,
            Action resumeQuesting,
            Func<bool> isGroupAligned)
        {
            if (time - this._lastSwitchTime < SwitchCooldown)
            {
                return;
            }

            string nickname = this._bot.Profile?.Info?.Nickname ?? "Unknown";

            // Escalate to fight if under fire and aggressive
            if (this._bot.Memory?.IsUnderFire == true &&
                this._profile.AggressionLevel > 0.6f &&
                currentMission != MissionType.Fight)
            {
                this._log.LogInfo($"[MissionSwitcher] {nickname} escalating to Fight (under fire + aggressive)");
                this._lastSwitchTime = time;
                currentMission = MissionType.Fight;
                switchToFight?.Invoke();
                return;
            }

            // Opportunistically loot if personality allows and loot exists
            if (currentMission == MissionType.Quest &&
                this._profile.PreferredMission == MissionBias.Loot &&
                this._lootDecision != null &&
                this._lootDecision.ShouldLootNow() &&
                this._lootDecision.GetLootDestination() != Vector3.zero)
            {
                this._log.LogInfo($"[MissionSwitcher] {nickname} switching to Loot (loot opportunity nearby)");
                this._lastSwitchTime = time;
                currentMission = MissionType.Loot;
                return;
            }

            // De-escalate to Quest if squad separated
            if (currentMission == MissionType.Fight && !isGroupAligned())
            {
                this._log.LogInfo($"[MissionSwitcher] {nickname} falling back to Quest (squad separation)");
                this._lastSwitchTime = time;
                currentMission = MissionType.Quest;
                resumeQuesting?.Invoke();
            }
        }

        #endregion
    }
}
