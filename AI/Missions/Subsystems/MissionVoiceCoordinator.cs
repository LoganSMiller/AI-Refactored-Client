// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;

    /// <summary>
    /// Handles voice lines for looting, extraction, and coordination.
    /// VO routing is multiplayer-safe and avoids triggering on headless hosts.
    /// </summary>
    public sealed class MissionVoiceCoordinator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private readonly BotOwner _bot;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="MissionVoiceCoordinator"/> class.
        /// </summary>
        /// <param name="bot">The owning bot.</param>
        public MissionVoiceCoordinator(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            _bot = bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Triggers voice line when exit is located.
        /// </summary>
        public void OnExitLocated()
        {
            TrySay(EPhraseTrigger.ExitLocated);
        }

        /// <summary>
        /// Triggers voice line on looting.
        /// </summary>
        public void OnLoot()
        {
            TrySay(EPhraseTrigger.OnLoot);
        }

        /// <summary>
        /// Triggers voice line on mission switch.
        /// </summary>
        public void OnMissionSwitch()
        {
            TrySay(EPhraseTrigger.Cooperation);
        }

        #endregion

        #region Private Methods

        private void TrySay(EPhraseTrigger trigger)
        {
            if (FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            try
            {
                Player player = _bot.GetPlayer;
                if (player != null)
                {
                    IHealthController hc = player.HealthController;
                    if (hc != null && hc.IsAlive)
                    {
                        player.Say(trigger);
                    }
                }
            }
            catch (Exception ex)
            {
                string name = "Unknown";
                Profile profile = _bot.Profile;
                if (profile != null && profile.Info != null)
                {
                    name = profile.Info.Nickname;
                }

                Logger.LogWarning("[MissionVoiceCoordinator] VO failed for '" + name + "': " + ex.Message);
            }
        }

        #endregion
    }
}
