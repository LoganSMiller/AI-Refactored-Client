// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Handles voice lines for looting, extraction, and coordination.
    /// VO routing is multiplayer-safe and avoids triggering on headless hosts.
    /// </summary>
    public sealed class MissionVoiceCoordinator
    {
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private readonly BotOwner _bot;

        /// <summary>
        /// Initializes a new instance of the <see cref="MissionVoiceCoordinator"/> class.
        /// </summary>
        /// <param name="bot">The bot owner reference.</param>
        public MissionVoiceCoordinator(BotOwner bot)
        {
            this._bot = bot ?? throw new ArgumentNullException(nameof(bot));
        }

        /// <summary>
        /// Plays extraction located voice line.
        /// </summary>
        public void OnExitLocated()
        {
            this.TrySay(EPhraseTrigger.ExitLocated);
        }

        /// <summary>
        /// Plays loot acknowledgment voice line.
        /// </summary>
        public void OnLoot()
        {
            this.TrySay(EPhraseTrigger.OnLoot);
        }

        /// <summary>
        /// Plays coordination or mission switch voice line.
        /// </summary>
        public void OnMissionSwitch()
        {
            this.TrySay(EPhraseTrigger.Cooperation);
        }

        private void TrySay(EPhraseTrigger phrase)
        {
            if (FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            try
            {
                this._bot.GetPlayer?.Say(phrase);
            }
            catch (Exception ex)
            {
                string nickname = this._bot.Profile?.Info?.Nickname ?? "Unknown";
                Logger.LogWarning($"[MissionVoiceCoordinator] VO failed for bot '{nickname}': {ex.Message}");
            }
        }
    }
}
