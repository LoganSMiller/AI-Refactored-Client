// <auto-generated>
//   AI-Refactored: MissionVoiceCoordinator.cs (Max Realism/Overlay/Event Edition – June 2025)
//   Handles all overlay voice lines for mission actions: loot, extract, fallback, squad, anti-stuck.
//   Bulletproof, pooled, multiplayer/headless/client safe. No Unity/Debug logging. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Overlay/event-driven coordinator for all mission/squad/looting/combat voice lines.
    /// Bulletproof, pooled, multiplayer/headless/client safe, logger-only. Fully extensible.
    /// </summary>
    public sealed class MissionVoiceCoordinator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private readonly BotOwner _bot;
        private float _lastVoiceTime;
        private const float MinVoiceInterval = 1.05f;
        private const float MaxVoiceInterval = 2.6f;

        #endregion

        #region Constructor

        public MissionVoiceCoordinator(BotOwner bot)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
            {
                Logger.LogError("[MissionVoiceCoordinator] Invalid bot reference. Voice system disabled.");
                throw new ArgumentException("[MissionVoiceCoordinator] Invalid bot.");
            }
            _bot = bot;
            _lastVoiceTime = -99f;
        }

        #endregion

        #region Public Overlay Methods

        public void OnLoot() { SayWithCooldown(EPhraseTrigger.OnLoot); }
        public void OnExitLocated() { SayWithCooldown(EPhraseTrigger.ExitLocated); }
        public void OnRetreat() { SayWithCooldown(EPhraseTrigger.GetBack); }
        public void OnMissionSwitch() { SayWithCooldown(EPhraseTrigger.Cooperation); }
        public void OnUnstuck() { SayWithCooldown(EPhraseTrigger.NeedHelp); }

        // Extendable: add any phrase overlays required by mission/squad context.
        public void OnContact() { SayWithCooldown(EPhraseTrigger.OnFirstContact); }
        public void OnSquadLost() { SayWithCooldown(EPhraseTrigger.OnYourOwn); }
        public void OnRegroup() { SayWithCooldown(EPhraseTrigger.Regroup); }
        public void OnCoverMe() { SayWithCooldown(EPhraseTrigger.CoverMe); }
        public void OnNeedHelp() { SayWithCooldown(UnityEngine.Random.value > 0.5f ? EPhraseTrigger.NeedHelp : EPhraseTrigger.NeedAmmo); }
        public void OnCustom(EPhraseTrigger customTrigger) { SayWithCooldown(customTrigger); }

        #endregion

        #region Internal Overlay Logic

        private void SayWithCooldown(EPhraseTrigger trigger)
        {
            if (_bot == null)
                return;

            float now = Time.time;
            float minInterval = MinVoiceInterval + UnityEngine.Random.value * (MaxVoiceInterval - MinVoiceInterval);
            if (now - _lastVoiceTime < minInterval)
                return;

            TrySay(trigger);
            _lastVoiceTime = now;
        }

        private void TrySay(EPhraseTrigger trigger)
        {
            try
            {
                var talk = _bot.BotTalk;
                var player = _bot.GetPlayer;
                if (talk != null && player != null && player.HealthController != null && player.HealthController.IsAlive)
                {
                    talk.TrySay(trigger);
                }
            }
            catch (Exception ex)
            {
                try
                {
                    string name = _bot.Profile?.Info?.Nickname ?? "Unknown";
                    Logger.LogWarning($"[MissionVoiceCoordinator] VO failed for '{name}' [{trigger}]: {ex.Message}");
                }
                catch { /* Bulletproof: never propagate */ }
            }
        }

        #endregion
    }
}
