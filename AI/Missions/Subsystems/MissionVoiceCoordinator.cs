// <auto-generated>
//   AI-Refactored: MissionVoiceCoordinator.cs (Beyond Diamond, Headless/Multiplayer-Safe, June 2025)
//   Handles voice line coordination for mission actions (loot, extract, switch).
//   Bulletproof: All logic is headless-safe, multiplayer-safe, and locally isolated.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;

    /// <summary>
    /// Handles voice line coordination for mission actions (loot, extract, switch).
    /// Bulletproof: All logic is headless-safe, multiplayer-safe, and locally isolated.
    /// </summary>
    public sealed class MissionVoiceCoordinator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private readonly BotOwner _bot;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="MissionVoiceCoordinator"/> class.
        /// </summary>
        /// <param name="bot">Bot owner reference (must be valid).</param>
        public MissionVoiceCoordinator(BotOwner bot)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
            {
                Logger.LogError("[MissionVoiceCoordinator] Invalid bot reference. Voice system disabled.");
                throw new ArgumentException("[MissionVoiceCoordinator] Invalid bot.");
            }

            _bot = bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Triggers exit-located voice line.
        /// </summary>
        public void OnExitLocated()
        {
            TrySay(EPhraseTrigger.ExitLocated);
        }

        /// <summary>
        /// Triggers loot voice line.
        /// </summary>
        public void OnLoot()
        {
            TrySay(EPhraseTrigger.OnLoot);
        }

        /// <summary>
        /// Triggers squad coordination voice line on mission switch.
        /// </summary>
        public void OnMissionSwitch()
        {
            TrySay(EPhraseTrigger.Cooperation);
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Attempts to trigger the specified voice line, headless/multiplayer safe.
        /// </summary>
        private void TrySay(EPhraseTrigger trigger)
        {
            if (_bot == null || FikaHeadlessDetector.IsHeadless)
                return;

            try
            {
                var talk = _bot.BotTalk;
                var player = _bot.GetPlayer;
                if (talk != null && player != null && player.HealthController != null && player.HealthController.IsAlive)
                {
                    talk.TrySay(trigger);
                }
            }
            catch (Exception ex)
            {
                try
                {
                    string name = _bot.Profile?.Info?.Nickname ?? "Unknown";
                    Logger.LogWarning($"[MissionVoiceCoordinator] VO failed for '{name}': {ex.Message}");
                }
                catch { /* Bulletproof: never propagate */ }
            }
        }

        #endregion
    }
}
