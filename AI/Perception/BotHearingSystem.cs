// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Perception
{
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Detects footsteps and gunfire from nearby real players, filtered by hearing range.
    /// Events are registered with tactical memory for situational awareness.
    /// </summary>
    public sealed class BotHearingSystem
    {
        #region Constants

        private const float BaseHearingRange = 35f;
        private const float TimeWindow = 3f;

        #endregion

        #region Fields

        private BotOwner? _bot;
        private BotComponentCache? _cache;

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the hearing system with a bot's runtime cache.
        /// </summary>
        /// <param name="cache">Bot component cache.</param>
        public void Initialize(BotComponentCache cache)
        {
            this._cache = cache;
            this._bot = cache.Bot;
        }

        /// <summary>
        /// Performs a hearing scan based on nearby real players and sound events.
        /// </summary>
        /// <param name="deltaTime">Frame delta time.</param>
        public void Tick(float deltaTime)
        {
            if (!this.CanEvaluate())
            {
                return;
            }

            float effectiveRange = BaseHearingRange;
            float effectiveRangeSqr = effectiveRange * effectiveRange;

            if (this._bot == null)
            {
                return;
            }

            Vector3 origin = this._bot.Position;
            var players = BotMemoryStore.GetNearbyPlayers(origin, effectiveRange);

            for (int i = 0; i < players.Count; i++)
            {
                EFT.Player player = players[i];
                Vector3 targetPos = player.Transform.position;

                if (!IsValidAudibleTarget(player, origin, effectiveRangeSqr, targetPos))
                {
                    continue;
                }

                if (this.HeardSomething(player))
                {
                    this._cache?.RegisterHeardSound(targetPos);
                }
            }
        }

        #endregion

        #region Private Methods

        private static bool IsRealPlayer(EFT.Player player)
        {
            return player.AIData == null || !player.AIData.IsAI;
        }

        private static bool IsValidAudibleTarget(EFT.Player? target, Vector3 origin, float rangeSqr, Vector3 targetPos)
        {
            if (target == null || target.HealthController?.IsAlive != true)
            {
                return false;
            }

            if (!IsRealPlayer(target))
            {
                return false;
            }

            return (targetPos - origin).sqrMagnitude <= rangeSqr;
        }

        private bool CanEvaluate()
        {
            if (this._bot == null)
            {
                return false;
            }

            if (this._bot.IsDead)
            {
                return false;
            }

            EFT.Player? player = this._bot.GetPlayer;
            return player != null && player.IsAI;
        }

        private bool HeardSomething(EFT.Player player)
        {
            if (this._bot == null)
            {
                return false;
            }

            return BotSoundUtils.DidFireRecently(this._bot, player, 1f, TimeWindow)
                   || BotSoundUtils.DidStepRecently(this._bot, player, 1f, TimeWindow);
        }

        #endregion
    }
}
