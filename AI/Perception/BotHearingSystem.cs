// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Perception
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Detects footsteps and gunfire from nearby bots and players, filtered by hearing range.
    /// Ignores self and squadmates based on GroupId.
    /// </summary>
    public sealed class BotHearingSystem
    {
        #region Constants

        private const float BaseHearingRange = 35f;
        private const float TimeWindow = 3f;

        #endregion

        #region Fields

        private BotOwner? _bot;
        private BotComponentCache? _cache;

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the hearing system with a bot's runtime cache.
        /// </summary>
        /// <param name="cache">Bot component cache.</param>
        public void Initialize(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache.Bot;
        }

        /// <summary>
        /// Performs a hearing scan based on nearby players and sound events.
        /// </summary>
        /// <param name="deltaTime">Frame delta time.</param>
        public void Tick(float deltaTime)
        {
            if (!GameWorldHandler.IsSafeToInitialize || _bot == null || _cache == null)
            {
                return;
            }

            if (!CanEvaluate())
            {
                return;
            }

            Vector3 origin = _bot.Position;
            float rangeSqr = BaseHearingRange * BaseHearingRange;

            List<Player> players = BotMemoryStore.GetNearbyPlayers(origin, BaseHearingRange);
            for (int i = 0; i < players.Count; i++)
            {
                Player player = players[i];
                if (!IsAudibleSource(player, origin, rangeSqr))
                {
                    continue;
                }

                if (HeardSomething(player))
                {
                    Vector3 pos = EFTPlayerUtil.GetPosition(player);
                    if (pos.sqrMagnitude > 0.01f)
                    {
                        _cache.RegisterHeardSound(pos);
                    }
                }
            }
        }

        #endregion

        #region Private Methods

        private bool CanEvaluate()
        {
            return _bot != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer != null &&
                   _bot.GetPlayer.IsAI &&
                   _cache?.PanicHandler?.IsPanicking != true;
        }

        private bool HeardSomething(Player player)
        {
            if (_bot == null)
            {
                return false;
            }

            return BotSoundUtils.DidFireRecently(_bot, player, 1f, TimeWindow) ||
                   BotSoundUtils.DidStepRecently(_bot, player, 1f, TimeWindow);
        }

        private bool IsAudibleSource(Player player, Vector3 origin, float rangeSqr)
        {
            if (player == null ||
                player.HealthController == null ||
                !player.HealthController.IsAlive)
            {
                return false;
            }

            if (_bot == null || player.ProfileId == _bot.ProfileId)
            {
                return false;
            }

            if (AreInSameTeam(_bot, player))
            {
                return false;
            }

            Vector3 targetPos = EFTPlayerUtil.GetPosition(player);
            return (targetPos - origin).sqrMagnitude <= rangeSqr;
        }

        private static bool AreInSameTeam(BotOwner self, Player target)
        {
            string? selfGroup = self.GetPlayer?.Profile?.Info?.GroupId;
            string? targetGroup = target.Profile?.Info?.GroupId;

            return !string.IsNullOrEmpty(selfGroup) &&
                   !string.IsNullOrEmpty(targetGroup) &&
                   selfGroup == targetGroup;
        }

        #endregion
    }
}
