// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Perception
{
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls visual impairment from flashbangs, flares, and suppression.
    /// Adjusts sight distance, triggers panic and vocalizations, and syncs team awareness.
    /// </summary>
    public sealed class BotPerceptionSystem : IFlashReactiveBot
    {
        #region Constants

        private const float BlindSpeechThreshold = 0.4f;
        private const float FlareRecoverySpeed = 0.2f;
        private const float FlashRecoverySpeed = 0.5f;
        private const float MaxSightDistance = 70f;
        private const float MinSightDistance = 15f;
        private const float PanicTriggerThreshold = 0.6f;
        private const float SuppressionRecoverySpeed = 0.3f;

        #endregion

        #region Fields

        private float _blindStartTime = -1f;
        private float _flareIntensity;
        private float _flashBlindness;
        private float _suppressionFactor;

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private BotVisionProfile? _profile;

        #endregion

        #region Public Methods

        public void Initialize(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache.Bot;

            if (_bot != null)
            {
                Player? player = _bot.GetPlayer;
                if (player != null && player.IsAI)
                {
                    _profile = BotVisionProfiles.Get(player);
                }
            }
        }

        public void Tick(float deltaTime)
        {
            if (!IsValid())
            {
                return;
            }

            HandleFlashlightExposure();

            float penalty = Mathf.Max(_flashBlindness, _flareIntensity, _suppressionFactor);
            float adjustedSight = Mathf.Lerp(MinSightDistance, MaxSightDistance, 1f - penalty);

            if (_bot?.LookSensor != null && _profile != null)
            {
                _bot.LookSensor.ClearVisibleDist = adjustedSight * _profile.AdaptationSpeed;
            }

            bool blinded = _flashBlindness > BlindSpeechThreshold;
            float blindDuration = Mathf.Clamp01(_flashBlindness) * 3f;

            if (_cache != null)
            {
                _cache.IsBlinded = blinded;
                _cache.BlindUntilTime = Time.time + blindDuration;
            }

            TryTriggerPanic();
            RecoverVisualClarity(deltaTime);
            SyncEnemyIfVisible();
        }

        public void ApplyFlareExposure(float strength)
        {
            _flareIntensity = Mathf.Clamp(strength * 0.6f, 0f, 0.8f);
        }

        public void ApplyFlashBlindness(float intensity)
        {
            if (!IsValid() || _profile == null)
            {
                return;
            }

            float addedBlindness = intensity * _profile.MaxBlindness;
            _flashBlindness = Mathf.Clamp01(_flashBlindness + addedBlindness);
            _blindStartTime = Time.time;

            if (_flashBlindness > BlindSpeechThreshold)
            {
                _bot?.BotTalk?.TrySay(EPhraseTrigger.OnBeingHurt);
            }
        }

        public void ApplySuppression(float severity)
        {
            if (!IsValid() || _profile == null)
            {
                return;
            }

            _suppressionFactor = Mathf.Clamp01(severity * _profile.AggressionResponse);
        }

        public void OnFlashExposure(Vector3 lightOrigin)
        {
            if (IsValid())
            {
                ApplyFlashBlindness(0.4f);
            }
        }

        #endregion

        #region Private Methods

        private void HandleFlashlightExposure()
        {
            if (_cache == null)
            {
                return;
            }

            Transform? head = BotCacheUtility.Head(_cache);
            if (head == null)
            {
                return;
            }

            if (FlashlightRegistry.IsExposingBot(head, out Light? source) && source != null)
            {
                float score = FlashLightUtils.CalculateFlashScore(source.transform, head, 20f);
                if (score > 0.25f)
                {
                    ApplyFlashBlindness(score);
                }
            }
        }

        private void RecoverVisualClarity(float deltaTime)
        {
            float recoveryFactor = _profile?.ClarityRecoverySpeed ?? 1f;

            _flashBlindness = Mathf.MoveTowards(_flashBlindness, 0f, FlashRecoverySpeed * recoveryFactor * deltaTime);
            _flareIntensity = Mathf.MoveTowards(_flareIntensity, 0f, FlareRecoverySpeed * recoveryFactor * deltaTime);
            _suppressionFactor = Mathf.MoveTowards(_suppressionFactor, 0f, SuppressionRecoverySpeed * recoveryFactor * deltaTime);
        }

        private void SyncEnemyIfVisible()
        {
            if (_bot == null || _cache == null || _cache.IsBlinded)
            {
                return;
            }

            IPlayer? seen = _bot.Memory?.GoalEnemy?.Person;
            if (seen != null)
            {
                BotTeamLogic.AddEnemy(_bot, seen);
            }
        }

        private void TryTriggerPanic()
        {
            if (_cache?.PanicHandler == null || _bot == null)
            {
                return;
            }

            if (_flashBlindness >= PanicTriggerThreshold &&
                Time.time - _blindStartTime < 2.5f)
            {
                _cache.PanicHandler.TriggerPanic();
            }
        }

        private bool IsValid()
        {
            if (_bot == null || _bot.IsDead || _cache == null || _profile == null)
            {
                return false;
            }

            Player? player = _bot.GetPlayer;
            return player != null && player.IsAI;
        }

        #endregion
    }
}
