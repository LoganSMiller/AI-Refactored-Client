// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Perception
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using EFT;
    using EFT.InventoryLogic;
    using UnityEngine;
    using Random = UnityEngine.Random;

    /// <summary>
    ///     Manages flashlight, laser, NVG, and thermal toggling.
    ///     Reacts to ambient light, fog density, and chaos-driven bait behavior.
    /// </summary>
    public sealed class BotTacticalDeviceController
    {
        private readonly List<LightComponent> _devices = new();

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private float _nextDecisionTime;

        /// <summary>
        /// Initializes the controller with the bot's runtime cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache?.Bot == null)
            {
                throw new InvalidOperationException("Cannot initialize BotTacticalDeviceController without valid bot cache.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        /// <summary>
        /// Ticks the logic once per frame for toggling tactical devices.
        /// </summary>
        public void Tick()
        {
            if (!this.CanThink())
            {
                return;
            }

            this._nextDecisionTime = Time.time + TacticalConfig.CheckInterval;

            var weapon = this._bot?.WeaponManager?.CurrentWeapon;
            if (weapon == null)
            {
                return;
            }

            this.ScanMods(weapon);

            var isLowVisibility = IsLowVisibility();
            var baitTrigger = Random.value < this.ChaosBaitChance();
            var shouldEnable = isLowVisibility || baitTrigger;

            foreach (var device in this._devices)
            {
                var state = device.GetLightState();

                if (state.IsActive == shouldEnable)
                {
                    continue;
                }

                state.IsActive = shouldEnable;
                device.SetLightState(state);
            }

            if (!baitTrigger)
            {
                return;
            }

            this._nextDecisionTime = Time.time + 1.5f;

            foreach (var device in this._devices)
            {
                var state = device.GetLightState();
                state.IsActive = false;
                device.SetLightState(state);
            }
        }

        private bool CanThink()
        {
            if (this._bot == null || this._cache == null || this._bot.IsDead || Time.time < this._nextDecisionTime)
            {
                return false;
            }

            var player = this._bot.GetPlayer;
            return player != null && !player.IsYourPlayer;
        }

        private float ChaosBaitChance()
        {
            return (this._cache?.AIRefactoredBotOwner?.PersonalityProfile.ChaosFactor ?? 0f) * 0.25f;
        }

        private static bool IsLowVisibility()
        {
            var ambientLight = RenderSettings.ambientLight.grayscale;
            var fogDensity = RenderSettings.fog ? RenderSettings.fogDensity : 0f;

            return ambientLight < TacticalConfig.LightThreshold || fogDensity > TacticalConfig.FogThreshold;
        }

        private void ScanMods(Weapon weapon)
        {
            this._devices.Clear();

            foreach (var slot in weapon.AllSlots)
            {
                var mod = slot?.ContainedItem;
                if (mod == null)
                {
                    continue;
                }

                var name = mod.Template?.Name?.ToLowerInvariant() ?? string.Empty;
                var isTactical = false;

                foreach (var keyword in TacticalConfig.Keywords)
                {
                    if (name.Contains(keyword))
                    {
                        isTactical = true;
                        break;
                    }
                }

                if (!isTactical)
                {
                    continue;
                }

                switch (mod)
                {
                    case FlashlightItemClass fl when fl.Light != null:
                        this._devices.Add(fl.Light);
                        break;

                    case TacticalComboItemClass combo when combo.Light != null:
                        this._devices.Add(combo.Light);
                        break;

                    case LightLaserItemClass laser when laser.Light != null:
                        this._devices.Add(laser.Light);
                        break;
                }
            }
        }

        private static class TacticalConfig
        {
            public const float CheckInterval = 2f;
            public const float FogThreshold = 0.5f;
            public const float LightThreshold = 0.3f;

            public static readonly string[] Keywords = { "light", "laser", "nvg", "thermal", "flash" };
        }
    }
}
