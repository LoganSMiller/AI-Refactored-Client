// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using EFT;
    using EFT.InventoryLogic;
    using UnityEngine;
    using Random = UnityEngine.Random;

    /// <summary>
    /// Manages flashlight, laser, NVG, and thermal toggling.
    /// Reacts to ambient light, fog density, and chaos-driven bait behavior.
    /// </summary>
    public sealed class BotTacticalDeviceController
    {
        #region Fields

        private readonly List<LightComponent> _devices = new List<LightComponent>(4);

        private BotOwner _bot;
        private BotComponentCache _cache;
        private float _nextDecisionTime;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the controller with the bot's runtime cache.
        /// </summary>
        /// <param name="cache">Bot component cache.</param>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            BotOwner resolved = cache.Bot;
            if (resolved == null)
            {
                throw new ArgumentException("Invalid bot reference.");
            }

            _bot = resolved;
            _cache = cache;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Ticks the logic once per frame for toggling tactical devices.
        /// </summary>
        public void Tick()
        {
            if (!CanThink())
            {
                return;
            }

            _nextDecisionTime = Time.time + TacticalConfig.CheckInterval;

            Weapon weapon = _bot.WeaponManager.CurrentWeapon;
            if (weapon == null)
            {
                return;
            }

            ScanMods(weapon);

            bool lowVisibility = IsLowVisibility();
            bool baitTrigger = Random.value < GetChaosBaitChance();
            bool shouldEnable = lowVisibility || baitTrigger;

            for (int i = 0; i < _devices.Count; i++)
            {
                LightComponent device = _devices[i];
                if (device.IsActive != shouldEnable)
                {
                    device.IsActive = shouldEnable;
                }
            }

            if (baitTrigger)
            {
                _nextDecisionTime = Time.time + 1.5f;

                for (int i = 0; i < _devices.Count; i++)
                {
                    _devices[i].IsActive = false;
                }
            }
        }

        #endregion

        #region Private Methods

        private bool CanThink()
        {
            if (_bot == null || _cache == null || _bot.IsDead || Time.time < _nextDecisionTime)
            {
                return false;
            }

            Player player = _bot.GetPlayer;
            return player != null && player.IsAI && !player.IsYourPlayer;
        }

        private float GetChaosBaitChance()
        {
            AIRefactoredBotOwner aiOwner = _cache.AIRefactoredBotOwner;
            if (aiOwner == null)
            {
                return 0f;
            }

            BotPersonalityProfile profile = aiOwner.PersonalityProfile;
            return profile != null ? profile.ChaosFactor * 0.25f : 0f;
        }

        private static bool IsLowVisibility()
        {
            float ambient = RenderSettings.ambientLight.grayscale;
            float fogDensity = RenderSettings.fog ? RenderSettings.fogDensity : 0f;

            return ambient < TacticalConfig.LightThreshold || fogDensity > TacticalConfig.FogThreshold;
        }

        private void ScanMods(Weapon weapon)
        {
            _devices.Clear();

            IEnumerable<Slot> slots = weapon.AllSlots;
            if (slots == null)
            {
                return;
            }

            foreach (Slot slot in slots)
            {
                if (slot == null)
                {
                    continue;
                }

                Item mod = slot.ContainedItem;
                if (mod == null || mod.Template == null || string.IsNullOrEmpty(mod.Template.Name))
                {
                    continue;
                }

                string name = mod.Template.Name.ToLowerInvariant();
                if (!IsTacticalName(name))
                {
                    continue;
                }

                switch (mod)
                {
                    case FlashlightItemClass f when f.Light != null:
                        _devices.Add(f.Light);
                        break;

                    case TacticalComboItemClass c when c.Light != null:
                        _devices.Add(c.Light);
                        break;

                    case LightLaserItemClass l when l.Light != null:
                        _devices.Add(l.Light);
                        break;
                }
            }
        }

        private static bool IsTacticalName(string name)
        {
            for (int i = 0; i < TacticalConfig.Keywords.Length; i++)
            {
                if (name.Contains(TacticalConfig.Keywords[i]))
                {
                    return true;
                }
            }

            return false;
        }

        #endregion

        #region Configuration

        private static class TacticalConfig
        {
            public const float CheckInterval = 2.0f;
            public const float FogThreshold = 0.5f;
            public const float LightThreshold = 0.3f;

            public static readonly string[] Keywords = { "light", "laser", "nvg", "thermal", "flash" };
        }

        #endregion
    }
}
