// <auto-generated>
//   AI-Refactored: BotVisionProfile.cs (Ultra-Platinum++ Overlay/Event-Only, Max Realism, June 2025)
//   SYSTEMATICALLY MANAGED. Realism: light/fog/flash/flare/squad overlays, null-guarded, zero-alloc, multiplayer/headless safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Defines a bot's visual perception profile.
    /// Simulates response to light, suppression, temporary blindness, fog, and overlays for realism.
    /// Used by <see cref="BotPerceptionSystem"/> and all sensory overlays.
    /// Fully null-free, bulletproof, zero-alloc in hot path, and supports dynamic blending.
    /// </summary>
    [Serializable]
    public sealed class BotVisionProfile
    {
        #region Constants

        private const float DefaultAdaptationSpeed = 1.25f;
        private const float DefaultAggressionResponse = 0.85f;
        private const float DefaultLightSensitivity = 1.0f;
        private const float DefaultMaxBlindness = 1.0f;
        private const float DefaultClarityRecoverySpeed = 0.3f;
        private const float DefaultFogSensitivity = 0.9f;
        private const float DefaultOverlayWeight = 1.0f;
        private const float DefaultVisionBias = 0f;

        #endregion

        #region Static

        /// <summary>
        /// Gets a singleton default profile for safe reuse.
        /// </summary>
        public static readonly BotVisionProfile Default = new BotVisionProfile();

        #endregion

        #region Properties

        /// <summary>
        /// How quickly the bot recovers from vision impairment (0.5–2.0; higher = faster).
        /// </summary>
        public float AdaptationSpeed { get; set; } = DefaultAdaptationSpeed;

        /// <summary>
        /// How aggressively the bot responds to impairment or sudden light changes (0–2).
        /// </summary>
        public float AggressionResponse { get; set; } = DefaultAggressionResponse;

        /// <summary>
        /// How sensitive the bot is to light sources, flashlights, and flares (0–2).
        /// </summary>
        public float LightSensitivity { get; set; } = DefaultLightSensitivity;

        /// <summary>
        /// Maximum level of temporary blindness the bot can experience (0–2).
        /// </summary>
        public float MaxBlindness { get; set; } = DefaultMaxBlindness;

        /// <summary>
        /// Speed at which clarity returns after blindness or suppression (0.1–1.5).
        /// </summary>
        public float ClarityRecoverySpeed { get; set; } = DefaultClarityRecoverySpeed;

        /// <summary>
        /// Sensitivity to fog/smoke overlays (0–2, higher = more affected by fog).
        /// </summary>
        public float FogSensitivity { get; set; } = DefaultFogSensitivity;

        /// <summary>
        /// Bias for vision overlays—positive for bright/alert, negative for dulled.
        /// Used for personality/squad blending and dynamic overlays.
        /// </summary>
        public float VisionBias { get; set; } = DefaultVisionBias;

        /// <summary>
        /// Blending factor for overlays and dynamic adjustments (0–2).
        /// </summary>
        public float OverlayWeight { get; set; } = DefaultOverlayWeight;

        #endregion

        #region Static Factories

        /// <summary>
        /// Creates a new vision profile with all defaults.
        /// </summary>
        public static BotVisionProfile CreateDefault()
        {
            return new BotVisionProfile();
        }

        /// <summary>
        /// Creates a new profile for a specific bot role/personality.
        /// </summary>
        public static BotVisionProfile CreateForRole(float adaptation, float aggression, float light, float maxBlind, float recovery, float fog = DefaultFogSensitivity, float bias = DefaultVisionBias, float weight = DefaultOverlayWeight)
        {
            return new BotVisionProfile
            {
                AdaptationSpeed = adaptation,
                AggressionResponse = aggression,
                LightSensitivity = light,
                MaxBlindness = maxBlind,
                ClarityRecoverySpeed = recovery,
                FogSensitivity = fog,
                VisionBias = bias,
                OverlayWeight = weight
            };
        }

        #endregion

        #region Reset and Copy

        /// <summary>
        /// Resets this profile to default values. Optionally resets aggression/overlay.
        /// </summary>
        public void Reset(bool resetAggression = true, bool resetOverlay = true)
        {
            AdaptationSpeed = DefaultAdaptationSpeed;
            LightSensitivity = DefaultLightSensitivity;
            MaxBlindness = DefaultMaxBlindness;
            ClarityRecoverySpeed = DefaultClarityRecoverySpeed;
            FogSensitivity = DefaultFogSensitivity;
            VisionBias = DefaultVisionBias;

            if (resetAggression)
                AggressionResponse = DefaultAggressionResponse;

            if (resetOverlay)
                OverlayWeight = DefaultOverlayWeight;
        }

        /// <summary>
        /// Copies all values from another profile instance.
        /// </summary>
        public void SetFrom(BotVisionProfile source)
        {
            if (ReferenceEquals(this, source) || source == null)
                return;

            AdaptationSpeed = source.AdaptationSpeed;
            AggressionResponse = source.AggressionResponse;
            LightSensitivity = source.LightSensitivity;
            MaxBlindness = source.MaxBlindness;
            ClarityRecoverySpeed = source.ClarityRecoverySpeed;
            FogSensitivity = source.FogSensitivity;
            VisionBias = source.VisionBias;
            OverlayWeight = source.OverlayWeight;
        }

        /// <summary>
        /// Blends values from another profile based on weight.
        /// </summary>
        public void BlendFrom(BotVisionProfile source, float weight)
        {
            if (ReferenceEquals(this, source) || source == null)
                return;
            float w = Mathf.Clamp01(weight);

            AdaptationSpeed = Mathf.Lerp(AdaptationSpeed, source.AdaptationSpeed, w);
            AggressionResponse = Mathf.Lerp(AggressionResponse, source.AggressionResponse, w);
            LightSensitivity = Mathf.Lerp(LightSensitivity, source.LightSensitivity, w);
            MaxBlindness = Mathf.Lerp(MaxBlindness, source.MaxBlindness, w);
            ClarityRecoverySpeed = Mathf.Lerp(ClarityRecoverySpeed, source.ClarityRecoverySpeed, w);
            FogSensitivity = Mathf.Lerp(FogSensitivity, source.FogSensitivity, w);
            VisionBias = Mathf.Lerp(VisionBias, source.VisionBias, w);
            OverlayWeight = Mathf.Lerp(OverlayWeight, source.OverlayWeight, w);
        }

        #endregion

        #region Utility

        /// <summary>
        /// Returns a safe human-readable description for debugging/inspection.
        /// </summary>
        public override string ToString()
        {
            return "[VisionProfile] Adapt=" + AdaptationSpeed.ToString("F2") +
                   " Aggro=" + AggressionResponse.ToString("F2") +
                   " Light=" + LightSensitivity.ToString("F2") +
                   " Blind=" + MaxBlindness.ToString("F2") +
                   " Recov=" + ClarityRecoverySpeed.ToString("F2") +
                   " Fog=" + FogSensitivity.ToString("F2") +
                   " Bias=" + VisionBias.ToString("F2") +
                   " Weight=" + OverlayWeight.ToString("F2");
        }

        #endregion
    }
}
