// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    /// <summary>
    /// Defines a bot's visual perception profile.
    /// Simulates response to light, suppression, and temporary blindness for realism.
    /// Used by <see cref="BotPerceptionSystem"/> to adjust sensory behavior dynamically.
    /// </summary>
    public sealed class BotVisionProfile
    {
        #region Defaults

        private static readonly float DefaultAdaptationSpeed = 1.25f;
        private static readonly float DefaultAggressionResponse = 0.85f;
        private static readonly float DefaultLightSensitivity = 1.0f;
        private static readonly float DefaultMaxBlindness = 1.0f;
        private static readonly float DefaultClarityRecoverySpeed = 0.3f;

        /// <summary>
        /// Gets a singleton default profile for safe reuse.
        /// </summary>
        public static readonly BotVisionProfile Default = new BotVisionProfile();

        #endregion

        #region Properties

        /// <summary>How quickly the bot recovers from vision impairment.</summary>
        public float AdaptationSpeed { get; set; } = DefaultAdaptationSpeed;

        /// <summary>How aggressively the bot responds to vision impairment or sudden light changes.</summary>
        public float AggressionResponse { get; set; } = DefaultAggressionResponse;

        /// <summary>How sensitive the bot is to light sources, flashlights, and flares.</summary>
        public float LightSensitivity { get; set; } = DefaultLightSensitivity;

        /// <summary>Maximum level of temporary blindness the bot can experience.</summary>
        public float MaxBlindness { get; set; } = DefaultMaxBlindness;

        /// <summary>Speed at which clarity returns after blindness (e.g. flashbang, suppression).</summary>
        public float ClarityRecoverySpeed { get; set; } = DefaultClarityRecoverySpeed;

        #endregion

        #region Factory

        /// <summary>
        /// Creates a new vision profile with default values.
        /// </summary>
        public static BotVisionProfile CreateDefault()
        {
            return new BotVisionProfile();
        }

        #endregion

        #region Reset

        /// <summary>
        /// Resets this profile to default values. Optionally resets aggression response.
        /// </summary>
        public void Reset(bool resetAggression = true)
        {
            this.AdaptationSpeed = DefaultAdaptationSpeed;
            this.LightSensitivity = DefaultLightSensitivity;
            this.MaxBlindness = DefaultMaxBlindness;
            this.ClarityRecoverySpeed = DefaultClarityRecoverySpeed;
            if (resetAggression)
            {
                this.AggressionResponse = DefaultAggressionResponse;
            }
        }

        #endregion

        #region Copy

        /// <summary>
        /// Copies all values from another profile instance.
        /// </summary>
        public void SetFrom(BotVisionProfile source)
        {
            if (ReferenceEquals(this, source) || source == null)
            {
                return;
            }
            this.AdaptationSpeed = source.AdaptationSpeed;
            this.AggressionResponse = source.AggressionResponse;
            this.LightSensitivity = source.LightSensitivity;
            this.MaxBlindness = source.MaxBlindness;
            this.ClarityRecoverySpeed = source.ClarityRecoverySpeed;
        }

        #endregion
    }
}
