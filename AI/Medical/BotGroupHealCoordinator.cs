// <auto-generated>
//   AI-Refactored: BotGroupHealCoordinator.cs (Dissonance-Proof Supreme Arbitration Overlay Edition, Ultra-Platinum+++, Max Expansion, June 2025)
//   Squad healing/support: Full squad/personality/pose/context/nav-awareness, arbitration-pooled, bulletproof, SPT/FIKA/headless/client safe, BotBrain-ticked. Absolutely no interfaces or Dissonance/IDissonancePlayer risk.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Arbitration-driven squad healing/support overlays. 100% Dissonance-proof, operates only on EFT.Player.
    /// </summary>
    public sealed class BotGroupHealCoordinator
    {
        #region Constants

        private const float HealCheckInterval = 3.1f;
        private const float HealthThreshold = 0.65f;
        private const float SelfHealThreshold = 0.80f;
        private const float HealTriggerRange = 13.0f;
        private static readonly float HealTriggerRangeSqr = HealTriggerRange * HealTriggerRange;
        private const float SupportVoiceCooldown = 5.1f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly string _profileId;
        private float _nextCheckTime;
        private float _lastSupportVoiceTime;
        private static readonly EBodyPart[] BodyParts = (EBodyPart[])Enum.GetValues(typeof(EBodyPart));
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private bool _isActive = true;

        #endregion

        #region Construction

        public BotGroupHealCoordinator(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                _isActive = false;
                Logger.LogError("[BotGroupHealCoordinator] Initialization failed: cache or bot is null. Disabling group heal logic for this bot.");
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            _profileId = EFTPlayerUtil.GetProfileId(_bot);
            _isActive = true;
            _lastSupportVoiceTime = -99f;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Evaluates squadmates for healing opportunities and executes coordinated group healing.
        /// Self-heals only if no squadmates are valid. Fully multiplayer and headless safe.
        /// </summary>
        public void Tick(float now)
        {
            if (!_isActive || _bot == null || _bot.IsDead || _bot.BotsGroup == null || now < _nextCheckTime)
                return;

            _nextCheckTime = now + HealCheckInterval;

            try
            {
                int memberCount = _bot.BotsGroup.MembersCount;
                if (memberCount <= 1) return;

                BotPersonalityProfile personality = BotRegistry.Get(_profileId);
                bool didHeal = false;

                for (int i = 0; i < memberCount; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidMate(mate)) continue;

                    Player matePlayer = EFTPlayerUtil.ResolvePlayer(mate);
                    if (matePlayer == null || !EFTPlayerUtil.IsValidGroupPlayer(matePlayer)) continue;

                    if (mate.Memory?.GoalEnemy != null || _bot.Memory?.GoalEnemy != null) continue;
                    if (_cache.PanicHandler?.IsPanicking == true) continue;

                    // Human-like personality/context/pose awareness
                    if (memberCount > 2 && UnityEngine.Random.value < (personality.Caution * 0.17f)) continue;
                    if (personality.CommunicationLevel < 0.21f && UnityEngine.Random.value < 0.11f) continue;
                    if (matePlayer.MovementContext?.PoseLevel > 1.8f && UnityEngine.Random.value < 0.22f) continue;

                    IHealthController health = matePlayer.HealthController;
                    if (health == null || !health.IsAlive || !NeedsHealing(health, HealthThreshold)) continue;

                    Vector3 botPos = EFTPlayerUtil.GetPosition(_bot);
                    Vector3 matePos = EFTPlayerUtil.GetPosition(mate);
                    if (!HasNavLineOfSight(botPos, matePos)) continue;

                    if (!BotOverlayManager.CanIssueMove(_bot, BotOverlayType.Medical)) continue;

                    if (_cache.SquadHealer != null && !_cache.SquadHealer.IsInProcess)
                    {
                        // Safe Dissonance-proof: always only EFT.Player through AsSafeIPlayer
                        var safeTarget = EFTPlayerUtil.AsSafeIPlayer(matePlayer);
                        if (safeTarget != null)
                        {
                            _cache.SquadHealer.HealAsk(safeTarget);
                            BotOverlayManager.RegisterMove(_bot, BotOverlayType.Medical);
                            TrySaySupport(EPhraseTrigger.Cooperation, now, personality);
                            didHeal = true;
                            break; // Only one squad heal per event
                        }
                    }

                    TrySaySupport(EPhraseTrigger.NeedHelp, now, personality);
                }

                // If no squadmate needed help: triage for self
                if (!didHeal && ShouldSelfHeal(personality))
                {
                    Player selfPlayer = EFTPlayerUtil.ResolvePlayer(_bot);
                    if (selfPlayer != null && EFTPlayerUtil.IsValid(selfPlayer) && NeedsHealing(selfPlayer.HealthController, SelfHealThreshold))
                    {
                        if (BotOverlayManager.CanIssueMove(_bot, BotOverlayType.Medical) &&
                            _cache.SquadHealer != null && !_cache.SquadHealer.IsInProcess)
                        {
                            var safeSelf = EFTPlayerUtil.AsSafeIPlayer(selfPlayer);
                            if (safeSelf != null)
                            {
                                _cache.SquadHealer.HealAsk(safeSelf);
                                BotOverlayManager.RegisterMove(_bot, BotOverlayType.Medical);
                                TrySaySupport(EPhraseTrigger.LootGeneric, now, personality);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotGroupHealCoordinator] Tick() failed: {ex}. Disabling group heal logic for this bot.");
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// True if mate is alive, not self, and within heal trigger range.
        /// </summary>
        private bool IsValidMate(BotOwner mate)
        {
            if (mate == null || mate.IsDead || ReferenceEquals(mate, _bot)) return false;
            try
            {
                Player selfPlayer = _bot?.GetPlayer as Player;
                Player matePlayer = mate?.GetPlayer as Player;
                if (selfPlayer == null || matePlayer == null) return false;

                Vector3 selfPos = EFTPlayerUtil.GetPosition(selfPlayer);
                Vector3 matePos = EFTPlayerUtil.GetPosition(matePlayer);
                float dx = matePos.x - selfPos.x, dz = matePos.z - selfPos.z;
                float distSqr = dx * dx + dz * dz;
                return distSqr <= HealTriggerRangeSqr;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotGroupHealCoordinator] IsValidMate() failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// True if any body part is below threshold.
        /// </summary>
        private static bool NeedsHealing(IHealthController health, float threshold)
        {
            try
            {
                for (int i = 0; i < BodyParts.Length; i++)
                {
                    EBodyPart part = BodyParts[i];
                    ValueStruct hp = health.GetBodyPartHealth(part);
                    if (hp.Maximum > 0f && hp.Current < hp.Maximum * threshold)
                        return true;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotGroupHealCoordinator] NeedsHealing() failed: {ex}");
            }
            return false;
        }

        /// <summary>
        /// Returns true if this bot should self-heal (personality/pose/context aware).
        /// </summary>
        private bool ShouldSelfHeal(BotPersonalityProfile p)
        {
            if (_bot == null || _bot.IsDead || _cache == null) return false;
            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking) return false;
            return (p.Caution > 0.3f || p.CommunicationLevel > 0.33f || p.Greed < 0.2f || UnityEngine.Random.value < 0.13f);
        }

        /// <summary>
        /// True if there is a navigation/LOS between the bot and target.
        /// </summary>
        private bool HasNavLineOfSight(Vector3 from, Vector3 to)
        {
            if (Mathf.Abs(from.y - to.y) > 2.5f) return false;
            if (Vector3.Distance(from, to) > HealTriggerRange) return false;
            RaycastHit hit;
            if (Physics.Linecast(from + Vector3.up * 1.5f, to + Vector3.up * 1.5f, out hit, LayerMask.GetMask("Default")))
            {
                return hit.collider == null || hit.distance >= Vector3.Distance(from, to) - 0.6f;
            }
            return true;
        }

        /// <summary>
        /// Squad support voice, personality/pose/context aware.
        /// </summary>
        private void TrySaySupport(EPhraseTrigger phrase, float now, BotPersonalityProfile p)
        {
            try
            {
                if (_bot != null && _bot.BotTalk != null && (now - _lastSupportVoiceTime > SupportVoiceCooldown))
                {
                    if (phrase == EPhraseTrigger.Cooperation && (p.CommunicationLevel > 0.51f || p.Caution > 0.45f))
                        _bot.BotTalk.TrySay(EPhraseTrigger.Cooperation);
                    else if (phrase == EPhraseTrigger.NeedHelp && p.Caution > 0.7f)
                        _bot.BotTalk.TrySay(EPhraseTrigger.NeedHelp);
                    else
                        _bot.BotTalk.TrySay(phrase);
                    _lastSupportVoiceTime = now;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotGroupHealCoordinator] TrySaySupport() failed: {ex}");
            }
        }

        #endregion
    }
}
