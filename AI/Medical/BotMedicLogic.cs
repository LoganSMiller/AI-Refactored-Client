// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot healing behavior using first aid, surgery, or stimulators.
    /// Supports healing squadmates using internal EFT BotHealAnotherTarget logic.
    /// </summary>
    public sealed class BotMedicLogic
    {
        #region Constants

        private const float HealCheckInterval = 1.5f;
        private const float HealSquadRange = 4f;

        #endregion

        #region Fields

        private readonly BotComponentCache _cache;
        private readonly BotInjurySystem _injurySystem;
        private readonly BotOwner _bot;

        private BotMedecine _med;
        private float _nextHealCheck;
        private bool _isHealing;

        #endregion

        #region Constructor

        public BotMedicLogic(BotComponentCache cache, BotInjurySystem injurySystem)
        {
            if (cache == null) throw new ArgumentNullException(nameof(cache));
            if (injurySystem == null) throw new ArgumentNullException(nameof(injurySystem));
            if (cache.Bot == null) throw new ArgumentException("Bot reference is null", nameof(cache));

            _cache = cache;
            _injurySystem = injurySystem;
            _bot = cache.Bot;
            _nextHealCheck = Time.time;

            if (_bot.HealAnotherTarget == null)
            {
                _bot.HealAnotherTarget = new BotHealAnotherTarget(_bot);
                _bot.HealAnotherTarget.OnHealAsked += OnHealAsked;
            }

            if (_bot.HealingBySomebody == null)
            {
                _bot.HealingBySomebody = new BotHealingBySomebody(_bot);
            }

            _med = _bot.Medecine ?? new BotMedecine(_bot);
        }

        #endregion

        #region Public API

        public void Reset()
        {
            _isHealing = false;
            _injurySystem.Reset();
            UnsubscribeFromFirstAid();
        }

        public void Tick(float time)
        {
            if (_isHealing || time < _nextHealCheck)
            {
                return;
            }

            if (_bot.IsDead || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
            {
                return;
            }

            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                return;
            }

            if (_bot.HealAnotherTarget != null && _bot.HealAnotherTarget.IsInProcess)
            {
                return;
            }

            _nextHealCheck = time + HealCheckInterval;

            _injurySystem.Tick(time);

            if (TryHealSquadmate())
            {
                return;
            }

            TrySelfHeal();
        }

        #endregion

        #region Healing Logic

        private bool TryHealSquadmate()
        {
            if (_bot.BotsGroup == null)
            {
                return false;
            }

            Player self = EFTPlayerUtil.ResolvePlayer(_bot);
            if (!EFTPlayerUtil.IsValidGroupPlayer(self))
            {
                return false;
            }

            Vector3 selfPos = EFTPlayerUtil.GetPosition(self);
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner mate = _bot.BotsGroup.Member(i);
                if (mate == null || mate == _bot || mate.IsDead)
                {
                    continue;
                }

                Player target = EFTPlayerUtil.ResolvePlayer(mate);
                if (!EFTPlayerUtil.IsValidGroupPlayer(target))
                {
                    continue;
                }

                Vector3 targetPos = EFTPlayerUtil.GetPosition(target);
                if ((targetPos - selfPos).sqrMagnitude > HealSquadRange * HealSquadRange)
                {
                    continue;
                }

                IPlayer iTarget = EFTPlayerUtil.AsSafeIPlayer(target);
                if (iTarget != null)
                {
                    _bot.HealAnotherTarget.HealAsk(iTarget);
                    return true;
                }
            }

            return false;
        }

        private void TrySelfHeal()
        {
            var firstAid = _med.FirstAid as BotFirstAidClass;
            var surgery = _med.SurgicalKit as GClass473;
            var stim = _med.Stimulators as GClass475;

            if (firstAid != null && firstAid.ShallStartUse())
            {
                _isHealing = true;
                TrySay(EPhraseTrigger.StartHeal);
                firstAid.OnEndApply += OnHealComplete;
                firstAid.TryApplyToCurrentPart();
                return;
            }

            if (surgery != null && surgery.ShallStartUse())
            {
                _isHealing = true;
                TrySay(EPhraseTrigger.StartHeal);
                surgery.ApplyToCurrentPart();
                return;
            }

            if (stim != null && stim.CanUseNow())
            {
                _isHealing = true;
                stim.StartApplyToTarget(OnStimComplete);
            }
        }

        #endregion

        #region Callbacks

        private void OnHealAsked(IPlayer target)
        {
            _isHealing = true;
            TrySay(EPhraseTrigger.StartHeal);
        }

        private void OnHealComplete(BotOwner _)
        {
            _isHealing = false;
            _injurySystem.Reset();
            UnsubscribeFromFirstAid();
        }

        private void OnSurgeryComplete(bool success)
        {
            _isHealing = false;
            if (_med.FirstAid is BotFirstAidClass fa)
            {
                fa.CheckParts();
            }
        }

        private void OnStimComplete(bool success)
        {
            _isHealing = false;
        }

        private void TrySay(EPhraseTrigger trigger)
        {
            if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
            {
                _bot.BotTalk.TrySay(trigger);
            }
        }

        private void UnsubscribeFromFirstAid()
        {
            if (_med.FirstAid is BotFirstAidClass fa)
            {
                fa.OnEndApply -= OnHealComplete;
            }
        }

        #endregion
    }
}
