// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Manages bot injuries, healing behavior, and surgical procedures on destroyed limbs.
    /// Prioritizes realistic timing, cover safety, and cooldown between medical actions.
    /// </summary>
    public sealed class BotInjurySystem
    {
        #region Constants

        private const float HealCooldown = 6f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotComponentCache _cache;

        private EBodyPart _injuredLimb;
        private float _lastHitTime;
        private float _nextHealTime;
        private bool _hasInjury;
        private bool _hasBlackLimb;

        #endregion

        #region Constructor

        public BotInjurySystem(BotComponentCache cache)
        {
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            this._cache = cache;
            this.Reset();
        }

        #endregion

        #region Public API

        public void OnHit(EBodyPart part, float damage)
        {
            BotOwner bot = this._cache.Bot;
            if (bot == null || bot.IsDead || bot.GetPlayer == null)
            {
                return;
            }

            IHealthController health = bot.GetPlayer.HealthController;
            if (health == null)
            {
                return;
            }

            this._lastHitTime = Time.time;
            this._nextHealTime = this._lastHitTime + HealCooldown;
            this._injuredLimb = part;
            this._hasInjury = true;
            this._hasBlackLimb = health.IsBodyPartDestroyed(part);
        }

        public void Reset()
        {
            this._injuredLimb = EBodyPart.Common;
            this._lastHitTime = -1f;
            this._nextHealTime = -1f;
            this._hasInjury = false;
            this._hasBlackLimb = false;
        }

        public bool ShouldHeal()
        {
            return this.ShouldHeal(Time.time);
        }

        public bool ShouldHeal(float time)
        {
            if (!this._hasInjury || !this._hasBlackLimb)
            {
                return false;
            }

            if (time < this._nextHealTime)
            {
                return false;
            }

            if (this._cache.PanicHandler != null && this._cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            if (this._cache.Combat != null && this._cache.Combat.IsInCombatState())
            {
                return false;
            }

            return true;
        }

        public void Tick(float time)
        {
            if (this.ShouldHeal(time))
            {
                this.TryUseMedicine();
            }
        }

        #endregion

        #region Internal Logic

        private void TryUseMedicine()
        {
            BotOwner bot = this._cache.Bot;
            if (bot == null || bot.IsDead || !this._hasInjury)
            {
                return;
            }

            Player player = bot.GetPlayer;
            if (player == null || player.HealthController == null)
            {
                return;
            }

            IHealthController health = player.HealthController;
            if (!health.IsBodyPartDestroyed(this._injuredLimb))
            {
                return;
            }

            GClass473 surgery = bot.Medecine.SurgicalKit as GClass473;
            if (surgery == null || !surgery.HaveWork || !surgery.ShallStartUse())
            {
                return;
            }

            bot.Sprint(false);
            bot.WeaponManager?.Selector?.TakePrevWeapon();
            bot.BotTalk?.TrySay(EPhraseTrigger.StartHeal);

            surgery.ApplyToCurrentPart();
            this.Reset();

            string nick = bot.Profile != null && bot.Profile.Info != null ? bot.Profile.Info.Nickname : "Unknown";
            Logger.LogDebug("[BotInjurySystem] 🛠 " + nick + " applied surgery to " + this._injuredLimb);
        }

        #endregion
    }
}
