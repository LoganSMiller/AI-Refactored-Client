// <auto-generated>
//   AI-Refactored: BotInjurySystem.cs (Supreme Arbitration Overlay, Ultra-Platinum+++, Max Realism/Features, June 2025)
//   All injury/bleed/medkit/surgery overlays handled through real BotMedecine (FirstAid/SurgicalKit). No fake types, zero disables, full bulletproof, no tick/coroutine spam, SPT/FIKA/headless/client safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Manages bot injuries, bleeds, healing overlays and surgery. Arbitration/event/overlay-only, bulletproof, SPT/FIKA/headless/client safe.
    /// </summary>
    public sealed class BotInjurySystem
    {
        #region Constants

        private const float HealCooldown = 6.3f;
        private const float HealRandomJitter = 1.5f;
        private const float ArbitrationWindow = 0.24f;
        private const float BleedPriorityDelay = 0.09f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private readonly BotComponentCache _cache;
        private float _lastHitTime;
        private float _nextHealTime;
        private float _lastArbTime;
        private float _lastBleedTime;
        private bool _hasFreshInjury;
        private bool _isActive = true;

        #endregion

        #region Construction

        public BotInjurySystem(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                _isActive = false;
                Logger.LogError("[BotInjurySystem] Initialization failed: cache or bot is null. Disabling injury system for this bot.");
                return;
            }
            _cache = cache;
            Reset();
        }

        #endregion

        #region Public API

        /// <summary>
        /// Call on every bot hit (not just black limb).
        /// </summary>
        public void OnHit(EBodyPart part, float damage)
        {
            if (!_isActive) return;
            try
            {
                BotOwner bot = _cache.Bot;
                Player player = bot?.GetPlayer;
                IHealthController health = player?.HealthController;
                if (health == null) return;

                _lastHitTime = Time.time;
                _nextHealTime = _lastHitTime + HealCooldown + UnityEngine.Random.Range(0f, HealRandomJitter);
                _hasFreshInjury = true;
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotInjurySystem] OnHit() failed: {ex}. Disabling injury logic for this bot.");
            }
        }

        public void Reset()
        {
            _lastHitTime = -1f;
            _nextHealTime = -1f;
            _lastArbTime = -1f;
            _lastBleedTime = -1f;
            _hasFreshInjury = false;
            _isActive = true;
        }

        /// <summary>
        /// Overlay/event entry point (called from BotBrain tick).
        /// </summary>
        public void Tick(float deltaTime, float now)
        {
            if (!_isActive) return;
            try
            {
                if (!CanOverlay(now)) return;

                BotOwner bot = _cache.Bot;
                var med = bot?.Medecine;
                if (med == null) return;

                // 1. Surgery: highest priority (black limb, destroyed part)
                if (med.SurgicalKit != null && med.SurgicalKit.ShallStartUse())
                {
                    ScheduleOverlay(now, ArbitrationWindow, () =>
                    {
                        try
                        {
                            bot.Sprint(false);
                            bot.WeaponManager?.Selector?.TakePrevWeapon();
                            med.SurgicalKit.ApplyToCurrentPart();
                            bot.BotTalk?.TrySay(EPhraseTrigger.StartHeal);
                            Logger.LogDebug($"[BotInjurySystem] 🛠 {bot.Profile?.Info?.Nickname} performed surgery.");
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError($"[BotInjurySystem] Surgery ApplyToCurrentPart() failed: {ex}");
                        }
                        Reset();
                    });
                    return;
                }

                // 2. Bleeding: use FirstAid for bleed overlays (bandage or medkit logic internal)
                if (med.FirstAid != null && med.FirstAid.IsBleeding && med.FirstAid.ShallStartUse())
                {
                    // Ensure bleed overlays are not spammed
                    if (now - _lastBleedTime > BleedPriorityDelay)
                    {
                        ScheduleOverlay(now, BleedPriorityDelay, () =>
                        {
                            try
                            {
                                bot.Sprint(false);
                                bot.WeaponManager?.Selector?.TakePrevWeapon();
                                med.FirstAid.TryApplyToCurrentPart();
                                bot.BotTalk?.TrySay(EPhraseTrigger.StartHeal);
                                Logger.LogDebug($"[BotInjurySystem] 🩸 {bot.Profile?.Info?.Nickname} applied FirstAid for bleed.");
                            }
                            catch (Exception ex)
                            {
                                Logger.LogError($"[BotInjurySystem] FirstAid TryApplyToCurrentPart() for bleed failed: {ex}");
                            }
                            _lastBleedTime = now;
                            Reset();
                        });
                        return;
                    }
                }

                // 3. Regular healing: FirstAid for non-bleed injuries (e.g. low HP on limb, non-black)
                if (med.FirstAid != null && med.FirstAid.Damaged && med.FirstAid.ShallStartUse())
                {
                    ScheduleOverlay(now, ArbitrationWindow, () =>
                    {
                        try
                        {
                            bot.Sprint(false);
                            bot.WeaponManager?.Selector?.TakePrevWeapon();
                            med.FirstAid.TryApplyToCurrentPart();
                            bot.BotTalk?.TrySay(EPhraseTrigger.StartHeal);
                            Logger.LogDebug($"[BotInjurySystem] 💉 {bot.Profile?.Info?.Nickname} applied FirstAid.");
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError($"[BotInjurySystem] FirstAid TryApplyToCurrentPart() failed: {ex}");
                        }
                        Reset();
                    });
                    return;
                }
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotInjurySystem] Tick() failed: {ex}. Disabling injury logic for this bot.");
            }
        }

        #endregion

        #region Internal Overlay Logic

        private void ScheduleOverlay(float now, float delay, Action action)
        {
            _lastArbTime = now;
            BotOverlayManager.RegisterMove(_cache.Bot, BotOverlayType.Medical);
            BotBrain.ScheduleAfter(_cache.Bot, UnityEngine.Random.Range(delay, delay + 0.13f), action);
        }

        public bool NeedsImmediateHeal()
        {
            return _isActive && _hasFreshInjury && Time.time >= _nextHealTime;
        }

        private bool CanOverlay(float now)
        {
            if (!_hasFreshInjury || now < _nextHealTime || (now - _lastArbTime < ArbitrationWindow))
                return false;
            BotOwner bot = _cache.Bot;
            if (bot == null || bot.IsDead) return false;
            if (_cache.PanicHandler?.IsPanicking == true) return false;
            if (_cache.Combat?.IsInCombatState() == true) return false;
            if (_cache.GroupBehavior?.IsInSquad == true && _cache.Combat != null && _cache.Combat.LastStateChangeTime + 1.3f > now)
                return false;
            return BotOverlayManager.CanIssueMove(_cache.Bot, BotOverlayType.Medical);
        }

        #endregion
    }
}
