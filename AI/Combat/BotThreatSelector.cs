// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Memory;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Selects and maintains the most viable enemy target based on distance, visibility, memory, and tactical realism.
    /// Prevents erratic switching and reinforces believable combat behavior.
    /// </summary>
    public sealed class BotThreatSelector
    {
        #region Constants

        private const float EvaluationCooldown = 0.35f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;
        private const float VisibilityBonus = 25f;
        private const float RecentSeenBonus = 10f;
        private const float BlindPenalty = 20f;
        private const float HiddenPenalty = 5f;
        private const float UnknownPenalty = 10f;
        private const float AggressionPersistenceWindow = 6f;
        private const float AggressionMaxBonus = 15f;
        private const float TargetSwitchThreshold = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotPersonalityProfile _profile;

        private float _lastTargetSwitchTime = -999f;
        private float _nextEvaluateTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected threat target, if any.
        /// </summary>
        public Player CurrentTarget { get; private set; }

        #endregion

        #region Constructor

        public BotThreatSelector(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.AIRefactoredBotOwner?.PersonalityProfile == null)
                throw new ArgumentNullException(nameof(cache), "[BotThreatSelector] Invalid component cache or bot.");

            this._cache = cache;
            this._bot = cache.Bot;
            this._profile = cache.AIRefactoredBotOwner.PersonalityProfile;
        }

        #endregion

        #region Public Methods

        public void Tick(float time)
        {
            if (time < this._nextEvaluateTime || this._bot == null || this._bot.IsDead || !this._bot.IsAI)
                return;

            this._nextEvaluateTime = time + EvaluationCooldown;

            var players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
                return;

            Player bestTarget = null;
            float bestScore = float.MinValue;

            for (int i = 0; i < players.Count; i++)
            {
                Player candidate = players[i];
                if (!EFTPlayerUtil.IsValid(candidate) ||
                    string.IsNullOrEmpty(candidate.ProfileId) ||
                    candidate.ProfileId == this._bot.ProfileId ||
                    !EFTPlayerUtil.IsEnemyOf(this._bot, candidate))
                {
                    continue;
                }

                float score = this.ScoreTarget(candidate, time);
                if (score > bestScore)
                {
                    bestScore = score;
                    bestTarget = candidate;
                }
            }

            if (bestTarget == null)
                return;

            if (this.CurrentTarget == null)
            {
                this.SetTarget(bestTarget, time);
                return;
            }

            float currentScore = this.ScoreTarget(this.CurrentTarget, time);
            float cooldown = SwitchCooldown * (1f - this._profile.AggressionLevel * 0.5f);

            if (bestScore > currentScore + TargetSwitchThreshold &&
                time > this._lastTargetSwitchTime + cooldown)
            {
                this.SetTarget(bestTarget, time);
            }
        }

        public void ResetTarget()
        {
            this.CurrentTarget = null;
        }

        public IPlayer GetPriorityTarget()
        {
            if (this.CurrentTarget != null)
            {
                IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(this.CurrentTarget);
                if (safe != null)
                    return safe;
            }

            string id = this._cache?.TacticalMemory?.GetMostRecentEnemyId();
            if (string.IsNullOrEmpty(id))
                return null;

            Player fallback = EFTPlayerUtil.ResolvePlayerById(id);
            return EFTPlayerUtil.IsValid(fallback) ? EFTPlayerUtil.AsSafeIPlayer(fallback) : null;
        }

        #endregion

        #region Private Methods

        private float ScoreTarget(Player candidate, float time)
        {
            Vector3 botPos = this._bot.Position;
            Vector3 targetPos = EFTPlayerUtil.GetPosition(candidate);
            float distance = Vector3.Distance(botPos, targetPos);
            if (distance > MaxScanDistance)
                return float.MinValue;

            float score = MaxScanDistance - distance;

            var controller = this._bot.EnemiesController;
            if (controller?.EnemyInfos != null)
            {
                IPlayer iTarget = EFTPlayerUtil.AsSafeIPlayer(candidate);
                if (controller.EnemyInfos.TryGetValue(iTarget, out var info) && info != null)
                {
                    if (info.IsVisible)
                    {
                        score += VisibilityBonus;
                        if (info.PersonalLastSeenTime + 2f > time)
                            score += RecentSeenBonus;

                        if (this._profile.Caution > 0.6f)
                            score += 5f;

                        if (this._cache.IsBlinded && this._cache.BlindUntilTime > time)
                            score -= BlindPenalty;
                    }
                    else
                    {
                        score -= HiddenPenalty;
                        if (this._profile.AggressionLevel > 0.7f)
                        {
                            float unseen = time - info.PersonalLastSeenTime;
                            if (unseen < AggressionPersistenceWindow)
                                score += Mathf.Lerp(0f, AggressionMaxBonus, 1f - (unseen / AggressionPersistenceWindow));
                        }
                    }
                }
                else
                {
                    score -= UnknownPenalty;
                }
            }

            return score;
        }

        private void SetTarget(Player target, float time)
        {
            this.CurrentTarget = target;
            this._lastTargetSwitchTime = time;

            string id = target.ProfileId;
            if (!string.IsNullOrEmpty(id))
            {
                this._cache.TacticalMemory?.RecordEnemyPosition(EFTPlayerUtil.GetPosition(target), "Target", id);
                IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(target);
                if (safe != null)
                    this._cache.LastShotTracker?.RegisterHitBy(safe);
            }
        }

        #endregion
    }
}
