// <auto-generated>
//   AI-Refactored: BotThreatSelector.cs (Max Realism Edition, May 2025)
//   Selects/prioritizes threats using live data, memory, personality, and squad logic.
//   Bulletproof: All failures locally isolated, no fallback AI, never disables, always multiplayer/headless safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Selects and prioritizes threats based on live awareness, memory, squad, and bot personality.
    /// Handles PMC-vs-PMC, squad/squad, and fallback-to-memory selection. No fallback disables, no AI disables.
    /// </summary>
    public sealed class BotThreatSelector
    {
        #region Constants

        private const float EvaluationCooldown = 0.29f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;
        private const float MinFriendDistance = 2.7f;
        private const float TargetSwitchThreshold = 9.5f;

        // Dynamic scoring bonuses/penalties
        private const float VisibilityBonus = 28f;
        private const float RecentSeenBonus = 14f;
        private const float SquadEnemyBonus = 11f;
        private const float BlindPenalty = 24f;
        private const float HiddenPenalty = 7f;
        private const float UnknownPenalty = 11f;

        private const float AggressionPersistenceWindow = 6.8f;
        private const float AggressionMaxBonus = 18f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotPersonalityProfile _profile;

        private float _lastTargetSwitchTime = -999f;
        private float _nextEvaluateTime;
        private Player _currentTarget;

        // For advanced: remember last few threats for fallback/multi-threat logic
        private readonly Queue<string> _recentTargetIds = new Queue<string>(3);

        #endregion

        #region Properties

        /// <summary>Current high-priority target for the bot.</summary>
        public Player CurrentTarget => _currentTarget;

        #endregion

        #region Constructor

        /// <summary>
        /// Creates a new threat selector for the provided bot component cache.
        /// </summary>
        public BotThreatSelector(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.AIRefactoredBotOwner == null)
                throw new ArgumentException("[BotThreatSelector] Cache or owner null.");

            _cache = cache;
            _bot = cache.Bot;
            _profile = cache.AIRefactoredBotOwner.PersonalityProfile ?? BotPersonalityPresets.GenerateProfile(PersonalityType.Balanced);
        }

        #endregion

        #region Main Evaluation

        /// <summary>
        /// Evaluate and update threat selection. Called every tick from BotBrain.
        /// </summary>
        public void Tick(float time)
        {
            if (time < _nextEvaluateTime || _bot == null || _bot.IsDead || !_bot.IsAI)
                return;

            try
            {
                _nextEvaluateTime = time + EvaluationCooldown;

                List<Player> players = GameWorldHandler.GetAllAlivePlayers();
                if (players == null || players.Count == 0)
                    return;

                Player bestTarget = null;
                float bestScore = float.MinValue;

                for (int i = 0; i < players.Count; i++)
                {
                    Player candidate = players[i];
                    if (!EFTPlayerUtil.IsValid(candidate) || candidate.ProfileId == _bot.ProfileId)
                        continue;
                    if (!IsProperEnemy(_bot, candidate))
                        continue;

                    float score = ScoreTarget(candidate, time);
                    if (score > bestScore)
                    {
                        bestScore = score;
                        bestTarget = candidate;
                    }
                }

                if (bestTarget == null)
                {
                    // Fallback: recent memory enemy, if any, even if out of sight
                    string lastEnemyId = _cache?.TacticalMemory?.GetMostRecentEnemyId();
                    if (!string.IsNullOrEmpty(lastEnemyId))
                    {
                        Player fallback = EFTPlayerUtil.ResolvePlayerById(lastEnemyId);
                        if (EFTPlayerUtil.IsValid(fallback) && IsProperEnemy(_bot, fallback))
                        {
                            SetTarget(fallback, time);
                        }
                    }
                    return;
                }

                // New target assignment logic: switching only on significant delta and after cooldown
                if (_currentTarget == null)
                {
                    SetTarget(bestTarget, time);
                    return;
                }

                float currentScore = ScoreTarget(_currentTarget, time);
                float cooldown = SwitchCooldown * (1f - (_profile.AggressionLevel * 0.5f));
                if (bestScore > currentScore + TargetSwitchThreshold && time > _lastTargetSwitchTime + cooldown)
                {
                    SetTarget(bestTarget, time);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in Tick(): {ex}");
            }
        }

        #endregion

        #region Target Scoring

        /// <summary>
        /// Scores a candidate target for prioritization based on proximity, visibility, squad, and memory.
        /// </summary>
        private float ScoreTarget(Player candidate, float time)
        {
            try
            {
                if (_bot == null || candidate == null)
                    return float.MinValue;

                Vector3 botPos = _bot.Position;
                Vector3 targetPos = EFTPlayerUtil.GetPosition(candidate);
                float distance = Vector3.Distance(botPos, targetPos);

                if (distance > MaxScanDistance)
                    return float.MinValue;

                float score = MaxScanDistance - distance;

                // Squad-based prioritization: if any squadmate is fighting this target, add bonus
                if (_bot.BotsGroup != null && _bot.BotsGroup.MembersCount > 1)
                {
                    for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                    {
                        var mate = _bot.BotsGroup.Member(i);
                        if (mate == null || mate == _bot) continue;
                        if (mate.Memory?.GoalEnemy?.Person is Player p && p.ProfileId == candidate.ProfileId)
                        {
                            score += SquadEnemyBonus;
                        }
                    }
                }

                // Avoid targeting friends by proximity
                if (_bot.BotsGroup != null && _bot.BotsGroup.MembersCount > 1)
                {
                    for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                    {
                        var mate = _bot.BotsGroup.Member(i);
                        if (mate == null || mate == _bot) continue;
                        if (Vector3.Distance(targetPos, mate.Position) < MinFriendDistance)
                        {
                            score -= HiddenPenalty;
                        }
                    }
                }

                EnemyInfo info = GetEnemyInfo(candidate);
                if (info != null)
                {
                    if (info.IsVisible)
                    {
                        score += VisibilityBonus;

                        if (info.PersonalLastSeenTime + 2.2f > time)
                            score += RecentSeenBonus;

                        if (_profile.Caution > 0.6f)
                            score += 5f;

                        if (_cache.IsBlinded && _cache.BlindUntilTime > time)
                            score -= BlindPenalty;
                    }
                    else
                    {
                        score -= HiddenPenalty;

                        if (_profile.AggressionLevel > 0.7f)
                        {
                            float unseen = time - info.PersonalLastSeenTime;
                            if (unseen < AggressionPersistenceWindow)
                            {
                                float bonus = Mathf.Lerp(0f, AggressionMaxBonus, 1f - (unseen / AggressionPersistenceWindow));
                                score += bonus;
                            }
                        }
                    }
                }
                else
                {
                    score -= UnknownPenalty;
                }

                // Panic heavily reduces confidence/priority in targets
                if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
                    score -= 10f;

                return score;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in ScoreTarget(): {ex}");
                return float.MinValue;
            }
        }

        /// <summary>
        /// Finds EnemyInfo for a candidate, based on all known sources (EFT memory, goal enemy, etc).
        /// </summary>
        private EnemyInfo GetEnemyInfo(Player candidate)
        {
            try
            {
                if (candidate == null || _bot?.EnemiesController == null)
                    return null;

                string id = candidate.ProfileId;
                if (string.IsNullOrEmpty(id))
                    return null;

                var enemyInfos = _bot.EnemiesController.EnemyInfos;
                if (enemyInfos != null)
                {
                    foreach (var kv in enemyInfos)
                    {
                        if (kv.Key is Player known && known.ProfileId == id)
                            return kv.Value;
                    }
                }

                if (_bot.Memory?.GoalEnemy?.Person?.ProfileId == id)
                    return _bot.Memory.GoalEnemy;

                return null;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in GetEnemyInfo(): {ex}");
                return null;
            }
        }

        #endregion

        #region Target Set & Fallback

        /// <summary>
        /// Assigns the provided Player as the current threat target.
        /// </summary>
        private void SetTarget(Player target, float time)
        {
            try
            {
                if (target == null)
                    return;

                _currentTarget = target;
                _lastTargetSwitchTime = time;

                string id = target.ProfileId;
                if (!string.IsNullOrEmpty(id))
                {
                    if (_recentTargetIds.Count == 3) _recentTargetIds.Dequeue();
                    _recentTargetIds.Enqueue(id);

                    _cache?.TacticalMemory?.RecordEnemyPosition(EFTPlayerUtil.GetPosition(target), "Target", id);
                    _cache?.LastShotTracker?.RegisterHit(id);
                }

                // Movement logic: suggest fallback cover position if not currently moving (not direct GoToPoint)
                if (_cache?.Movement != null &&
                    !_bot.IsDead &&
                    _bot.Mover != null &&
                    !_bot.Mover.IsMoving)
                {
                    if (BotNavHelper.TryGetSafeTarget(_bot, out Vector3 fallback) && IsVectorValid(fallback))
                    {
                        float cohesion = _profile?.Cohesion ?? 1.0f;
                        BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in SetTarget(): {ex}");
            }
        }

        /// <summary>
        /// Returns the current priority target, falling back to recent memory.
        /// </summary>
        public Player GetPriorityTarget()
        {
            try
            {
                if (EFTPlayerUtil.IsValid(_currentTarget))
                    return _currentTarget;

                string id = _cache?.TacticalMemory?.GetMostRecentEnemyId();
                if (string.IsNullOrEmpty(id))
                    return null;

                Player fallback = EFTPlayerUtil.ResolvePlayerById(id);
                return EFTPlayerUtil.IsValid(fallback) && IsProperEnemy(_bot, fallback) ? fallback : null;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in GetPriorityTarget(): {ex}");
                return null;
            }
        }

        public string GetTargetProfileId()
        {
            return _currentTarget?.ProfileId ?? string.Empty;
        }

        public void ResetTarget()
        {
            _currentTarget = null;
        }

        #endregion

        #region Enemy Eligibility

        /// <summary>
        /// Determines if candidate is a valid enemy for the bot (PMC-vs-PMC, squad checks, etc).
        /// </summary>
        private static bool IsProperEnemy(BotOwner self, Player candidate)
        {
            if (self == null || candidate == null)
                return false;
            if (candidate.ProfileId == self.ProfileId)
                return false;
            if (!candidate.IsAI && !self.IsAI)
                return false; // Only care about AI-vs-AI and AI-vs-player

            EPlayerSide selfSide = self.GetPlayer != null ? self.GetPlayer.Side : EPlayerSide.Savage;
            EPlayerSide targetSide = candidate.Side;

            if (selfSide != targetSide)
                return true; // Always enemy if sides differ

            // PMC-vs-PMC: Only enemy if not in same squad/group
            string selfGroup = self.GetPlayer?.Profile?.Info?.GroupId ?? string.Empty;
            string targetGroup = candidate.Profile?.Info?.GroupId ?? string.Empty;
            if (!string.IsNullOrEmpty(selfGroup) && !string.IsNullOrEmpty(targetGroup) && selfGroup == targetGroup)
                return false; // Same squad: do not target

            return true; // Otherwise, different squad PMCs are enemies
        }

        #endregion

        #region Helpers

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z) &&
                   Mathf.Abs(v.x) < 10000f && Mathf.Abs(v.y) < 10000f && Mathf.Abs(v.z) < 10000f;
        }

        #endregion
    }
}
