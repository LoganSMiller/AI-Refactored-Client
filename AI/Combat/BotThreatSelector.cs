// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Selects and maintains the most viable enemy target based on distance and visibility.
    /// Stores tactical memory and prevents excessive target switching for realism.
    /// </summary>
    public sealed class BotThreatSelector
    {
        private const float EvaluationCooldown = 0.35f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotPersonalityProfile _profile;

        private float _lastTargetSwitchTime = -999f;
        private float _nextEvaluateTime;

        /// <summary>
        /// Gets the currently selected threat target, if any.
        /// </summary>
        public Player? CurrentTarget { get; private set; }

        public BotThreatSelector(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
            this._profile = cache.AIRefactoredBotOwner?.PersonalityProfile
                            ?? throw new ArgumentNullException(nameof(cache.AIRefactoredBotOwner));
        }

        public void Tick(float time)
        {
            if (this._bot == null || this._bot.IsDead || !this._bot.IsAI || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            if (time < this._nextEvaluateTime)
            {
                return;
            }

            this._nextEvaluateTime = time + EvaluationCooldown;

            var players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
            {
                return;
            }

            Player? bestTarget = null;
            float bestScore = float.MinValue;

            for (int i = 0; i < players.Count; i++)
            {
                Player? candidate = players[i];
                if (!EFTPlayerUtil.IsValid(candidate))
                {
                    continue;
                }

                string? profileId = candidate.ProfileId;
                if (string.IsNullOrEmpty(profileId) || profileId == this._bot.ProfileId)
                {
                    continue;
                }

                if (!EFTPlayerUtil.IsEnemyOf(this._bot, candidate))
                {
                    continue;
                }

                float score = this.ScoreTarget(candidate, time);
                if (score > bestScore)
                {
                    bestScore = score;
                    bestTarget = candidate;
                }
            }

            if (bestTarget == null)
            {
                return;
            }

            if (this.CurrentTarget == null)
            {
                this.SetTarget(bestTarget, time);
                return;
            }

            float currentScore = this.ScoreTarget(this.CurrentTarget, time);
            float switchThreshold = 10f;
            float cooldown = SwitchCooldown * (1f - this._profile.AggressionLevel * 0.5f);

            if (bestScore > currentScore + switchThreshold &&
                time > this._lastTargetSwitchTime + cooldown)
            {
                this.SetTarget(bestTarget, time);
            }
        }

        public void ResetTarget()
        {
            this.CurrentTarget = null;
        }

        /// <summary>
        /// Gets the most viable current or recent target as a valid IPlayer reference.
        /// </summary>
        public IPlayer? GetPriorityTarget()
        {
            if (this.CurrentTarget != null)
            {
                IPlayer? iTarget = EFTPlayerUtil.AsSafeIPlayer(this.CurrentTarget);
                if (iTarget != null)
                {
                    return iTarget;
                }
            }

            if (this._cache != null && this._cache.TacticalMemory != null)
            {
                string? id = this._cache.TacticalMemory.GetMostRecentEnemyId();
                if (id != null)
                {
                    string trimmedId = id.Trim();
                    if (trimmedId.Length > 0)
                    {
                        Player? fallback = EFTPlayerUtil.ResolvePlayerById(trimmedId);
                        if (EFTPlayerUtil.IsValid(fallback))
                        {
                            return EFTPlayerUtil.AsSafeIPlayer(fallback);
                        }
                    }
                }
            }

            return null;
        }

        private float ScoreTarget(Player candidate, float time)
        {
            Vector3 botPos = this._bot.Position;
            Vector3 targetPos = EFTPlayerUtil.GetPosition(candidate);
            float distance = Vector3.Distance(botPos, targetPos);
            if (distance > MaxScanDistance)
            {
                return float.MinValue;
            }

            float score = MaxScanDistance - distance;

            if (this._bot.EnemiesController?.EnemyInfos != null)
            {
                IPlayer? iTarget = EFTPlayerUtil.AsSafeIPlayer(candidate);
                if (iTarget != null && this._bot.EnemiesController.EnemyInfos.TryGetValue(iTarget, out var info) && info != null)
                {
                    if (info.IsVisible)
                    {
                        score += 25f;

                        if (info.PersonalLastSeenTime + 2f > time)
                        {
                            score += 10f;
                        }

                        if (this._profile.Caution > 0.6f)
                        {
                            score += 5f;
                        }

                        if (this._cache.IsBlinded && this._cache.BlindUntilTime > time)
                        {
                            score -= 20f;
                        }
                    }
                    else
                    {
                        score -= 5f;

                        if (this._profile.AggressionLevel > 0.7f)
                        {
                            float unseenTime = time - info.PersonalLastSeenTime;
                            if (unseenTime < 6f)
                            {
                                score += Mathf.Lerp(0f, 15f, 1f - (unseenTime / 6f));
                            }
                        }
                    }
                }
                else
                {
                    score -= 10f;
                }
            }

            return score;
        }

        private void SetTarget(Player target, float time)
        {
            this.CurrentTarget = target;
            this._lastTargetSwitchTime = time;

            if (!string.IsNullOrEmpty(target.ProfileId))
            {
                this._cache.TacticalMemory?.RecordEnemyPosition(
                    EFTPlayerUtil.GetPosition(target),
                    "Target",
                    target.ProfileId);
            }

            IPlayer? safeIPlayer = EFTPlayerUtil.AsSafeIPlayer(target);
            if (safeIPlayer != null)
            {
                this._cache.LastShotTracker?.RegisterHitBy(safeIPlayer);
            }
        }
    }
}
