// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Selects and maintains the most viable enemy target based on distance and visibility.
    /// Stores tactical memory and prevents excessive target switching for realism.
    /// </summary>
    public sealed class BotThreatSelector
    {
        #region Constants

        private const float EvaluationCooldown = 0.35f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;

        #endregion

        #region Fields

        private readonly BotOwner bot;
        private readonly BotComponentCache cache;
        private readonly BotPersonalityProfile profile;
        private float lastTargetSwitchTime = -999f;
        private float nextEvaluateTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the currently selected threat target, if any.
        /// </summary>
        public IPlayer? CurrentTarget { get; private set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotThreatSelector"/> class.
        /// </summary>
        /// <param name="cache">Bot component cache containing references.</param>
        public BotThreatSelector(BotComponentCache cache)
        {
            this.cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this.bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
            this.profile = cache.AIRefactoredBotOwner?.PersonalityProfile
                           ?? throw new ArgumentNullException(nameof(cache.AIRefactoredBotOwner));
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Resets the current target selection.
        /// </summary>
        public void ResetTarget()
        {
            this.CurrentTarget = null;
        }

        /// <summary>
        /// Updates threat evaluation based on distance, visibility, and time.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (this.bot == null || this.bot.IsDead || !this.bot.IsAI || this.bot.GetPlayer == null)
            {
                return;
            }

            if (time < this.nextEvaluateTime)
            {
                return;
            }

            this.nextEvaluateTime = time + EvaluationCooldown;

            var players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
            {
                return;
            }

            IPlayer? bestTarget = null;
            var bestScore = float.MinValue;

            for (var i = 0; i < players.Count; i++)
            {
                var candidate = players[i];
                if (candidate == null ||
                    candidate.ProfileId == this.bot.ProfileId ||
                    candidate.HealthController?.IsAlive != true)
                {
                    continue;
                }

                if (this.bot.BotsGroup == null || !this.bot.BotsGroup.IsEnemy(candidate))
                {
                    continue;
                }

                var score = this.ScoreTarget(candidate, time);
                if (score > bestScore)
                {
                    bestScore = score;
                    bestTarget = candidate;
                }
            }

            if (bestTarget == null)
            {
                return;
            }

            if (this.CurrentTarget == null)
            {
                this.SetTarget(bestTarget, time);
                return;
            }

            var currentScore = this.ScoreTarget(this.CurrentTarget, time);
            var switchThreshold = 10f;
            var cooldown = SwitchCooldown * (1f - this.profile.AggressionLevel * 0.5f);

            if (bestScore > currentScore + switchThreshold && time > this.lastTargetSwitchTime + cooldown)
            {
                this.SetTarget(bestTarget, time);
            }
        }

        #endregion

        #region Private Methods

        private float ScoreTarget(IPlayer candidate, float time)
        {
            var distance = Vector3.Distance(this.bot.Position, candidate.Position);
            if (distance > MaxScanDistance)
            {
                return float.MinValue;
            }

            var score = MaxScanDistance - distance;

            var infos = this.bot.EnemiesController?.EnemyInfos;
            if (infos != null && infos.TryGetValue(candidate, out var info) && info != null)
            {
                if (info.IsVisible)
                {
                    score += 25f;

                    if (info.PersonalLastSeenTime + 2f > time)
                    {
                        score += 10f;
                    }

                    if (this.profile.Caution > 0.6f)
                    {
                        score += 5f;
                    }
                }
            }

            return score;
        }

        private void SetTarget(IPlayer target, float time)
        {
            this.CurrentTarget = target;
            this.lastTargetSwitchTime = time;

            this.cache.TacticalMemory?.RecordEnemyPosition(target.Position);
            this.cache.LastShotTracker?.RegisterHitBy(target);
        }

        #endregion
    }
}
