// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures are locally isolated, never disables bot, never triggers fallback AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using BepInEx.Logging;

    /// <summary>
    /// Selects and prioritizes threats based on real-time awareness, memory, and personality.
    /// Bulletproof: All errors are isolated; never disables bot, never triggers fallback AI.
    /// </summary>
    public sealed class BotThreatSelector
    {
        private const float EvaluationCooldown = 0.35f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;

        private const float VisibilityBonus = 25f;
        private const float RecentSeenBonus = 10f;
        private const float BlindPenalty = 20f;
        private const float HiddenPenalty = 5f;
        private const float UnknownPenalty = 10f;

        private const float AggressionPersistenceWindow = 6f;
        private const float AggressionMaxBonus = 15f;
        private const float TargetSwitchThreshold = 10f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotPersonalityProfile _profile;

        private float _lastTargetSwitchTime = -999f;
        private float _nextEvaluateTime;
        private Player _currentTarget;

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _hasLoggedConstructorError;

        public Player CurrentTarget => _currentTarget;

        public BotThreatSelector(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.AIRefactoredBotOwner == null)
            {
                if (!_hasLoggedConstructorError)
                {
                    Logger.LogWarning("[BotThreatSelector] Null cache, bot, or AIRefactoredBotOwner in constructor.");
                    _hasLoggedConstructorError = true;
                }
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            _profile = cache.AIRefactoredBotOwner.PersonalityProfile ?? BotPersonalityPresets.GenerateProfile(PersonalityType.Balanced);
        }

        /// <summary>
        /// Evaluates all visible threats and updates the bot's priority target in real-time, based on realism scoring.
        /// </summary>
        public void Tick(float time)
        {
            if (time < _nextEvaluateTime || _bot == null || _bot.IsDead || !_bot.IsAI)
                return;

            try
            {
                _nextEvaluateTime = time + EvaluationCooldown;

                var players = GameWorldHandler.GetAllAlivePlayers();
                if (players == null || players.Count == 0)
                    return;

                Player bestTarget = null;
                float bestScore = float.MinValue;

                for (int i = 0; i < players.Count; i++)
                {
                    Player candidate = players[i];
                    if (!EFTPlayerUtil.IsValid(candidate))
                        continue;

                    if (string.IsNullOrEmpty(candidate.ProfileId) || candidate.ProfileId == _bot.ProfileId)
                        continue;

                    if (!EFTPlayerUtil.IsEnemyOf(_bot, candidate))
                        continue;

                    float score = ScoreTarget(candidate, time);
                    if (score > bestScore)
                    {
                        bestScore = score;
                        bestTarget = candidate;
                    }
                }

                if (bestTarget == null)
                    return;

                if (_currentTarget == null)
                {
                    SetTarget(bestTarget, time);
                    return;
                }

                float currentScore = ScoreTarget(_currentTarget, time);
                float cooldown = SwitchCooldown * (1f - (_profile.AggressionLevel * 0.5f));

                // Realistic: Only switch if target score exceeds current by enough and cooldown elapsed
                if (bestScore > currentScore + TargetSwitchThreshold &&
                    time > _lastTargetSwitchTime + cooldown)
                {
                    SetTarget(bestTarget, time);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in Tick(): {ex}");
            }
        }

        /// <summary>
        /// Resets the current target (e.g., on death or forced mode).
        /// </summary>
        public void ResetTarget()
        {
            _currentTarget = null;
        }

        /// <summary>
        /// Gets the highest priority target, using memory if the live target is invalid.
        /// </summary>
        public Player GetPriorityTarget()
        {
            try
            {
                if (EFTPlayerUtil.IsValid(_currentTarget))
                    return _currentTarget;

                string id = _cache?.TacticalMemory?.GetMostRecentEnemyId();
                if (string.IsNullOrEmpty(id))
                    return null;

                Player fallback = EFTPlayerUtil.ResolvePlayerById(id);
                return EFTPlayerUtil.IsValid(fallback) ? fallback : null;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in GetPriorityTarget(): {ex}");
                return null;
            }
        }

        /// <summary>
        /// Returns the ProfileId of the current target, or empty string if none.
        /// </summary>
        public string GetTargetProfileId()
        {
            return _currentTarget?.ProfileId ?? string.Empty;
        }

        /// <summary>
        /// Calculates the realism score for a candidate player based on distance, visibility, memory, and current bot state.
        /// </summary>
        private float ScoreTarget(Player candidate, float time)
        {
            try
            {
                if (_bot == null || candidate == null)
                    return float.MinValue;

                Vector3 botPos = _bot.Position;
                Vector3 targetPos = EFTPlayerUtil.GetPosition(candidate);
                float distance = Vector3.Distance(botPos, targetPos);

                if (distance > MaxScanDistance)
                    return float.MinValue;

                float score = MaxScanDistance - distance;

                EnemyInfo info = GetEnemyInfo(candidate);
                if (info != null)
                {
                    if (info.IsVisible)
                    {
                        score += VisibilityBonus;

                        // Recently seen/peeked bonuses
                        if (info.PersonalLastSeenTime + 2f > time)
                            score += RecentSeenBonus;

                        if (_profile.Caution > 0.6f)
                            score += 5f;

                        if (_cache.IsBlinded && _cache.BlindUntilTime > time)
                            score -= BlindPenalty;
                    }
                    else
                    {
                        score -= HiddenPenalty;

                        // Aggressive bots "persist" on enemies that vanished recently
                        if (_profile.AggressionLevel > 0.7f)
                        {
                            float unseen = time - info.PersonalLastSeenTime;
                            if (unseen < AggressionPersistenceWindow)
                            {
                                float bonus = Mathf.Lerp(0f, AggressionMaxBonus, 1f - (unseen / AggressionPersistenceWindow));
                                score += bonus;
                            }
                        }
                    }
                }
                else
                {
                    score -= UnknownPenalty;
                }

                // Human-like adjustment: If current bot is panicking, reduce trust in unknowns
                if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
                {
                    score -= 8f;
                }

                return score;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in ScoreTarget(): {ex}");
                return float.MinValue;
            }
        }

        /// <summary>
        /// Returns the EnemyInfo for a candidate player using internal EFT memory.
        /// </summary>
        private EnemyInfo GetEnemyInfo(Player candidate)
        {
            try
            {
                if (candidate == null || _bot?.EnemiesController == null)
                    return null;

                string id = candidate.ProfileId;
                if (string.IsNullOrEmpty(id))
                    return null;

                var enemyInfos = _bot.EnemiesController.EnemyInfos;
                if (enemyInfos != null)
                {
                    foreach (var kv in enemyInfos)
                    {
                        if (kv.Key is Player known && known.ProfileId == id)
                            return kv.Value;
                    }
                }

                if (_bot.Memory?.GoalEnemy?.Person?.ProfileId == id)
                    return _bot.Memory.GoalEnemy;

                return null;
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in GetEnemyInfo(): {ex}");
                return null;
            }
        }

        /// <summary>
        /// Sets a new target and updates tactical memory/shot tracker.
        /// </summary>
        private void SetTarget(Player target, float time)
        {
            try
            {
                if (target == null)
                    return;

                _currentTarget = target;
                _lastTargetSwitchTime = time;

                string id = target.ProfileId;
                if (!string.IsNullOrEmpty(id))
                {
                    _cache?.TacticalMemory?.RecordEnemyPosition(EFTPlayerUtil.GetPosition(target), "Target", id);
                    _cache?.LastShotTracker?.RegisterHit(id);
                }

                if (_cache?.Movement != null &&
                    !_cache.Bot.IsDead &&
                    _cache.Bot.Mover != null &&
                    !_cache.Bot.Mover.IsMoving)
                {
                    if (BotNavHelper.TryGetSafeTarget(_cache.Bot, out var fallback) && IsVectorValid(fallback))
                    {
                        _cache.Bot.Mover.GoToPoint(fallback, true, 1.0f);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[BotThreatSelector] Exception in SetTarget(): {ex}");
            }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z) &&
                   Mathf.Abs(v.x) < 10000f && Mathf.Abs(v.y) < 10000f && Mathf.Abs(v.z) < 10000f;
        }
    }
}
