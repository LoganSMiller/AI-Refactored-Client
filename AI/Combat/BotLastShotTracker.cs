// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks recent shot and hit interactions for a bot.
    /// Used to inform suppression, retaliation, and fallback logic.
    /// </summary>
    public sealed class BotLastShotTracker
    {
        #region Constants

        private const float DefaultMemoryWindow = 10f;

        #endregion

        #region Fields

        private string? _lastAttackerId;
        private float _lastHitTime;

        private string? _lastTargetId;
        private float _lastShotTime;

        #endregion

        #region Public Methods

        /// <summary>
        /// Returns true if the specified profile was shot at recently by this bot.
        /// </summary>
        /// <param name="profileId">Profile ID of the target.</param>
        /// <param name="now">Optional override of current time.</param>
        /// <param name="memoryWindow">Memory window in seconds.</param>
        /// <returns>True if shot occurred within memory window.</returns>
        public bool DidRecentlyShoot(string? profileId, float now = -1f, float memoryWindow = DefaultMemoryWindow)
        {
            if (string.IsNullOrWhiteSpace(profileId) || string.IsNullOrWhiteSpace(this._lastTargetId))
            {
                return false;
            }

            if (!string.Equals(this._lastTargetId, profileId, StringComparison.Ordinal))
            {
                return false;
            }

            float currentTime = now >= 0f ? now : Time.time;
            return currentTime - this._lastShotTime <= memoryWindow;
        }

        /// <summary>
        /// Returns true if this bot was recently hit by the specified profile.
        /// </summary>
        /// <param name="profileId">Profile ID of attacker.</param>
        /// <param name="now">Optional override of current time.</param>
        /// <param name="memoryWindow">Memory window in seconds.</param>
        /// <returns>True if hit occurred within memory window.</returns>
        public bool WasRecentlyShotBy(string? profileId, float now = -1f, float memoryWindow = DefaultMemoryWindow)
        {
            if (string.IsNullOrWhiteSpace(profileId) || string.IsNullOrWhiteSpace(this._lastAttackerId))
            {
                return false;
            }

            if (!string.Equals(this._lastAttackerId, profileId, StringComparison.Ordinal))
            {
                return false;
            }

            float currentTime = now >= 0f ? now : Time.time;
            return currentTime - this._lastHitTime <= memoryWindow;
        }

        /// <summary>
        /// Registers that this bot was hit by the specified player.
        /// </summary>
        /// <param name="attacker">Attacking player instance.</param>
        public void RegisterHitBy(IPlayer? attacker)
        {
            if (attacker == null)
            {
                return;
            }

            string profileId = attacker.ProfileId;
            if (string.IsNullOrWhiteSpace(profileId))
            {
                return;
            }

            this._lastAttackerId = profileId;
            this._lastHitTime = Time.time;
        }

        /// <summary>
        /// Registers a shot fired by this bot at the specified target.
        /// </summary>
        /// <param name="target">Target player instance.</param>
        public void RegisterShot(IPlayer? target)
        {
            if (target == null)
            {
                return;
            }

            string profileId = target.ProfileId;
            if (string.IsNullOrWhiteSpace(profileId))
            {
                return;
            }

            this._lastTargetId = profileId;
            this._lastShotTime = Time.time;
        }

        /// <summary>
        /// Clears all recent shot and hit memory.
        /// </summary>
        public void Reset()
        {
            this._lastAttackerId = null;
            this._lastTargetId = null;
            this._lastHitTime = 0f;
            this._lastShotTime = 0f;
        }

        #endregion
    }
}
