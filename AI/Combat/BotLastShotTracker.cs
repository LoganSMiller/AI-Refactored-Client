// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Tracks recent shot and hit interactions for a bot.
    /// Used to inform suppression, retaliation, and fallback logic.
    /// Bulletproof: All logic is strictly null-guarded, errors never propagate.
    /// </summary>
    public sealed class BotLastShotTracker
    {
        #region Constants

        /// <summary>
        /// Default time (in seconds) to remember shots and hits.
        /// </summary>
        private static readonly float DefaultMemoryWindow = 10f;

        #endregion

        #region Fields

        private string _lastAttackerId = string.Empty;
        private float _lastHitTime = float.NegativeInfinity;

        private string _lastTargetId = string.Empty;
        private float _lastShotTime = float.NegativeInfinity;

        #endregion

        #region Public Methods

        /// <summary>
        /// Returns true if the specified profile was shot at recently by this bot.
        /// </summary>
        /// <param name="profileId">Target profile ID.</param>
        /// <param name="now">Override time, or -1 for Time.time.</param>
        /// <param name="memoryWindow">Memory window in seconds.</param>
        public bool DidRecentlyShoot(string profileId, float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId) || string.IsNullOrEmpty(_lastTargetId))
                    return false;

                if (!string.Equals(_lastTargetId, profileId, StringComparison.Ordinal))
                    return false;

                float timeWindow = memoryWindow > 0f ? memoryWindow : DefaultMemoryWindow;
                float currentTime = now >= 0f ? now : GetTime();

                return (currentTime - _lastShotTime) <= timeWindow;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Returns true if this bot was recently hit by the specified profile.
        /// </summary>
        /// <param name="profileId">Attacker profile ID.</param>
        /// <param name="now">Override time, or -1 for Time.time.</param>
        /// <param name="memoryWindow">Memory window in seconds.</param>
        public bool WasRecentlyShotBy(string profileId, float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId) || string.IsNullOrEmpty(_lastAttackerId))
                    return false;

                if (!string.Equals(_lastAttackerId, profileId, StringComparison.Ordinal))
                    return false;

                float timeWindow = memoryWindow > 0f ? memoryWindow : DefaultMemoryWindow;
                float currentTime = now >= 0f ? now : GetTime();

                return (currentTime - _lastHitTime) <= timeWindow;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Registers that this bot was hit by the specified profile ID.
        /// </summary>
        /// <param name="profileId">Attacker profile ID.</param>
        public void RegisterHit(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
                return;

            _lastAttackerId = profileId;
            _lastHitTime = GetTime();
        }

        /// <summary>
        /// Registers a shot fired by this bot at the specified profile ID.
        /// </summary>
        /// <param name="profileId">Target profile ID.</param>
        public void RegisterShot(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
                return;

            _lastTargetId = profileId;
            _lastShotTime = GetTime();
        }

        /// <summary>
        /// Clears all recent shot and hit memory.
        /// </summary>
        public void Reset()
        {
            _lastAttackerId = string.Empty;
            _lastTargetId = string.Empty;
            _lastHitTime = float.NegativeInfinity;
            _lastShotTime = float.NegativeInfinity;
        }

        #endregion

        #region Private Helpers

        /// <summary>
        /// Gets current time in seconds.
        /// </summary>
        private static float GetTime()
        {
            return Time.time;
        }

        #endregion
    }
}
