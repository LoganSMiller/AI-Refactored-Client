// <auto-generated>
//   AI-Refactored: BotLastShotTracker.cs (Max Realism, Beyond Diamond, May 2025)
//   Tracks incoming/outgoing fire with heat/decay, robust null-guards, ready for squad/suppression expansion.
//   All APIs bulletproofed, allocation-free, AIRefactored-style. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks recent shot and hit interactions for a bot, including body part, direction, and distance.
    /// Informs suppression, retaliation, squad contagion, and fallback logic.
    /// Bulletproof: All logic is strictly null-guarded; errors never propagate.
    /// </summary>
    public sealed class BotLastShotTracker
    {
        #region Constants

        private const float DefaultMemoryWindow = 10f;
        private const float MinMemoryWindow = 2.5f;
        private const float MaxMemoryWindow = 25f;

        #endregion

        #region State

        private string _lastAttackerId = string.Empty;
        private float _lastHitTime = float.NegativeInfinity;
        private EBodyPart _lastHitPart = EBodyPart.Common;
        private float _lastHitDistance = -1f;
        private Vector3 _lastHitDirection = Vector3.zero;

        private string _lastTargetId = string.Empty;
        private float _lastShotTime = float.NegativeInfinity;
        private float _lastShotDistance = -1f;
        private Vector3 _lastShotDirection = Vector3.zero;

        // Squad-aware suppression expansion
        private string _lastSquadSuppressorId = string.Empty;
        private float _lastSquadSuppressedTime = float.NegativeInfinity;

        #endregion

        #region Public API

        /// <summary>
        /// Checks if the bot has recently shot at the provided profile.
        /// </summary>
        public bool DidRecentlyShoot(string profileId, float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId) || string.IsNullOrEmpty(_lastTargetId))
                    return false;
                if (!string.Equals(_lastTargetId, profileId, StringComparison.Ordinal))
                    return false;
                float time = now >= 0f ? now : Time.time;
                float window = GetMemoryWindow(memoryWindow);
                return time >= _lastShotTime && (time - _lastShotTime) <= window;
            }
            catch { return false; }
        }

        /// <summary>
        /// Checks if the bot was recently hit by the provided profile.
        /// </summary>
        public bool WasRecentlyShotBy(string profileId, float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId) || string.IsNullOrEmpty(_lastAttackerId))
                    return false;
                if (!string.Equals(_lastAttackerId, profileId, StringComparison.Ordinal))
                    return false;
                float time = now >= 0f ? now : Time.time;
                float window = GetMemoryWindow(memoryWindow);
                return time >= _lastHitTime && (time - _lastHitTime) <= window;
            }
            catch { return false; }
        }

        /// <summary>
        /// Checks if the bot was recently suppressed by squad fire.
        /// </summary>
        public bool WasRecentlySquadSuppressed(string profileId, float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId) || string.IsNullOrEmpty(_lastSquadSuppressorId))
                    return false;
                if (!string.Equals(_lastSquadSuppressorId, profileId, StringComparison.Ordinal))
                    return false;
                float time = now >= 0f ? now : Time.time;
                float window = GetMemoryWindow(memoryWindow);
                return time >= _lastSquadSuppressedTime && (time - _lastSquadSuppressedTime) <= window;
            }
            catch { return false; }
        }

        /// <summary>
        /// Registers a hit received by this bot.
        /// </summary>
        public void RegisterHit(string profileId, EBodyPart hitPart = EBodyPart.Common, float distance = -1f, Vector3 direction = default(Vector3))
        {
            try
            {
                if (string.IsNullOrEmpty(profileId))
                    return;

                _lastAttackerId = profileId;
                _lastHitTime = Time.time;
                _lastHitPart = hitPart;
                _lastHitDistance = distance;
                _lastHitDirection = direction;
            }
            catch { }
        }

        /// <summary>
        /// Registers a shot fired by this bot.
        /// </summary>
        public void RegisterShot(string profileId, float distance = -1f, Vector3 direction = default(Vector3))
        {
            try
            {
                if (string.IsNullOrEmpty(profileId))
                    return;

                _lastTargetId = profileId;
                _lastShotTime = Time.time;
                _lastShotDistance = distance;
                _lastShotDirection = direction;
            }
            catch { }
        }

        /// <summary>
        /// Registers that the bot was suppressed by squad fire.
        /// </summary>
        public void RegisterSquadSuppressed(string profileId)
        {
            try
            {
                if (string.IsNullOrEmpty(profileId))
                    return;
                _lastSquadSuppressorId = profileId;
                _lastSquadSuppressedTime = Time.time;
            }
            catch { }
        }

        /// <summary>
        /// Returns a "heat" factor (0..1) for how recently the bot was hit.
        /// </summary>
        public float GetRecentHitHeat(float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                float time = now >= 0f ? now : Time.time;
                float delta = time - _lastHitTime;
                float window = GetMemoryWindow(memoryWindow);
                if (delta > window || delta < 0f)
                    return 0f;
                return 1f - Mathf.Clamp01(delta / window);
            }
            catch { return 0f; }
        }

        /// <summary>
        /// Returns a "heat" factor (0..1) for how recently the bot fired a shot.
        /// </summary>
        public float GetRecentShotHeat(float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                float time = now >= 0f ? now : Time.time;
                float delta = time - _lastShotTime;
                float window = GetMemoryWindow(memoryWindow);
                if (delta > window || delta < 0f)
                    return 0f;
                return 1f - Mathf.Clamp01(delta / window);
            }
            catch { return 0f; }
        }

        /// <summary>
        /// Returns a "heat" factor (0..1) for recent squad suppression event.
        /// </summary>
        public float GetRecentSquadSuppressionHeat(float now = -1f, float memoryWindow = -1f)
        {
            try
            {
                float time = now >= 0f ? now : Time.time;
                float delta = time - _lastSquadSuppressedTime;
                float window = GetMemoryWindow(memoryWindow);
                if (delta > window || delta < 0f)
                    return 0f;
                return 1f - Mathf.Clamp01(delta / window);
            }
            catch { return 0f; }
        }

        /// <summary>
        /// Resets all tracking data for this bot.
        /// </summary>
        public void Reset()
        {
            _lastAttackerId = string.Empty;
            _lastTargetId = string.Empty;
            _lastHitTime = float.NegativeInfinity;
            _lastShotTime = float.NegativeInfinity;
            _lastHitPart = EBodyPart.Common;
            _lastHitDistance = -1f;
            _lastHitDirection = Vector3.zero;
            _lastShotDistance = -1f;
            _lastShotDirection = Vector3.zero;
            _lastSquadSuppressorId = string.Empty;
            _lastSquadSuppressedTime = float.NegativeInfinity;
        }

        #endregion

        #region Exposed Properties

        /// <summary>Gets the last attacker's profile ID.</summary>
        public string LastAttackerId => _lastAttackerId;

        /// <summary>Gets the time when the bot was last hit.</summary>
        public float LastHitTime => _lastHitTime;

        /// <summary>Gets the last body part hit.</summary>
        public EBodyPart LastHitPart => _lastHitPart;

        /// <summary>Gets the distance from which the bot was last hit.</summary>
        public float LastHitDistance => _lastHitDistance;

        /// <summary>Gets the direction of the last hit.</summary>
        public Vector3 LastHitDirection => _lastHitDirection;

        /// <summary>Gets the last target's profile ID.</summary>
        public string LastTargetId => _lastTargetId;

        /// <summary>Gets the time when the bot last fired a shot.</summary>
        public float LastShotTime => _lastShotTime;

        /// <summary>Gets the distance to the last target shot at.</summary>
        public float LastShotDistance => _lastShotDistance;

        /// <summary>Gets the direction of the last shot fired.</summary>
        public Vector3 LastShotDirection => _lastShotDirection;

        /// <summary>Gets the last squad suppressor's profile ID.</summary>
        public string LastSquadSuppressorId => _lastSquadSuppressorId;

        /// <summary>Gets the time when the bot was last suppressed by a squadmate.</summary>
        public float LastSquadSuppressedTime => _lastSquadSuppressedTime;

        #endregion

        #region Helpers

        private float GetMemoryWindow(float memoryWindow)
        {
            if (memoryWindow > 0f)
                return Mathf.Clamp(memoryWindow, MinMemoryWindow, MaxMemoryWindow);
            return DefaultMemoryWindow;
        }

        #endregion
    }
}
