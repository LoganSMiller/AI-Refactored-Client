// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using EFT;
    using EFT.HealthSystem;
    using EFT.InventoryLogic;
    using UnityEngine;

    using Random = UnityEngine.Random;

    /// <summary>
    /// Controls bot firing, aiming, fire mode selection, and fallback behavior.
    /// Dynamically adjusts based on distance, suppression, weapon state, and bot personality.
    /// </summary>
    public sealed class BotFireLogic
    {
        #region Constants

        private const float MaxAimPitch = 70f;

        private static readonly EBodyPart[] AllBodyParts = (EBodyPart[])Enum.GetValues(typeof(EBodyPart));

        private static readonly Dictionary<string, float> WeaponTypeRanges = new Dictionary<string, float>(StringComparer.OrdinalIgnoreCase)
        {
            { "sniper", 180f },
            { "marksman", 150f },
            { "rifle", 120f },
            { "assault", 100f },
            { "smg", 75f },
            { "shotgun", 50f },
            { "pistol", 35f }
        };

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private Vector3 _idleLookDirection = Vector3.forward;
        private float _lastLookAroundTime;
        private float _nextDecisionTime;

        #endregion

        #region Constructor

        public BotFireLogic(BotOwner bot, BotComponentCache cache)
        {
            _bot = bot ?? throw new ArgumentNullException(nameof(bot));
            _cache = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        #endregion

        #region Public API

        /// <summary>
        /// Updates the bot's aiming, fire decision, and fallback behavior each frame.
        /// </summary>
        public void Tick(float time)
        {
            if (_bot == null || _bot.IsDead || !_bot.IsAI || _bot.Memory == null)
            {
                return;
            }

            BotWeaponManager? weaponManager = _bot.WeaponManager;
            ShootData? shootData = _bot.ShootData;
            BotWeaponInfo? weaponInfo = weaponManager?._currentWeaponInfo;
            Weapon? weapon = weaponInfo?.weapon;
            GClass592? settings = _bot.Settings?.FileSettings?.Core;
            BotPersonalityProfile? profile = BotRegistry.Get(_bot.ProfileId);

            if (weaponManager == null || shootData == null || weaponInfo == null || weapon == null || settings == null || profile == null)
            {
                return;
            }

            IPlayer? target = _cache.ThreatSelector?.CurrentTarget ?? _bot.Memory.GoalEnemy?.Person;
            Vector3 aimPosition = GetValidatedAimPosition(target, time);

            UpdateBotAiming(aimPosition);

            if (target?.HealthController?.IsAlive != true)
            {
                return;
            }

            float distance = Vector3.Distance(_bot.Position, aimPosition);
            float weaponRange = EstimateWeaponRange(weapon);
            float maxRange = Mathf.Min(profile.EngagementRange, weaponRange, 200f);

            if (_bot.Memory.IsUnderFire && GetHealthRatio() <= profile.RetreatThreshold)
            {
                TriggerFallback();
                return;
            }

            if (distance > maxRange)
            {
                if (Random.value < profile.ChaosFactor)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, aimPosition, false, profile.Cohesion);
                }
                return;
            }

            if (time < _nextDecisionTime)
            {
                return;
            }

            _nextDecisionTime = time + GetBurstCadence(profile);

            if (weaponInfo.BulletCount <= 0 && !weaponInfo.CheckHaveAmmoForReload())
            {
                weaponManager.Selector.TryChangeWeaponCauseNoAmmo();
                weaponManager.Melee.Activate();
                return;
            }

            ApplyFireMode(weaponInfo, weapon, distance, profile, settings);

            if (weaponManager.IsWeaponReady)
            {
                shootData.Shoot();
                _cache.LastShotTracker?.RegisterShot(target);
            }
        }

        #endregion

        #region Aiming

        private void UpdateBotAiming(Vector3 aimPosition)
        {
            Vector3 direction = aimPosition - _bot.Position;
            if (direction == Vector3.zero)
            {
                return;
            }

            Quaternion targetRotation = Quaternion.LookRotation(direction);
            Vector3 euler = targetRotation.eulerAngles;
            euler.x = Mathf.Clamp(euler.x > 180f ? euler.x - 360f : euler.x, -MaxAimPitch, MaxAimPitch);

            _bot.AimingManager?.CurrentAiming?.SetTarget(Quaternion.Euler(euler) * Vector3.forward);
        }

        private Vector3 GetValidatedAimPosition(IPlayer? target, float time)
        {
            if (target != null && target.HealthController?.IsAlive == true && target.Transform != null)
            {
                Vector3 targetPos = target.Transform.position;
                if (targetPos != Vector3.zero)
                {
                    return targetPos;
                }
            }

            if (_bot.Memory?.LastEnemy != null && _bot.Memory.LastEnemy.CurrPosition != Vector3.zero)
            {
                return _bot.Memory.LastEnemy.CurrPosition;
            }

            if (time - _lastLookAroundTime > 1.5f)
            {
                float yaw = Random.Range(-75f, 75f);
                float pitch = Random.Range(-10f, 10f);
                Quaternion offset = Quaternion.Euler(pitch, yaw, 0f);
                _idleLookDirection = offset * _bot.Transform.forward;
                _lastLookAroundTime = time;
            }

            return _bot.Position + _idleLookDirection.normalized * 10f;
        }

        #endregion

        #region Weapon Handling

        private void ApplyFireMode(BotWeaponInfo info, Weapon weapon, float distance, BotPersonalityProfile profile, GClass592 settings)
        {
            if (distance <= 40f)
            {
                SetFireMode(info, Weapon.EFireMode.fullauto);
                RecoverAccuracy(settings);
            }
            else if (distance <= 100f && SupportsFireMode(weapon, Weapon.EFireMode.burst))
            {
                SetFireMode(info, Weapon.EFireMode.burst);
                ApplyScatter(settings, true, profile);
            }
            else
            {
                SetFireMode(info, Weapon.EFireMode.single);
                ApplyScatter(settings, true, profile);
            }
        }

        private void SetFireMode(BotWeaponInfo info, Weapon.EFireMode mode)
        {
            if (info.weapon.SelectedFireMode != mode)
            {
                info.ChangeFireMode(mode);
            }
        }

        private bool SupportsFireMode(Weapon weapon, Weapon.EFireMode mode)
        {
            foreach (var availableMode in weapon.WeapFireType)
            {
                if (availableMode == mode)
                {
                    return true;
                }
            }
            return false;
        }

        private void RecoverAccuracy(GClass592 settings)
        {
            settings.ScatteringPerMeter *= 0.95f;
            settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter, 0.4f, 3.0f);
        }

        private void ApplyScatter(GClass592 settings, bool underFire, BotPersonalityProfile profile)
        {
            float composure = _cache.PanicHandler?.GetComposureLevel() ?? 1f;
            float scatterPenalty = underFire ? (1f - profile.AccuracyUnderFire) * (1f - composure) : 0f;
            float scatterFactor = 1.1f + scatterPenalty;

            settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter * scatterFactor, 0.6f, 3.5f);
        }

        private float EstimateWeaponRange(Weapon weapon)
        {
            if (weapon?.Template?.Name == null)
            {
                return 90f;
            }

            string name = weapon.Template.Name;

            foreach (var kvp in WeaponTypeRanges)
            {
                if (name.IndexOf(kvp.Key, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    return kvp.Value;
                }
            }

            return 90f;
        }

        #endregion

        #region Utilities

        private float GetBurstCadence(BotPersonalityProfile profile)
        {
            float baseDelay = Mathf.Lerp(0.75f, 0.25f, profile.AggressionLevel);
            float reactionDelay = Mathf.Lerp(0.15f, 0.35f, 1f - profile.ReactionTime);
            float chaosOffset = Random.Range(-0.08f, 0.2f) * profile.ChaosFactor;

            return Mathf.Clamp(baseDelay + reactionDelay + chaosOffset, 0.15f, 1.1f);
        }

        private float GetHealthRatio()
        {
            HealthControllerClass? health = _bot.HealthController as HealthControllerClass;
            if (health == null || health.Dictionary_0 == null)
            {
                return 1f;
            }

            float current = 0f;
            float maximum = 0f;

            for (int i = 0; i < AllBodyParts.Length; i++)
            {
                EBodyPart part = AllBodyParts[i];
                if (health.Dictionary_0.TryGetValue(part, out var state))
                {
                    current += state.Health.Current;
                    maximum += state.Health.Maximum;
                }
            }

            return maximum > 0f ? current / maximum : 1f;
        }

        private void TriggerFallback()
        {
            if (_cache.Pathing == null)
            {
                return;
            }

            List<Vector3> path = BotCoverRetreatPlanner.GetCoverRetreatPath(
                _bot,
                _bot.LookDirection.normalized,
                _cache.Pathing);

            if (path.Count < 2)
            {
                return;
            }

            Vector3 fallback = path[path.Count - 1];

            BotMovementHelper.SmoothMoveTo(_bot, fallback, false);
            BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);

            _bot.BotTalk?.TrySay(EPhraseTrigger.OnLostVisual);
        }

        #endregion
    }
}
