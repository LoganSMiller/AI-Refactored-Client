// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks panic events, visible enemies, and squad losses to trigger escalation behavior.
    /// Applies tuning changes and personality adaptations based on threat severity.
    /// </summary>
    public sealed class BotThreatEscalationMonitor
    {
        #region Constants

        private const float CheckInterval = 1.0f;
        private const float PanicDurationThreshold = 4.0f;
        private const float SquadCasualtyThreshold = 0.4f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private BotOwner? bot;
        private bool hasEscalated;
        private float lastCheckTime = -1f;
        private float panicStartTime = -1f;

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the monitor with the specified bot owner.
        /// </summary>
        /// <param name="botOwner">The bot to monitor.</param>
        public void Initialize(BotOwner botOwner)
        {
            this.bot = botOwner ?? throw new ArgumentNullException(nameof(botOwner));
        }

        /// <summary>
        /// Records the time when panic behavior was triggered.
        /// </summary>
        public void NotifyPanicTriggered()
        {
            if (this.panicStartTime < 0f)
            {
                this.panicStartTime = Time.time;
            }
        }

        /// <summary>
        /// Updates escalation evaluation every frame.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (this.hasEscalated || !this.IsValid() || time < this.lastCheckTime)
            {
                return;
            }

            this.lastCheckTime = time + CheckInterval;

            if (this.ShouldEscalate(time))
            {
                this.EscalateBot();
            }
        }

        #endregion

        #region Private Methods

        private bool IsValid()
        {
            var botRef = this.bot;
            return botRef != null && !botRef.IsDead && botRef.GetPlayer?.IsAI == true;
        }

        private bool PanicDurationExceeded(float time)
        {
            return this.panicStartTime >= 0f && (time - this.panicStartTime) > PanicDurationThreshold;
        }

        private bool MultipleEnemiesVisible()
        {
            var infos = this.bot?.EnemiesController?.EnemyInfos;
            return infos != null && infos.Count >= 2;
        }

        private bool SquadHasLostTeammates()
        {
            var group = this.bot?.BotsGroup;
            if (group == null)
            {
                return false;
            }

            var total = group.MembersCount;
            if (total <= 1)
            {
                return false;
            }

            var dead = 0;
            for (var i = 0; i < total; i++)
            {
                var member = group.Member(i);
                if (member == null || member.IsDead)
                {
                    dead++;
                }
            }

            return dead >= Mathf.CeilToInt(total * SquadCasualtyThreshold);
        }

        private bool ShouldEscalate(float time)
        {
            return this.PanicDurationExceeded(time)
                || this.MultipleEnemiesVisible()
                || this.SquadHasLostTeammates();
        }

        private void EscalateBot()
        {
            var botRef = this.bot;
            if (botRef == null)
            {
                return;
            }

            this.hasEscalated = true;
            var nickname = botRef.Profile?.Info?.Nickname ?? "Unknown";

            Logger.LogInfo($"[AIRefactored-Escalation] Escalating behavior for bot '{nickname}'.");

            AIOptimizationManager.Reset(botRef);
            AIOptimizationManager.Apply(botRef);

            this.ApplyEscalationTuning(botRef);
            this.ApplyPersonalityTuning(botRef);
        }

        private void ApplyEscalationTuning(BotOwner botRef)
        {
            var settings = botRef.Settings?.FileSettings;
            if (settings == null)
            {
                return;
            }

            var shoot = settings.Shoot;
            if (shoot != null)
            {
                shoot.RECOIL_PER_METER = Mathf.Clamp(shoot.RECOIL_PER_METER * 0.85f, 0.1f, 2f);
            }

            var mind = settings.Mind;
            if (mind != null)
            {
                mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(mind.DIST_TO_FOUND_SQRT * 1.2f, 200f, 800f);
                mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(mind.ENEMY_LOOK_AT_ME_ANG * 0.75f, 5f, 45f);
                mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 = Mathf.Clamp(
                    mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 + 20f,
                    0f,
                    100f);
            }

            var look = settings.Look;
            if (look != null)
            {
                look.MAX_VISION_GRASS_METERS = Mathf.Clamp(look.MAX_VISION_GRASS_METERS + 5f, 5f, 40f);
            }

            Logger.LogInfo($"[AIRefactored-Tuning] Escalation tuning applied to {botRef.Profile?.Info?.Nickname ?? "Unknown"}.");
        }

        private void ApplyPersonalityTuning(BotOwner botRef)
        {
            var profile = BotRegistry.Get(botRef.ProfileId);
            if (profile == null)
            {
                return;
            }

            profile.AggressionLevel = Mathf.Clamp01(profile.AggressionLevel + 0.25f);
            profile.Caution = Mathf.Clamp01(profile.Caution - 0.25f);
            profile.SuppressionSensitivity = Mathf.Clamp01(profile.SuppressionSensitivity * 0.75f);
            profile.AccuracyUnderFire = Mathf.Clamp01(profile.AccuracyUnderFire + 0.2f);
            profile.CommunicationLevel = Mathf.Clamp01(profile.CommunicationLevel + 0.2f);

            Logger.LogInfo(
                $"[AIRefactored-Tuning] Personality tuned for {botRef.Profile?.Info?.Nickname ?? "Unknown"}: "
                + $"Agg={profile.AggressionLevel:F2}, Caution={profile.Caution:F2}, "
                + $"Supp={profile.SuppressionSensitivity:F2}, UnderFireAcc={profile.AccuracyUnderFire:F2}");
        }

        #endregion
    }
}
