// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Simulates hearing damage effects such as deafness after loud sounds.
    /// Fades gradually over time to mimic realistic ear recovery.
    /// </summary>
    public sealed class HearingDamageComponent
    {
        #region Fields

        private float _targetDeafness;
        private float _deafnessLevel;
        private float _deafDuration;
        private float _elapsedTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current deafness intensity (0.0 to 1.0).
        /// </summary>
        public float Deafness
        {
            get { return this._deafnessLevel; }
        }

        /// <summary>
        /// Gets a value indicating whether the bot is currently affected by deafness.
        /// </summary>
        public bool IsDeafened
        {
            get { return this._deafnessLevel > 0.1f; }
        }

        /// <summary>
        /// Gets the remaining deafness duration in seconds.
        /// </summary>
        public float RemainingTime
        {
            get
            {
                float remaining = this._deafDuration - this._elapsedTime;
                return remaining > 0f ? remaining : 0f;
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies new deafness with specified intensity and duration.
        /// Ignores weaker overlapping effects.
        /// </summary>
        /// <param name="intensity">Clamped from 0.0 to 1.0.</param>
        /// <param name="duration">Duration in seconds (minimum 0.1s).</param>
        public void ApplyDeafness(float intensity, float duration)
        {
            float clampedIntensity = intensity > 1f ? 1f : (intensity < 0f ? 0f : intensity);
            float clampedDuration = duration < 0.1f ? 0.1f : duration;

            if (clampedIntensity > this._targetDeafness)
            {
                this._targetDeafness = clampedIntensity;
                this._deafDuration = clampedDuration;
                this._elapsedTime = 0f;
                this._deafnessLevel = clampedIntensity;
            }
        }

        /// <summary>
        /// Clears all deafness effects immediately.
        /// </summary>
        public void Clear()
        {
            this._targetDeafness = 0f;
            this._deafnessLevel = 0f;
            this._deafDuration = 0f;
            this._elapsedTime = 0f;
        }

        /// <summary>
        /// Updates the fading of deafness over time.
        /// Call once per frame with delta time.
        /// </summary>
        /// <param name="deltaTime">Frame time in seconds.</param>
        public void Tick(float deltaTime)
        {
            if (this._targetDeafness <= 0.01f)
                return;

            this._elapsedTime += deltaTime;
            if (this._elapsedTime >= this._deafDuration)
            {
                this.Clear();
                return;
            }

            float ratio = 1f - (this._elapsedTime / this._deafDuration);
            this._deafnessLevel = this._targetDeafness * (ratio > 1f ? 1f : (ratio < 0f ? 0f : ratio));
        }

        #endregion
    }
}
