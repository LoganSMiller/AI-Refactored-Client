// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;

    /// <summary>
    /// Coordinates healing support across squadmates.
    /// Detects injured allies and applies realistic support actions such as stim packs, aid drops, or voiced reassurances.
    /// </summary>
    public sealed class BotGroupHealCoordinator
    {
        #region Constants

        private const float HealCheckInterval = 3.5f;
        private const float HealthThreshold = 0.6f;
        private const float HealTriggerRange = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _nextCheckTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotGroupHealCoordinator"/> class.
        /// </summary>
        /// <param name="cache">BotComponentCache providing references for squad healing logic.</param>
        public BotGroupHealCoordinator(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Periodically scans squadmates and triggers healing logic for nearby allies.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (this._bot.IsDead || this._bot.BotsGroup == null || time < this._nextCheckTime)
            {
                return;
            }

            this._nextCheckTime = time + HealCheckInterval;

            for (int i = 0; i < this._bot.BotsGroup.MembersCount; i++)
            {
                BotOwner? mate = this._bot.BotsGroup.Member(i);
                if (!this.IsValidMate(mate))
                {
                    continue;
                }

                var health = mate.GetPlayer?.HealthController;
                if (health == null || !health.IsAlive)
                {
                    continue;
                }

                if (!NeedsHealing(health))
                {
                    continue;
                }

                if (this._cache.SquadHealer != null && !this._cache.SquadHealer.IsInProcess)
                {
                    var matePlayer = mate.GetPlayer;
                    if (matePlayer != null)
                    {
                        this._cache.SquadHealer.HealAsk(matePlayer);
                        this.TrySaySupport(EPhraseTrigger.Cooperation);
                        return;
                    }
                }

                this.TryDropStimForMate();
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Determines if a squadmate is valid for healing operations.
        /// </summary>
        /// <param name="mate">The BotOwner squadmate.</param>
        /// <returns>True if the mate is valid, false otherwise.</returns>
        private bool IsValidMate(BotOwner? mate)
        {
            return mate != null
                && mate != this._bot
                && !mate.IsDead
                && Vector3.Distance(this._bot.Position, mate.Position) <= HealTriggerRange;
        }

        /// <summary>
        /// Determines whether a bot needs healing.
        /// </summary>
        /// <param name="health">The health controller to evaluate.</param>
        /// <returns>True if healing is needed, false otherwise.</returns>
        private static bool NeedsHealing(IHealthController health)
        {
            foreach (EBodyPart part in Enum.GetValues(typeof(EBodyPart)))
            {
                var hp = health.GetBodyPartHealth(part);
                if (hp.Current < hp.Maximum * HealthThreshold)
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Attempts to drop a stimulator for the squadmate.
        /// </summary>
        private void TryDropStimForMate()
        {
            var stimulators = this._bot.Medecine?.Stimulators;
            if (stimulators == null || !stimulators.HaveSmt || !stimulators.CanUseNow())
            {
                return;
            }

            stimulators.StartApplyToTarget(success =>
            {
                if (success)
                {
                    this.TrySaySupport(EPhraseTrigger.NeedHelp);
                }
            });
        }

        /// <summary>
        /// Attempts to play a squad support voice line.
        /// </summary>
        /// <param name="phrase">The phrase trigger to use.</param>
        private void TrySaySupport(EPhraseTrigger phrase)
        {
            if (!FikaHeadlessDetector.IsHeadless)
            {
                this._bot.BotTalk?.TrySay(phrase);
            }
        }

        #endregion
    }
}
