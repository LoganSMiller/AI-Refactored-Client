// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat
{
    using System;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;

    /// <summary>
    /// Coordinates healing support across squadmates.
    /// Detects injured allies and applies realistic support actions such as stim packs, aid drops, or voiced reassurances.
    /// </summary>
    public sealed class BotGroupHealCoordinator
    {
        #region Constants

        private const float HealCheckInterval = 3.5f;
        private const float HealthThreshold = 0.6f;
        private const float HealTriggerRange = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _nextCheckTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotGroupHealCoordinator"/> class.
        /// </summary>
        /// <param name="cache">BotComponentCache providing references for squad healing logic.</param>
        public BotGroupHealCoordinator(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Periodically scans squadmates and triggers healing logic for nearby allies.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (this._bot.IsDead || this._bot.BotsGroup == null || time < this._nextCheckTime)
            {
                return;
            }

            this._nextCheckTime = time + HealCheckInterval;

            for (int i = 0; i < this._bot.BotsGroup.MembersCount; i++)
            {
                BotOwner? mate = this._bot.BotsGroup.Member(i);
                if (!this.IsValidMate(mate))
                {
                    continue;
                }

                Player? matePlayer = EFTPlayerUtil.ResolvePlayer(mate);
                if (matePlayer == null || !EFTPlayerUtil.IsValidGroupPlayer(matePlayer))
                {
                    continue;
                }

                IHealthController? health = matePlayer.HealthController;
                if (health == null || !health.IsAlive)
                {
                    continue;
                }

                if (!NeedsHealing(health))
                {
                    continue;
                }

                if (this._cache.SquadHealer != null && !this._cache.SquadHealer.IsInProcess)
                {
                    object raw = matePlayer;
                    EFT.IPlayer iMatePlayer = (EFT.IPlayer)raw;

                    this._cache.SquadHealer.HealAsk(iMatePlayer);
                    this.TrySaySupport(EPhraseTrigger.Cooperation);
                    return;
                }

                this.TrySaySupport(EPhraseTrigger.NeedHelp);
            }
        }

        #endregion

        #region Private Methods

        private bool IsValidMate(BotOwner? mate)
        {
            if (mate == null || mate == this._bot || mate.IsDead)
            {
                return false;
            }

            Player? selfPlayer = EFTPlayerUtil.ResolvePlayer(this._bot);
            Player? matePlayer = EFTPlayerUtil.ResolvePlayer(mate);

            if (selfPlayer == null || matePlayer == null)
            {
                return false;
            }

            Vector3 selfPos = EFTPlayerUtil.GetPosition(selfPlayer);
            Vector3 matePos = EFTPlayerUtil.GetPosition(matePlayer);

            return Vector3.Distance(selfPos, matePos) <= HealTriggerRange;
        }

        private static bool NeedsHealing(IHealthController health)
        {
            foreach (EBodyPart part in Enum.GetValues(typeof(EBodyPart)))
            {
                ValueStruct value = health.GetBodyPartHealth(part);
                if (value.Maximum > 0f && value.Current < value.Maximum * HealthThreshold)
                {
                    return true;
                }
            }

            return false;
        }

        private void TrySaySupport(EPhraseTrigger phrase)
        {
            if (!FikaHeadlessDetector.IsHeadless && this._bot.BotTalk != null)
            {
                this._bot.BotTalk.TrySay(phrase);
            }
        }

        #endregion
    }
}
