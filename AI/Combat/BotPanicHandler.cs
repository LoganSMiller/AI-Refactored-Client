// <auto-generated>
//   AI-Refactored: BotPanicHandler.cs (Supreme Arbitration Overlay/Event-Only, June 2025)
//   Overlay-only, triple-guarded panic/retreat/composure. Squad contagion/calm sync, anti-teleport, pooled, and bulletproof.
//   Never disables, no tick/coroutine-move, no allocs. SPT/FIKA/headless/client parity. StyleCop/ReSharper compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Combat.States;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Handles suppression, flash, injury, squad contagion, retreat, composure decay, and squad calm sync.
    /// Overlay/event-only: All panic/fallback is triple-guarded via arbitration, NavMesh/Y validated, deduped, pooled.
    /// Never disables, never teleports, error-isolated, SPT/FIKA/headless/client safe.
    /// </summary>
    public sealed class BotPanicHandler
    {
        #region Constants

        private const float PanicCooldown = 5f;
        private const float PanicDuration = 3.5f;
        private const float RecoverySpeedBase = 0.22f;
        private const float SquadRadiusSqr = 225f;
        private const float LowHealthThreshold = 25f;
        private const float StartleChanceBase = 0.19f;
        private const float PanicStutterBase = 0.14f;
        private const float SquadCalmBoost = 0.28f;
        private const float SquadPanicSyncChance = 0.32f;
        private const float DangerZonePersist = 0.63f;
        private const float OverlayMoveDedupSqr = 0.0001f;
        private const float OverlayMoveCooldown = 0.56f;
        private const BotOverlayType OverlayType = BotOverlayType.Panic;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private float _composureLevel = 1f;
        private float _panicStartTime = -1f;
        private float _lastPanicExitTime = -99f;
        private float _lastVoiceTime = -99f;
        private float _panicStutterUntil = -1f;
        private bool _isPanicking;
        private bool _panicStutterActive;
        private Vector3 _lastOverlayMoveIssued = Vector3.zero;
        private float _lastOverlayMoveTime = -10f;

        #endregion

        #region Properties

        public bool IsPanicking => _isPanicking;
        public float GetComposureLevel() => _composureLevel;

        #endregion

        #region Initialization & Lifecycle

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] Initialization failed.");
                return;
            }
            _cache = componentCache;
            _bot = componentCache.Bot;
            try
            {
                if (_bot.GetPlayer is Player player && player.HealthController != null)
                    player.HealthController.ApplyDamageEvent += OnDamaged;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] Subscribe failed: " + ex);
            }
        }

        /// <summary>
        /// Overlay/event-driven panic logic. All panic/fallback is one-shot, arbitration/pooled, never tick/coroutine-move.
        /// </summary>
        public void Tick(float time)
        {
            if (!IsValid()) return;
            try
            {
                if (UnityEngine.Random.value < 0.04f) return; // Probabilistic tick spread

                if (_isPanicking)
                {
                    if (_panicStutterActive && time < _panicStutterUntil)
                        return;
                    _panicStutterActive = false;

                    if (_bot.BotTalk != null && time - _lastVoiceTime > 1.4f && UnityEngine.Random.value < 0.43f)
                    {
                        _lastVoiceTime = time;
                        try { _bot.BotTalk.TrySay(EPhraseTrigger.OnBeingHurt); } catch { }
                    }

                    if (time - _panicStartTime > PanicDuration)
                        EndPanic(time);
                    return;
                }

                RecoverComposure(Time.deltaTime);

                if (time <= _lastPanicExitTime + PanicCooldown) return;

                if (ShouldPanicFromThreat())
                {
                    Vector3 retreat = ResolveRetreatDirection();
                    TryStartPanic(time, retreat, false);
                    return;
                }
                if (CheckNearbySquadDanger(out Vector3 squadRetreat))
                    TryStartPanic(time, squadRetreat, true);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] Tick exception: " + ex);
            }
        }

        /// <summary>
        /// Forces a panic overlay/intent (one-shot, arbitration/event-only).
        /// </summary>
        public void TriggerPanic()
        {
            float now = Time.time;
            if (!IsValid() || _isPanicking || now < _lastPanicExitTime + PanicCooldown) return;
            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn) return;
                Vector3 dir = ResolveRetreatDirection();
                TryStartPanic(now, dir, false);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] TriggerPanic failed: " + ex);
            }
        }

        #endregion

        #region Panic Triggers

        private void OnDamaged(EBodyPart part, float damage, DamageInfoStruct info)
        {
            float now = Time.time;
            if (!IsValid() || _isPanicking || now < _lastPanicExitTime + PanicCooldown) return;
            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn || profile.AggressionLevel > 0.8f) return;

                if (profile.Caution > 0.7f && UnityEngine.Random.value < StartleChanceBase + profile.Caution * 0.36f)
                {
                    _panicStutterActive = true;
                    _panicStutterUntil = now + PanicStutterBase + UnityEngine.Random.Range(0.05f, 0.13f);
                }

                Vector3 retreat = (_bot.Position - info.HitPoint).normalized;
                TryStartPanic(now, retreat, false);

                if (_bot.Memory?.GoalEnemy?.Person is Player enemy && !string.IsNullOrEmpty(enemy.ProfileId))
                    _cache.LastShotTracker?.RegisterHit(enemy.ProfileId, part, Vector3.Distance(_bot.Position, info.HitPoint), retreat);

                _cache.InjurySystem?.OnHit(part, damage);
                _cache.GroupComms?.SayHit();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] OnDamaged failed: " + ex);
            }
        }

        private bool ShouldPanicFromThreat()
        {
            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn) return false;
                if (_cache.FlashGrenade?.IsFlashed() == true)
                    return true;
                if (_composureLevel < 0.18f) return true;

                ValueStruct health = _bot.HealthController?.GetBodyPartHealth(EBodyPart.Common) ?? default(ValueStruct);
                if (health.Current < LowHealthThreshold) return true;

                if (_bot.BotsGroup != null)
                {
                    for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                    {
                        var squadBot = _bot.BotsGroup.Member(i);
                        if (squadBot != _bot)
                        {
                            var squadCache = squadBot.GetComponent<BotComponentCache>();
                            if (squadCache?.PanicHandler != null && squadCache.PanicHandler.IsPanicking && UnityEngine.Random.value < SquadPanicSyncChance)
                                return true;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] Panic threat check failed: " + ex);
                return false;
            }
        }

        private bool CheckNearbySquadDanger(out Vector3 retreatDir)
        {
            retreatDir = Vector3.zero;
            try
            {
                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId)) return false;
                Vector3 myPos = _bot.Position;
                var zones = BotMemoryStore.GetZonesForMap(mapId);
                for (int i = 0; i < zones.Count; i++)
                {
                    if ((zones[i].Position - myPos).sqrMagnitude <= SquadRadiusSqr)
                    {
                        retreatDir = (myPos - zones[i].Position).normalized;
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] Squad panic check failed: " + ex);
            }
            return false;
        }

        #endregion

        #region Panic Actions (Overlay/Intent Only)

        private void TryStartPanic(float now, Vector3 retreatDir, bool isSquadSync)
        {
            if (!IsValid()) return;
            try
            {
                // Triple-guarded overlay arbitration
                if (_panicStutterActive && now < _panicStutterUntil)
                    return;
                if (BotMovementHelper.IsMovementPaused(_bot) || BotMovementHelper.IsInInteractionState(_bot))
                    return;
                if (!BotOverlayManager.CanIssueMove(_bot, OverlayType))
                    return;

                float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;

                Vector3 fallback = _bot.Position + retreatDir.normalized * UnityEngine.Random.Range(7.5f, 10.5f);
                fallback.y = _bot.Position.y;

                if (BotNavHelper.TryGetSafeTarget(_bot, out var navTarget) && IsVectorValid(navTarget))
                    fallback = navTarget;

                // Dedup/cooldown/registration after NavMesh+drift
                if ((_lastOverlayMoveIssued - fallback).sqrMagnitude > OverlayMoveDedupSqr &&
                    now - _lastOverlayMoveTime > OverlayMoveCooldown)
                {
                    _isPanicking = true;
                    _panicStartTime = now;
                    _composureLevel = 0f;
                    _lastOverlayMoveIssued = fallback;
                    _lastOverlayMoveTime = now;

                    _cache.Escalation?.NotifyPanicTriggered();

                    // Triple-guarded, overlay/event-only move (no disables/teleports)
                    BotMovementHelper.SmoothMoveToSafe(_bot, fallback, false, cohesion, OverlayType);

                    BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);

                    if (GameWorldHandler.TryGetValidMapName() is string mapId)
                        BotMemoryStore.AddDangerZone(mapId, _bot.Position, DangerTriggerType.Panic, DangerZonePersist);

                    _bot.Sprint(true);

                    if (_bot.BotTalk != null && Time.time - _lastVoiceTime > 1.15f && UnityEngine.Random.value < 0.72f)
                    {
                        try { _bot.BotTalk.TrySay(EPhraseTrigger.OnBeingHurt); }
                        catch { }
                        _lastVoiceTime = Time.time;
                    }

                    // Squad contagion
                    if (_bot.BotsGroup != null && isSquadSync)
                    {
                        for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                        {
                            var mate = _bot.BotsGroup.Member(i);
                            if (mate != null && mate != _bot && !mate.IsDead)
                            {
                                var mateCache = mate.GetComponent<BotComponentCache>();
                                if (mateCache != null && mateCache.PanicHandler != null && !mateCache.PanicHandler.IsPanicking && UnityEngine.Random.value < SquadPanicSyncChance)
                                {
                                    mateCache.PanicHandler.TriggerPanic();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] StartPanic failed: " + ex);
            }
        }

        private void EndPanic(float now)
        {
            try
            {
                _isPanicking = false;
                _lastPanicExitTime = now;
                if (_bot.BotsGroup != null)
                {
                    for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                    {
                        var squadBot = _bot.BotsGroup.Member(i);
                        if (squadBot != _bot)
                        {
                            var squadCache = squadBot.GetComponent<BotComponentCache>();
                            if (squadCache?.PanicHandler != null && !squadCache.PanicHandler.IsPanicking)
                                _composureLevel = Mathf.Clamp01(_composureLevel + SquadCalmBoost);
                        }
                    }
                }
                _bot.Memory?.SetLastTimeSeeEnemy();
                _bot.Memory?.CheckIsPeace();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] EndPanic failed: " + ex);
            }
        }

        private void RecoverComposure(float deltaTime)
        {
            try
            {
                float personalityMod = 1f;
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile != null)
                {
                    if (profile.Caution > 0.7f) personalityMod = 0.69f;
                    else if (profile.AggressionLevel > 0.6f) personalityMod = 1.37f;
                }
                float mod = UnityEngine.Random.Range(0.91f, 1.13f) * personalityMod;
                _composureLevel = Mathf.Clamp01(_composureLevel + deltaTime * RecoverySpeedBase * mod);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotPanicHandler] RecoverComposure failed: " + ex);
            }
        }

        private Vector3 ResolveRetreatDirection()
        {
            try
            {
                if (_bot.Memory != null && _bot.Memory.IsDamaged && _bot.Memory.LastHitPos != Vector3.zero)
                    return (_bot.Position - _bot.Memory.LastHitPos).normalized;
                else if (_cache?.LastHeardDirection.sqrMagnitude > 0.2f)
                    return -_cache.LastHeardDirection.normalized;
                else if (_bot.Memory?.BotCurrentCoverInfo?.LastCover != null)
                    return (_bot.Position - _bot.Memory.BotCurrentCoverInfo.LastCover.Position).normalized;
                return -_bot.LookDirection.normalized;
            }
            catch { return -_bot.LookDirection.normalized; }
        }

        /// <summary>
        /// Determines if a suppressed fallback should trigger based on suppression, panic, fallback, and delay.
        /// Used by CombatStateMachine/BotBrain for precise fallback coordination.
        /// </summary>
        public bool ShouldTriggerSuppressedFallback(FallbackHandler fallback, float now, float lastStateChangeTime, float minStateDuration)
        {
            try
            {
                if (fallback == null || !fallback.IsActive())
                    return false;
                var suppression = _cache?.Suppression;
                var profile = _cache?.AIRefactoredBotOwner?.PersonalityProfile;
                bool isSuppressed = suppression?.IsSuppressed() == true;
                bool isPanicking = IsPanicking;
                float caution = profile?.Caution ?? 0.5f;
                if (isSuppressed && (now - lastStateChangeTime) >= minStateDuration)
                {
                    if (isPanicking || (caution < 0.2f && UnityEngine.Random.value < 0.4f))
                        return false;
                    return true;
                }
                return false;
            }
            catch { return false; }
        }

        #endregion

        #region Helpers

        private bool IsValid()
        {
            try
            {
                return _bot != null && _cache != null && !_bot.IsDead &&
                       _bot.GetPlayer is Player p && p.IsAI;
            }
            catch { return false; }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }

        #endregion
    }
}
