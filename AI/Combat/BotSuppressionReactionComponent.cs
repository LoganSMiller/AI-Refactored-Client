// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression logic, including sprint retreat, composure impact,
    /// and panic escalation. Suppression is triggered by incoming fire or explosions.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        #region Constants

        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.0f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isSuppressed;
        private float _suppressionStartTime;

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the suppression reaction component with a bot's component cache.
        /// </summary>
        /// <param name="componentCache">The component cache containing references.</param>
        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                throw new ArgumentNullException(nameof(componentCache), "[Suppression] Bot or cache is null.");
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isSuppressed = false;
            _suppressionStartTime = -100f;
        }

        /// <summary>
        /// Returns whether the bot is currently suppressed.
        /// </summary>
        public bool IsSuppressed()
        {
            return _isSuppressed;
        }

        /// <summary>
        /// Updates suppression decay over time.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (!_isSuppressed)
            {
                return;
            }

            if (!IsValid())
            {
                _isSuppressed = false;
                return;
            }

            if (time - _suppressionStartTime >= SuppressionDuration)
            {
                _isSuppressed = false;
            }
        }

        /// <summary>
        /// Triggers suppression effects: sprint, fallback, panic escalation.
        /// </summary>
        /// <param name="source">Optional suppression origin point.</param>
        public void TriggerSuppression(Vector3? source)
        {
            if (_isSuppressed || !IsValid())
            {
                return;
            }

            BotPanicHandler panic = _cache.PanicHandler;
            if (panic != null && panic.IsPanicking)
            {
                return;
            }

            _isSuppressed = true;
            _suppressionStartTime = Time.time;

            Vector3 retreatDir;
            if (source.HasValue)
            {
                retreatDir = (_bot.Position - source.Value).normalized;
            }
            else
            {
                Vector3 look = _bot.LookDirection;
                retreatDir = look.sqrMagnitude > 0.01f ? -look.normalized : Vector3.back;
            }

            Vector3 fallback = GetFallbackPosition(retreatDir);
            float cohesion = _cache.AIRefactoredBotOwner.PersonalityProfile.Cohesion;

            BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
            _bot.Sprint(true);

            if (panic != null)
            {
                panic.TriggerPanic();
            }

            _cache.Escalation?.NotifyPanicTriggered();

            if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
            {
                _bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual);
            }
        }

        #endregion

        #region Private Helpers

        private Vector3 GetFallbackPosition(Vector3 retreatDirection)
        {
            Vector3 basePos = _bot.Position + retreatDirection * MinSuppressionRetreatDistance;

            if (_cache.Pathing != null)
            {
                var path = BotCoverRetreatPlanner.GetCoverRetreatPath(_bot, retreatDirection, _cache.Pathing);
                if (path != null && path.Count > 0)
                {
                    return Vector3.Distance(path[0], _bot.Position) < 1.0f && path.Count > 1 ? path[1] : path[0];
                }
            }

            return basePos;
        }

        private bool IsValid()
        {
            return _bot != null &&
                   _cache != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer != null &&
                   _bot.GetPlayer.IsAI;
        }

        #endregion
    }
}
