// <auto-generated>
//   AI-Refactored: BotSuppressionReactionComponent.cs (Supreme Arbitration Overlay/Event, June 2025)
//   Overlay-only, one-move, deduped, pooled, triple-guarded, squad sync, bulletproof, zero alloc.
//   Never disables, never teleports, SPT/FIKA/headless/client parity. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Reflection;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles all overlay/event-based suppression: panic escalation, composure decay, squad sync, retreat overlay.
    /// Never disables, never teleports, never more than one move per overlay event.
    /// All overlays triple-guarded: arbitration, NavMesh/y, deduplication. Zero alloc, pooled, SPT/FIKA/client/headless parity.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        #region Constants

        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.2f;
        private const float SquadSuppressionRadiusSqr = 144f;
        private const float SuppressionVoiceCooldown = 1.5f;
        private const float SquadSuppressionSyncChance = 0.23f;
        private const float ComposureLossMin = 0.12f;
        private const float ComposureLossMax = 0.25f;
        private const float PanicComposureThreshold = 0.18f;
        private const float OverlayMoveDedupSqr = 0.0001f;
        private const float OverlayMoveCooldown = 0.48f;
        private const float MaxNavmeshDeltaY = 3.0f;
        private const BotOverlayType OverlayType = BotOverlayType.Suppression;

        private static readonly EPhraseTrigger[] SuppressionTriggers = new[]
        {
            EPhraseTrigger.NeedHelp, EPhraseTrigger.UnderFire, EPhraseTrigger.GetBack,
            EPhraseTrigger.OnBeingHurt, EPhraseTrigger.EnemyHit, EPhraseTrigger.Regroup,
            EPhraseTrigger.Cooperation, EPhraseTrigger.GetInCover, EPhraseTrigger.OnEnemyGrenade,
            EPhraseTrigger.CoverMe, EPhraseTrigger.FollowMe
        };

        private static readonly EPhraseTrigger[] SquadSyncTriggers = new[]
        {
            EPhraseTrigger.GoForward, EPhraseTrigger.Regroup, EPhraseTrigger.CoverMe,
            EPhraseTrigger.FollowMe, EPhraseTrigger.HoldPosition, EPhraseTrigger.Spreadout
        };

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isSuppressed;
        private float _suppressionStartTime = float.NegativeInfinity;
        private float _lastVoiceTime = float.NegativeInfinity;
        private static FieldInfo _composureField;

        // Overlay dedup for suppression retreat (not global cache!)
        private Vector3 _lastSuppressionMoveIssued = Vector3.zero;
        private float _lastSuppressionMoveTime = -10f;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                Plugin.LoggerInstance?.LogError("[Suppression] Bot or cache is null in Initialize.");
                return;
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isSuppressed = false;
            _suppressionStartTime = float.NegativeInfinity;
            _lastVoiceTime = float.NegativeInfinity;
            _lastSuppressionMoveIssued = Vector3.zero;
            _lastSuppressionMoveTime = -10f;

            if (_composureField == null)
                _composureField = typeof(BotPanicHandler).GetField("_composureLevel", BindingFlags.NonPublic | BindingFlags.Instance);
        }

        #endregion

        #region Public API

        public bool IsSuppressed() => _isSuppressed;

        public void Tick(float time)
        {
            if (!_isSuppressed)
                return;

            try
            {
                if (!IsValid())
                {
                    _isSuppressed = false;
                    return;
                }

                // Voice lines as event, not move blocker
                if (_bot.BotTalk != null && time - _lastVoiceTime > SuppressionVoiceCooldown)
                {
                    if (UnityEngine.Random.value < 0.33f)
                    {
                        var trigger = SuppressionTriggers[UnityEngine.Random.Range(0, SuppressionTriggers.Length)];
                        try { _bot.BotTalk.TrySay(trigger); } catch { }
                        _lastVoiceTime = time;
                    }
                }

                if (time - _suppressionStartTime >= SuppressionDuration)
                {
                    _isSuppressed = false;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Tick exception: " + ex);
                _isSuppressed = false;
            }
        }

        /// <summary>
        /// Overlay/event-only suppression trigger. Single-move, zero-teleport, overlay/anticipation/interaction-blocked.
        /// All dedup, NavMesh sample, micro-drift, and cache/cooldown only if move is *actually issued*.
        /// </summary>
        public void TriggerSuppression(Vector3? source)
        {
            if (_isSuppressed || !IsValid())
                return;

            float now = Time.time;

            try
            {
                // Overlay arbitration: triple-guarded, two-argument signature
                if (!BotOverlayManager.CanIssueMove(_bot, OverlayType))
                    return;

                // Block move if anticipation/fakeout overlays or intent locks are active
                if (BotMovementHelper.IsMovementPaused(_bot) || BotMovementHelper.IsInInteractionState(_bot))
                    return;

                var panic = _cache.PanicHandler;
                if (panic != null && panic.IsPanicking)
                    return;

                _isSuppressed = true;
                _suppressionStartTime = now;

                // Composure decay (deep panic risk)
                if (panic != null && _composureField != null)
                {
                    float loss = UnityEngine.Random.Range(ComposureLossMin, ComposureLossMax);
                    float current = panic.GetComposureLevel();
                    _composureField.SetValue(panic, Mathf.Clamp01(current - loss));
                }

                // Overlay retreat: intent vector, then NavMesh sample
                Vector3 retreatDir = source.HasValue
                    ? (_bot.Position - source.Value).normalized
                    : Vector3.back;
                Vector3 intent = _bot.Position + retreatDir * MinSuppressionRetreatDistance;
                intent.y = _bot.Position.y;

                // NavMesh sample & Y-clamp
                if (!BotNavHelper.TryGetSafeTarget(_bot, out var navTarget) || !IsVectorValid(navTarget))
                    navTarget = ClampY(intent, _bot.Position);

                // Micro-drift and squad offset applied *after* NavMesh sampling
                float cohesion = Mathf.Clamp(_cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);
                Vector3 drifted = BotMovementHelper.ApplyMicroDrift(navTarget, _bot.ProfileId, Time.frameCount, _cache.PersonalityProfile);

                // Dedup/cooldown on final move, using per-event cache only
                if ((drifted - _lastSuppressionMoveIssued).sqrMagnitude < OverlayMoveDedupSqr)
                    return;
                if ((now - _lastSuppressionMoveTime) < OverlayMoveCooldown)
                    return;

                // Overlay manager registration (no timestamp in signature)
                BotOverlayManager.RegisterMove(_bot, OverlayType);

                // Central pooled movement helper, strictly five-argument signature
                BotMovementHelper.SmoothMoveToSafe(_bot, drifted, false, cohesion, OverlayType);
                _lastSuppressionMoveIssued = drifted;
                _lastSuppressionMoveTime = now;
                _bot.Sprint(true);
                BotCoverHelper.TrySetStanceFromNearbyCover(_cache, drifted);

                // Panic escalation (contagion)
                if (panic != null && panic.GetComposureLevel() < PanicComposureThreshold)
                    panic.TriggerPanic();

                _cache.Escalation?.NotifyPanicTriggered();

                // Squad propagation: overlay-only, never disables, never multi-move per event
                TryPropagateSuppression();

                // Voice/comms as independent event
                if (_bot.BotTalk != null && now - _lastVoiceTime > SuppressionVoiceCooldown)
                {
                    var triggers = UnityEngine.Random.value < 0.5f ? SuppressionTriggers : SquadSyncTriggers;
                    var trigger = triggers[UnityEngine.Random.Range(0, triggers.Length)];
                    try { _bot.BotTalk.TrySay(trigger); } catch { }
                    _lastVoiceTime = now;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] TriggerSuppression failed: " + ex);
            }
        }

        #endregion

        #region Squad Propagation

        private void TryPropagateSuppression()
        {
            try
            {
                if (_bot?.BotsGroup == null)
                    return;

                Vector3 self = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (mate == null || mate == _bot || mate.IsDead)
                        continue;
                    if ((mate.Position - self).sqrMagnitude > SquadSuppressionRadiusSqr)
                        continue;
                    if (UnityEngine.Random.value > SquadSuppressionSyncChance)
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache?.Suppression != null && !mateCache.Suppression.IsSuppressed())
                        mateCache.Suppression.TriggerSuppression(self);

                    if (mate.BotTalk != null && UnityEngine.Random.value < 0.22f)
                    {
                        var trigger = SquadSyncTriggers[UnityEngine.Random.Range(0, SquadSyncTriggers.Length)];
                        try { mate.BotTalk.TrySay(trigger); } catch { }
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Propagation error: " + ex);
            }
        }

        #endregion

        #region Internal Helpers

        private static Vector3 ClampY(Vector3 v, Vector3 basePos)
        {
            if (Mathf.Abs(v.y - basePos.y) > MaxNavmeshDeltaY || v.y < -2.5f)
                v.y = basePos.y;
            return v;
        }

        private bool IsValid()
        {
            try
            {
                return _bot != null &&
                       _cache != null &&
                       !_bot.IsDead &&
                       _bot.GetPlayer is Player player &&
                       player.IsAI;
            }
            catch { return false; }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z)
                && v != Vector3.zero && Mathf.Abs(v.y) < 1000f && v.y > -2.5f;
        }

        #endregion
    }
}
