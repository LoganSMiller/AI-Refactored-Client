// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression logic, including sprint retreat, composure impact,
    /// and panic escalation. Suppression is triggered by incoming fire or explosions.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        #region Constants

        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.0f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isSuppressed;
        private float _suppressionStartTime = -99.0f;

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the suppression reaction component with a bot's component cache.
        /// </summary>
        /// <param name="componentCache">The component cache containing references.</param>
        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
                throw new ArgumentNullException(nameof(componentCache), "[Suppression] Bot or cache is null.");

            this._cache = componentCache;
            this._bot = componentCache.Bot;
        }

        /// <summary>
        /// Returns whether the bot is currently suppressed.
        /// </summary>
        public bool IsSuppressed()
        {
            return this._isSuppressed;
        }

        /// <summary>
        /// Updates suppression decay over time.
        /// </summary>
        /// <param name="time">The current game time.</param>
        public void Tick(float time)
        {
            if (!this._isSuppressed)
                return;

            if (!this.IsValid())
            {
                this._isSuppressed = false;
                return;
            }

            if (time - this._suppressionStartTime >= SuppressionDuration)
                this._isSuppressed = false;
        }

        /// <summary>
        /// Triggers suppression effects: sprint, fallback, panic escalation.
        /// </summary>
        /// <param name="source">Optional suppression origin point.</param>
        public void TriggerSuppression(Vector3? source = null)
        {
            if (this._isSuppressed || this._bot == null || this._cache == null)
                return;

            BotPanicHandler panic = this._cache.PanicHandler;
            if (panic != null && panic.IsPanicking)
                return;

            this._isSuppressed = true;
            this._suppressionStartTime = Time.time;

            Vector3 retreatDir = Vector3.back;
            if (source.HasValue)
            {
                retreatDir = (this._bot.Position - source.Value).normalized;
            }
            else
            {
                Vector3 look = this._bot.LookDirection;
                if (look.sqrMagnitude > 0.01f)
                    retreatDir = -look.normalized;
            }

            Vector3 fallback = this.GetFallbackPosition(retreatDir);
            float cohesion = this._cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1.0f;

            BotMovementHelper.SmoothMoveTo(this._bot, fallback, false, cohesion);
            this._bot.Sprint(true);

            panic?.TriggerPanic();
            this._cache.Escalation?.NotifyPanicTriggered();

            if (!FikaHeadlessDetector.IsHeadless && this._bot.BotTalk != null)
                this._bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual);
        }

        #endregion

        #region Private Helpers

        private Vector3 GetFallbackPosition(Vector3 retreatDirection)
        {
            Vector3 basePos = this._bot.Position + (retreatDirection * MinSuppressionRetreatDistance);

            if (this._cache.Pathing != null)
            {
                var path = BotCoverRetreatPlanner.GetCoverRetreatPath(this._bot, retreatDirection, this._cache.Pathing);
                if (path.Count > 0)
                    return Vector3.Distance(path[0], this._bot.Position) < 1.0f && path.Count > 1 ? path[1] : path[0];
            }

            return basePos;
        }

        private bool IsValid()
        {
            return this._bot != null &&
                   this._cache != null &&
                   !this._bot.IsDead &&
                   this._bot.GetPlayer is EFT.Player player &&
                   player.IsAI;
        }

        #endregion
    }
}
