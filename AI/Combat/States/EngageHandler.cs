// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All errors are locally isolated, never disables itself, never triggers fallback AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Guides tactical movement toward enemy's last known location.
    /// Supports cautious advancement and squad-aware pathing.
    /// Bulletproof: all failures are isolated; never disables itself or squadmates.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;

        #endregion

        #region Constructor

        public EngageHandler(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;

            float profileRange = cache?.PersonalityProfile?.EngagementRange ?? 0f;
            _fallbackRange = profileRange > 0f ? profileRange : DefaultEngagementRange;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines if the bot should begin advancing toward the enemy.
        /// </summary>
        public bool ShallUseNow()
        {
            if (!IsCombatCapable())
                return false;

            Vector3 enemyPos;
            try
            {
                return TryGetLastKnownEnemy(out enemyPos) && !IsWithinRange(enemyPos);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] Exception in ShallUseNow: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Determines if the bot is close enough to start direct attack behavior.
        /// </summary>
        public bool CanAttack()
        {
            if (!IsCombatCapable())
                return false;

            Vector3 enemyPos;
            try
            {
                return TryGetLastKnownEnemy(out enemyPos) && IsWithinRange(enemyPos);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] Exception in CanAttack: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Advances the bot toward last known enemy position with squad offset.
        /// </summary>
        public void Tick()
        {
            if (!IsCombatCapable())
                return;

            try
            {
                Vector3 enemyPos;
                if (!TryGetLastKnownEnemy(out enemyPos))
                    return;

                Vector3 destination = (_cache.SquadPath != null)
                    ? _cache.SquadPath.ApplyOffsetTo(enemyPos)
                    : enemyPos;

                // Use only BotNavHelper (EFT nav). If nav fails, just use the calculated destination.
                if (!IsValid(destination) || !BotNavHelper.TryGetSafeTarget(_bot, out destination) || !IsValid(destination))
                {
                    // Navigation failed: still proceed with destination.
                    destination = (_cache.SquadPath != null)
                        ? _cache.SquadPath.ApplyOffsetTo(enemyPos)
                        : enemyPos;
                }

                if (_bot.Mover != null)
                {
                    try
                    {
                        BotMovementHelper.SmoothMoveTo(_bot, destination);
                        if (_cache.Combat != null)
                            _cache.Combat.TrySetStanceFromNearbyCover(destination);
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EngageHandler] Exception in SmoothMoveTo or TrySetStance: {ex}");
                    }
                }
                else
                {
                    Plugin.LoggerInstance.LogError("[EngageHandler] BotMover missing; cannot move.");
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] General exception in Tick: {ex}");
            }
        }

        /// <summary>
        /// Returns whether the bot is currently engaging based on distance to last known enemy.
        /// </summary>
        public bool IsEngaging()
        {
            if (!IsCombatCapable())
                return false;

            Vector3 enemyPos;
            try
            {
                return TryGetLastKnownEnemy(out enemyPos) && !IsWithinRange(enemyPos);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] Exception in IsEngaging: {ex}");
                return false;
            }
        }

        #endregion

        #region Private Methods

        private bool IsCombatCapable()
        {
            return _cache != null && _bot != null && _cache.Combat != null;
        }

        private bool TryGetLastKnownEnemy(out Vector3 result)
        {
            result = (_cache != null && _cache.Combat != null) ? _cache.Combat.LastKnownEnemyPos : Vector3.zero;
            return result != Vector3.zero &&
                   !float.IsNaN(result.x) &&
                   !float.IsNaN(result.y) &&
                   !float.IsNaN(result.z);
        }

        private bool IsWithinRange(Vector3 enemyPos)
        {
            return Vector3.SqrMagnitude(_bot.Position - enemyPos) < (_fallbackRange * _fallbackRange);
        }

        private static bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z);
        }

        #endregion
    }
}
