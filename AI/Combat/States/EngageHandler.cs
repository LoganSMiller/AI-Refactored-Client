// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles tactical movement toward enemy last-known-positions during engagements.
    /// Guides advance cautiously while coordinating stance and squad path offsets.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="EngageHandler"/> class.
        /// </summary>
        /// <param name="cache">The bot's component cache.</param>
        public EngageHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentNullException(nameof(cache), "[EngageHandler] Initialization failed: cache or bot is null.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines whether the Engage state should be active.
        /// </summary>
        /// <returns>True if the bot should continue engaging; otherwise, false.</returns>
        public bool ShallUseNow()
        {
            CombatStateMachine? combat = this._cache.Combat;
            return combat != null && combat.LastKnownEnemyPos.HasValue && !this.CanAttack();
        }

        /// <summary>
        /// Determines if the bot is close enough to transition to Attack state.
        /// </summary>
        /// <returns>True if ready to attack; otherwise, false.</returns>
        public bool CanAttack()
        {
            CombatStateMachine? combat = this._cache.Combat;
            if (combat == null || !combat.LastKnownEnemyPos.HasValue)
            {
                return false;
            }

            Vector3 myPos = this._bot.Position;
            Vector3 enemyPos = combat.LastKnownEnemyPos.Value;
            float distance = Vector3.Distance(myPos, enemyPos);

            BotPersonalityProfile? profile = this._cache.AIRefactoredBotOwner?.PersonalityProfile;
            float engagementRange = profile != null ? profile.EngagementRange : 25.0f;

            return distance < engagementRange;
        }

        /// <summary>
        /// Guides the bot toward the last known enemy position with cautious stance updates.
        /// </summary>
        public void Tick()
        {
            CombatStateMachine? combat = this._cache.Combat;
            if (combat == null || !combat.LastKnownEnemyPos.HasValue)
            {
                return;
            }

            Vector3 target = combat.LastKnownEnemyPos.Value;

            Vector3 destination = this._cache.SquadPath != null
                ? this._cache.SquadPath.ApplyOffsetTo(target)
                : target;

            if (float.IsNaN(destination.x) || float.IsNaN(destination.y) || float.IsNaN(destination.z))
            {
                return;
            }

            BotMovementHelper.SmoothMoveTo(this._bot, destination);
            combat.TrySetStanceFromNearbyCover(destination);
        }

        /// <summary>
        /// Returns true if the bot is actively engaging an unseen enemy.
        /// </summary>
        /// <returns>True if engaging based on memory or tracking.</returns>
        public bool IsEngaging()
        {
            CombatStateMachine? combat = this._cache.Combat;
            return combat != null && combat.LastKnownEnemyPos.HasValue && !this.CanAttack();
        }

        #endregion
    }
}
