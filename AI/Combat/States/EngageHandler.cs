// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles tactical movement toward enemy last-known-positions during engagements.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="EngageHandler"/> class.
        /// </summary>
        /// <param name="cache">The bot component cache reference.</param>
        public EngageHandler(BotComponentCache cache)
        {
            _cache = cache ?? throw new ArgumentNullException(nameof(cache));
            _bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public API

        /// <summary>
        /// Determines if the bot is close enough to transition to Attack state.
        /// </summary>
        /// <returns>True if ready to attack; otherwise, false.</returns>
        public bool CanAttack()
        {
            Vector3? enemyPosition = _cache.Combat?.LastKnownEnemyPos;
            if (!enemyPosition.HasValue)
            {
                return false;
            }

            float distance = Vector3.Distance(_bot.Position, enemyPosition.Value);
            float engagementRange = _cache.AIRefactoredBotOwner?.PersonalityProfile.EngagementRange ?? 25f;

            return distance < engagementRange;
        }

        /// <summary>
        /// Determines whether the Engage state should be active.
        /// </summary>
        /// <returns>True if the bot should continue engaging; otherwise, false.</returns>
        public bool ShallUseNow()
        {
            return _cache.Combat?.LastKnownEnemyPos.HasValue == true
                   && !this.CanAttack();
        }

        /// <summary>
        /// Moves the bot toward the last known enemy position.
        /// </summary>
        public void Tick()
        {
            Vector3? lastKnownEnemyPos = _cache.Combat?.LastKnownEnemyPos;
            if (!lastKnownEnemyPos.HasValue)
            {
                return;
            }

            Vector3 destination = _cache.SquadPath?.ApplyOffsetTo(lastKnownEnemyPos.Value) ?? lastKnownEnemyPos.Value;

            BotMovementHelper.SmoothMoveTo(_bot, destination);
            _cache.Combat?.TrySetStanceFromNearbyCover(destination);
        }

        #endregion
    }
}
