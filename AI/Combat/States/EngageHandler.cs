// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles tactical movement toward enemy last-known-positions during engagements.
    /// Guides advance cautiously while coordinating stance and squad path offsets.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Fields

        /// <summary>
        /// The bot owner entity.
        /// </summary>
        private readonly BotOwner _bot;

        /// <summary>
        /// The component cache containing bot systems and helpers.
        /// </summary>
        private readonly BotComponentCache _cache;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="EngageHandler"/> class.
        /// </summary>
        /// <param name="cache">The bot component cache reference.</param>
        public EngageHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Determines whether the Engage state should be active.
        /// </summary>
        /// <returns>True if the bot should continue engaging; otherwise, false.</returns>
        public bool ShallUseNow()
        {
            if (this._cache.Combat == null)
            {
                return false;
            }

            return this._cache.Combat.LastKnownEnemyPos.HasValue && !this.CanAttack();
        }

        /// <summary>
        /// Determines if the bot is close enough to transition to Attack state.
        /// </summary>
        /// <returns>True if ready to attack; otherwise, false.</returns>
        public bool CanAttack()
        {
            if (this._cache.Combat == null || !this._cache.Combat.LastKnownEnemyPos.HasValue)
            {
                return false;
            }

            Vector3 enemyPos = this._cache.Combat.LastKnownEnemyPos.Value;
            float distance = Vector3.Distance(this._bot.Position, enemyPos);
            float range = 25.0f;

            if (this._cache.AIRefactoredBotOwner != null &&
                this._cache.AIRefactoredBotOwner.PersonalityProfile != null)
            {
                range = this._cache.AIRefactoredBotOwner.PersonalityProfile.EngagementRange;
            }

            return distance < range;
        }

        /// <summary>
        /// Guides the bot toward the last known enemy position with cautious stance updates.
        /// </summary>
        public void Tick()
        {
            if (this._cache.Combat == null || !this._cache.Combat.LastKnownEnemyPos.HasValue)
            {
                return;
            }

            Vector3 targetPos = this._cache.Combat.LastKnownEnemyPos.Value;
            Vector3 destination = targetPos;

            if (this._cache.SquadPath != null)
            {
                destination = this._cache.SquadPath.ApplyOffsetTo(targetPos);
            }

            BotMovementHelper.SmoothMoveTo(this._bot, destination);
            this._cache.Combat.TrySetStanceFromNearbyCover(destination);
        }

        #endregion
    }
}
