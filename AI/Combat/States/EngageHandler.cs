// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All errors are locally isolated, never disables itself, never triggers fallback AI.
//   Anti-teleport: All movement is smooth, validated, and strictly path-based.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Guides tactical movement toward enemy's last known location.
    /// Supports cautious advancement and squad-aware pathing.
    /// All movement is path-based only—teleportation is strictly forbidden.
    /// Bulletproof: all failures are isolated; never disables itself or squadmates.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25.0f;
        private const float MinAdvanceDelay = 0.05f;
        private const float MaxAdvanceDelay = 0.15f;
        private const float MaxNavSampleRadius = 1.5f;
        private const float MaxAdvanceDistance = 16.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;
        private float _lastAdvanceTime;

        #endregion

        #region Constructor

        public EngageHandler(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
            float profileRange = cache?.PersonalityProfile?.EngagementRange ?? 0f;
            _fallbackRange = profileRange > 0f ? profileRange : DefaultEngagementRange;
            _lastAdvanceTime = -1000f;
        }

        #endregion

        #region Public API

        public bool ShallUseNow()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && !IsWithinRange(pos);
        }

        public bool CanAttack()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && IsWithinRange(pos);
        }

        public bool IsEngaging()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && !IsWithinRange(pos);
        }

        public void Tick()
        {
            if (!IsCombatCapable())
                return;

            try
            {
                if (!TryGetLastKnownEnemy(out Vector3 enemyPos))
                    return;

                float now = Time.time;
                float hesitation = UnityEngine.Random.Range(MinAdvanceDelay, MaxAdvanceDelay);
                if (now - _lastAdvanceTime < hesitation)
                    return;

                _lastAdvanceTime = now;

                Vector3 destination = enemyPos;

                // Apply squad path offset if present
                if (_cache.SquadPath != null)
                {
                    try { destination = _cache.SquadPath.ApplyOffsetTo(enemyPos); }
                    catch { destination = enemyPos; }
                }

                // Validate destination and always route movement through the helper
                Vector3 safeDest = GetNavMeshSafeDestination(_bot.Position, destination);

                if (!IsValid(safeDest))
                    return;

                float advanceSqr = (safeDest - _bot.Position).sqrMagnitude;
                if (_bot.Mover != null && advanceSqr < (MaxAdvanceDistance * MaxAdvanceDistance))
                {
                    // Use cohesion from personality for more human-like spacing and engagement
                    float cohesion = 1.0f;
                    if (_cache?.PersonalityProfile != null)
                        cohesion = Mathf.Clamp(_cache.PersonalityProfile.Cohesion, 0.7f, 1.3f);

                    BotMovementHelper.SmoothMoveTo(_bot, safeDest, slow: false, cohesionScale: cohesion);
                    _cache.PoseController?.TrySetStanceFromNearbyCover(safeDest);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] Tick error: {ex}");
            }
        }

        #endregion

        #region Internal Helpers

        private bool IsCombatCapable()
        {
            return _bot != null && _cache != null && _cache.Combat != null;
        }

        private bool TryGetLastKnownEnemy(out Vector3 result)
        {
            result = _cache?.Combat?.LastKnownEnemyPos ?? Vector3.zero;
            return IsValid(result) && result != Vector3.zero;
        }

        private bool IsWithinRange(Vector3 enemyPos)
        {
            return (_bot.Position - enemyPos).sqrMagnitude < (_fallbackRange * _fallbackRange);
        }

        private static bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z) && pos != Vector3.zero;
        }

        private static Vector3 GetNavMeshSafeDestination(Vector3 current, Vector3 candidate)
        {
            UnityEngine.AI.NavMeshHit navHit;
            if (UnityEngine.AI.NavMesh.SamplePosition(candidate, out navHit, MaxNavSampleRadius, UnityEngine.AI.NavMesh.AllAreas))
            {
                float dist = (navHit.position - current).magnitude;
                if (dist < 0.08f || dist > MaxAdvanceDistance)
                    return current;
                return navHit.position;
            }
            return current;
        }

        #endregion
    }
}
