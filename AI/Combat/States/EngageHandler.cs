// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Guides tactical movement toward enemy's last known location.
    /// Supports cautious advancement and squad-aware pathing.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="EngageHandler"/> class.
        /// </summary>
        /// <param name="cache">BotComponentCache to bind with this handler.</param>
        public EngageHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new InvalidOperationException("[EngageHandler] Initialization failed: cache or Bot is null.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
            this._fallbackRange = cache.PersonalityProfile.EngagementRange > 0f
                ? cache.PersonalityProfile.EngagementRange
                : DefaultEngagementRange;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines if bot should enter or remain in Engage state.
        /// </summary>
        public bool ShallUseNow()
        {
            CombatStateMachine combat = this._cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   this.TryGetLastKnownEnemy(combat, out enemyPos) &&
                   !this.IsWithinRange(enemyPos);
        }

        /// <summary>
        /// Returns true if the bot is close enough to switch from engage to attack.
        /// </summary>
        public bool CanAttack()
        {
            CombatStateMachine combat = this._cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   this.TryGetLastKnownEnemy(combat, out enemyPos) &&
                   this.IsWithinRange(enemyPos);
        }

        /// <summary>
        /// Ticks the engage behavior, advancing toward the enemy's last known position.
        /// </summary>
        public void Tick()
        {
            CombatStateMachine combat = this._cache.Combat;
            Vector3 enemyPos;

            if (combat == null || !this.TryGetLastKnownEnemy(combat, out enemyPos))
            {
                return;
            }

            Vector3 destination = this._cache.SquadPath != null
                ? this._cache.SquadPath.ApplyOffsetTo(enemyPos)
                : enemyPos;

            if (float.IsNaN(destination.x) || float.IsNaN(destination.y) || float.IsNaN(destination.z))
            {
                return;
            }

            BotMovementHelper.SmoothMoveTo(this._bot, destination);
            combat.TrySetStanceFromNearbyCover(destination);
        }

        /// <summary>
        /// Returns true if bot is actively engaging based on memory, not vision.
        /// </summary>
        public bool IsEngaging()
        {
            CombatStateMachine combat = this._cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   this.TryGetLastKnownEnemy(combat, out enemyPos) &&
                   !this.IsWithinRange(enemyPos);
        }

        #endregion

        #region Private Methods

        private bool TryGetLastKnownEnemy(CombatStateMachine combat, out Vector3 result)
        {
            result = combat.LastKnownEnemyPos;
            return result != Vector3.zero;
        }

        private bool IsWithinRange(Vector3 enemyPos)
        {
            float dist = Vector3.Distance(this._bot.Position, enemyPos);
            return dist < this._fallbackRange;
        }

        #endregion
    }
}
