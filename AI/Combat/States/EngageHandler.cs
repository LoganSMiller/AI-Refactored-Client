// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Guides tactical movement toward enemy's last known location.
    /// Supports cautious advancement and squad-aware pathing.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;

        #endregion

        #region Constructor

        public EngageHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentException("[EngageHandler] Invalid bot cache.");
            }

            _cache = cache;
            _bot = cache.Bot;

            float range = cache.PersonalityProfile != null ? cache.PersonalityProfile.EngagementRange : 0f;
            _fallbackRange = range > 0f ? range : DefaultEngagementRange;
        }

        #endregion

        #region Public Methods

        public bool ShallUseNow()
        {
            if (_cache.IsFallbackMode || _bot == null)
            {
                return false;
            }

            CombatStateMachine combat = _cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   TryGetLastKnownEnemy(combat, out enemyPos) &&
                   !IsWithinRange(enemyPos);
        }

        public bool CanAttack()
        {
            if (_cache.IsFallbackMode || _bot == null)
            {
                return false;
            }

            CombatStateMachine combat = _cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   TryGetLastKnownEnemy(combat, out enemyPos) &&
                   IsWithinRange(enemyPos);
        }

        public void Tick()
        {
            if (_cache.IsFallbackMode || _bot == null)
            {
                return;
            }

            CombatStateMachine combat = _cache.Combat;
            Vector3 enemyPos;

            if (combat == null || !TryGetLastKnownEnemy(combat, out enemyPos))
            {
                return;
            }

            Vector3 destination = _cache.SquadPath != null
                ? _cache.SquadPath.ApplyOffsetTo(enemyPos)
                : enemyPos;

            if (!IsValid(destination) || !BotNavValidator.Validate(_bot, "EngageHandlerDestination"))
            {
                destination = FallbackNavPointProvider.GetSafePoint(_bot.Position);
            }

            BotMovementHelper.SmoothMoveTo(_bot, destination);
            combat.TrySetStanceFromNearbyCover(destination);
        }

        public bool IsEngaging()
        {
            if (_cache.IsFallbackMode || _bot == null)
            {
                return false;
            }

            CombatStateMachine combat = _cache.Combat;
            Vector3 enemyPos;

            return combat != null &&
                   TryGetLastKnownEnemy(combat, out enemyPos) &&
                   !IsWithinRange(enemyPos);
        }

        #endregion

        #region Private Methods

        private bool TryGetLastKnownEnemy(CombatStateMachine combat, out Vector3 result)
        {
            result = combat.LastKnownEnemyPos;

            return result != Vector3.zero &&
                   !float.IsNaN(result.x) &&
                   !float.IsNaN(result.y) &&
                   !float.IsNaN(result.z);
        }

        private bool IsWithinRange(Vector3 enemyPos)
        {
            return Vector3.Distance(_bot.Position, enemyPos) < _fallbackRange;
        }

        private bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z);
        }

        #endregion
    }
}
