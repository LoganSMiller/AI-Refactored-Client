// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles investigation behavior when a bot hears or senses enemy presence without visual contact.
    /// Bots move toward the source and dynamically search nearby points to simulate real player behavior.
    /// </summary>
    public sealed class InvestigateHandler
    {
        #region Constants

        private const float InvestigateCooldown = 10.0f;
        private const float ScanRadius = 4.0f;
        private const float SoundReactTime = 1.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotTacticalMemory _memory;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="InvestigateHandler"/> class.
        /// </summary>
        /// <param name="cache">Bot component cache reference.</param>
        public InvestigateHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.TacticalMemory == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            this._cache = cache;
            this._bot = cache.Bot;
            this._memory = cache.TacticalMemory;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines the best position to investigate: enemy memory, last heard sound, or a random nearby position.
        /// </summary>
        /// <param name="lastKnownEnemyPos">Optional last known enemy position.</param>
        /// <returns>A target position to move toward for investigation.</returns>
        public Vector3 GetInvestigateTarget(Vector3? lastKnownEnemyPos)
        {
            if (lastKnownEnemyPos.HasValue)
            {
                return lastKnownEnemyPos.Value;
            }

            Vector3? memoryPos = this._memory.GetRecentEnemyMemory();
            if (memoryPos.HasValue)
            {
                return memoryPos.Value;
            }

            return this.RandomNearbyPosition();
        }

        /// <summary>
        /// Moves the bot toward the investigation target and marks the area as cleared on arrival.
        /// </summary>
        /// <param name="target">Destination to investigate.</param>
        public void Investigate(Vector3 target)
        {
            Vector3 destination = this._cache.SquadPath?.ApplyOffsetTo(target) ?? target;

            BotMovementHelper.SmoothMoveTo(this._bot, destination);
            this._memory.MarkCleared(destination);
            this._cache.Combat?.TrySetStanceFromNearbyCover(destination);
        }

        /// <summary>
        /// Determines whether the bot should switch to Investigate behavior based on sound memory and caution.
        /// </summary>
        /// <param name="time">Current world time.</param>
        /// <param name="lastTransition">Last time a state transition occurred.</param>
        /// <returns>True if investigation behavior should begin.</returns>
        public bool ShallUseNow(float time, float lastTransition)
        {
            BotPersonalityProfile? profile = this._cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null || profile.Caution < 0.3f)
            {
                return false;
            }

            return this._cache.LastHeardTime + SoundReactTime > time && time - lastTransition > 1.25f;
        }

        /// <summary>
        /// Determines if the bot has finished investigating the area.
        /// </summary>
        /// <param name="now">Current time.</param>
        /// <param name="lastHitTime">Time the investigation started.</param>
        /// <param name="cooldown">How long the investigation should last.</param>
        /// <returns>True if investigation should end.</returns>
        public bool ShouldExit(float now, float lastHitTime, float cooldown)
        {
            return now - lastHitTime > cooldown;
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Generates a random flat position near the bot to simulate cautious local searching.
        /// </summary>
        /// <returns>A randomized nearby search position.</returns>
        private Vector3 RandomNearbyPosition()
        {
            Vector3 basePos = this._bot.Position;
            Vector3 jitter = UnityEngine.Random.insideUnitSphere * ScanRadius;
            jitter.y = 0f;
            return basePos + jitter;
        }

        #endregion
    }
}
