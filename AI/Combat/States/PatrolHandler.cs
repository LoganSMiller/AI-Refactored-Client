// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All failures are locally isolated, never disables itself, never triggers fallback AI.
//   Realism Pass: All movement, fallback, and voice logic mimics real player patrolling.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot behavior while in Patrol state.
    /// Evaluates suppression, panic, wounds, or nearby deaths to trigger fallback, and moves bots between hotspots.
    /// Bulletproof: All failures are locally isolated, never disables itself, never triggers fallback AI.
    /// </summary>
    public sealed class PatrolHandler
    {
        #region Constants

        private const float DeadAllyRadius = 10f;
        private const float InvestigateSoundDelay = 3f;
        private const float PanicThreshold = 0.25f;
        private const float MinHumanDelay = 0.07f;
        private const float MaxHumanDelay = 0.21f;
        private const float MinHotspotRandomOffset = 0.17f;
        private const float MaxHotspotRandomOffset = 1.1f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _minStateDuration;
        private readonly float _switchCooldownBase;

        private float _nextSwitchTime;
        private float _lastPatrolTime = -1000f;

        #endregion

        #region Constructor

        public PatrolHandler(BotComponentCache cache, float minStateDuration, float switchCooldownBase)
        {
            _cache = cache;
            _bot = cache?.Bot;
            _minStateDuration = minStateDuration;
            _switchCooldownBase = switchCooldownBase;
        }

        #endregion

        #region API

        public bool ShallUseNow() => true;

        public bool ShouldTransitionToInvestigate(float time)
        {
            if (_cache?.Combat == null || _cache.AIRefactoredBotOwner?.PersonalityProfile == null)
                return false;

            try
            {
                if (_cache.AIRefactoredBotOwner.PersonalityProfile.Caution <= 0.35f)
                    return false;

                return (_cache.LastHeardTime + InvestigateSoundDelay > time) &&
                       (time - _cache.Combat.LastStateChangeTime > _minStateDuration);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] ShouldTransitionToInvestigate failed: {ex}");
                return false;
            }
        }

        public void Tick(float time)
        {
            if (_bot == null || _cache == null)
                return;

            try
            {
                float delay = UnityEngine.Random.Range(MinHumanDelay, MaxHumanDelay);
                if (time - _lastPatrolTime < delay)
                    return;

                _lastPatrolTime = time;

                if (ShouldTriggerFallback(time))
                {
                    Vector3 fallback = TryGetFallbackPosition();
                    if (!BotNavHelper.TryGetSafeTarget(_bot, out fallback) || !IsVectorValid(fallback))
                        fallback = _bot.Position;

                    _cache.Combat?.TriggerFallback(fallback);
                    return;
                }

                if (time < _nextSwitchTime)
                    return;

                HotspotRegistry.Hotspot hotspot = null;
                try { hotspot = HotspotRegistry.GetRandomHotspot(); }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError($"[PatrolHandler] Hotspot lookup failed: {ex}");
                    return;
                }

                if (hotspot == null || !IsVectorValid(hotspot.Position))
                {
                    Plugin.LoggerInstance.LogWarning("[PatrolHandler] Hotspot was null or invalid.");
                    return;
                }

                Vector3 offset = UnityEngine.Random.insideUnitSphere * UnityEngine.Random.Range(MinHotspotRandomOffset, MaxHotspotRandomOffset);
                offset.y = 0f;

                Vector3 target = hotspot.Position + offset;

                if (_cache.SquadPath != null)
                {
                    try { target = _cache.SquadPath.ApplyOffsetTo(target); }
                    catch { }
                }

                if (!BotNavHelper.TryGetSafeTarget(_bot, out target) || !IsVectorValid(target))
                    target = _bot.Position;

                if (_bot.Mover != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, target);
                    BotCoverHelper.TrySetStanceFromNearbyCover(_cache, target);
                }
                else
                {
                    Plugin.LoggerInstance.LogWarning("[PatrolHandler] BotMover missing.");
                    return;
                }

                _nextSwitchTime = time + UnityEngine.Random.Range(_switchCooldownBase, _switchCooldownBase + 18f);

                if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null && UnityEngine.Random.value < 0.25f)
                {
                    try
                    {
                        _bot.BotTalk.TrySay(UnityEngine.Random.value < 0.5f
                            ? EPhraseTrigger.GoForward
                            : EPhraseTrigger.CoverMe);
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] Tick failed: {ex}");
            }
        }

        #endregion

        #region Danger Detection

        private bool ShouldTriggerFallback(float time)
        {
            if (_bot == null || _cache == null)
                return false;

            try
            {
                if (_cache.PanicHandler?.GetComposureLevel() < PanicThreshold)
                    return true;

                if (_cache.InjurySystem?.ShouldHeal(time) == true)
                    return true;

                if (_cache.Suppression?.IsSuppressed() == true)
                    return true;

                var group = _bot.BotsGroup;
                if (group == null)
                    return false;

                Vector3 self = _bot.Position;
                for (int i = 0; i < group.MembersCount; i++)
                {
                    var member = group.Member(i);
                    if (member != null && member != _bot && member.IsDead)
                    {
                        if (Vector3.Distance(self, member.Position) < DeadAllyRadius)
                            return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] ShouldTriggerFallback failed: {ex}");
                return false;
            }
        }

        #endregion

        #region Fallback Logic

        private Vector3 TryGetFallbackPosition()
        {
            if (_bot == null)
                return Vector3.zero;

            try
            {
                Vector3 retreat = _bot.Position - _bot.LookDirection.normalized * 7.5f;
                retreat += UnityEngine.Random.insideUnitSphere * 0.45f;
                retreat.y = _bot.Position.y;

                if (!BotNavHelper.TryGetSafeTarget(_bot, out retreat) || !IsVectorValid(retreat))
                    retreat = _bot.Position;

                return retreat;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] TryGetFallbackPosition failed: {ex}");
                return _bot.Position;
            }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }

        #endregion
    }
}
