// <auto-generated>
//   AI-Refactored: AttackHandler.cs (Final Overlay-Only, Max Realism, June 2025)
//   Overlay-driven, anticipation-rich, squad/cover/door-aware attack movement. No per-frame MoveTo, ever.
//   Bulletproof error handling, full pooling, null-guarded, and parity across all platforms.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Pools;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Manages aggressive advance, cover, and stance logic for AIRefactored bot attacks.
    /// All movement is overlay/event-driven—never per-frame. Maximum realism and squad/cover logic.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Constants

        private const float PositionUpdateThresholdSqr = 0.31f;
        private const float MicroAdjustRadius = 0.43f;
        private const float MinAdvanceDistance = 1.14f;
        private const float MaxAggroDistance = 55.0f;
        private const float AdvanceIntervalMin = 0.17f;
        private const float AdvanceIntervalMax = 0.32f;
        private const float MoveBlendSpeed = 4.8f;
        private const float SafeMoveMax = 8.6f;
        private const float SafeMoveMin = 0.08f;
        private const float MaxNavmeshDeltaY = 1.98f;
        private const float AnticipatePauseMin = 0.09f;
        private const float AnticipatePauseMax = 0.16f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private Vector3 _lastTargetPosition;
        private bool _hasLastTarget;
        private float _nextAdvanceTime;
        private Vector3 _lastMoveDir;
        private float _anticipateUntil;
        private Vector3 _lastIssuedMove;
        private float _lastMoveTime;

        #endregion

        #region Initialization

        public AttackHandler(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
            _lastTargetPosition = Vector3.zero;
            _hasLastTarget = false;
            _nextAdvanceTime = 0f;
            _lastMoveDir = Vector3.zero;
            _anticipateUntil = 0f;
            _lastIssuedMove = Vector3.zero;
            _lastMoveTime = -10f;
        }

        #endregion

        #region State

        public void ClearTarget()
        {
            _hasLastTarget = false;
            _lastTargetPosition = Vector3.zero;
            _nextAdvanceTime = 0f;
            _lastMoveDir = Vector3.zero;
            _anticipateUntil = 0f;
            _lastIssuedMove = Vector3.zero;
            _lastMoveTime = -10f;
        }

        public bool ShallUseNow() => TryResolveEnemy(out _);

        #endregion

        #region Main Tick

        /// <summary>
        /// Called only from BotBrain. Overlay/event only. Never tick-moves.
        /// Handles anticipation, cover, stance, and NavMesh/door validation.
        /// </summary>
        public void Tick(float deltaTime)
        {
            try
            {
                if (_bot == null || _cache == null)
                    return;

                if (!TryResolveEnemy(out Player enemy))
                    return;

                Vector3 botPos = EFTPlayerUtil.GetPosition(_bot);
                Vector3 targetPos = EFTPlayerUtil.GetPosition(enemy);
                float distToTarget = (botPos - targetPos).magnitude;

                if (distToTarget > MaxAggroDistance)
                {
                    ClearTarget();
                    return;
                }

                float now = Time.time;
                float deltaSqr = (targetPos - _lastTargetPosition).sqrMagnitude;
                bool needsAdvance = !_hasLastTarget || deltaSqr > PositionUpdateThresholdSqr || now >= _nextAdvanceTime;

                // Anticipation: pause before big jumps
                if (needsAdvance && _anticipateUntil < now && _hasLastTarget && deltaSqr > 6.25f)
                {
                    _anticipateUntil = now + UnityEngine.Random.Range(AnticipatePauseMin, AnticipatePauseMax);
                    return;
                }

                if (needsAdvance && now >= _anticipateUntil)
                {
                    _lastTargetPosition = targetPos;
                    _hasLastTarget = true;
                    _nextAdvanceTime = now + UnityEngine.Random.Range(AdvanceIntervalMin, AdvanceIntervalMax);
                    if (deltaSqr > 12f)
                        _nextAdvanceTime += UnityEngine.Random.Range(0.09f, 0.17f);

                    Vector3 advancePoint = GetAdvancePoint(botPos, targetPos, distToTarget, out bool usedCover);

                    if (!IsAdvancePointSafe(botPos, advancePoint))
                        return;

                    float cohesion = Mathf.Clamp(_cache.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);
                    float overshoot = UnityEngine.Random.Range(-0.13f, 0.13f);
                    Vector3 moveDir = advancePoint - botPos;
                    moveDir.y = 0f;

                    if (moveDir.sqrMagnitude > 0.01f &&
                        (_lastIssuedMove - advancePoint).sqrMagnitude > 0.03f || now - _lastMoveTime > 0.66f)
                    {
                        if (_lastMoveDir == Vector3.zero)
                            _lastMoveDir = moveDir.normalized;

                        Vector3 blended = Vector3.Lerp(_lastMoveDir, moveDir.normalized, Mathf.Clamp01(deltaTime * MoveBlendSpeed)).normalized;
                        _lastMoveDir = blended;

                        Vector3 moveTarget = botPos + blended * Mathf.Clamp(moveDir.magnitude + overshoot, SafeMoveMin, SafeMoveMax);

                        // Only micro-drift if not suppressed (don't micro-move under fire)
                        if (!(_cache.Perception?.IsSuppressed ?? false))
                        {
                            moveTarget = BotMovementHelper.ApplyMicroDrift(
                                moveTarget,
                                _bot.ProfileId,
                                Time.frameCount,
                                _cache.PersonalityProfile
                            );
                        }

                        if (NavMesh.SamplePosition(moveTarget, out NavMeshHit hit, 0.65f, NavMesh.AllAreas))
                        {
                            Vector3 final = ClampY(hit.position, botPos);
                            if (final.y > -2.5f)
                            {
                                BotMovementHelper.SmoothMoveToSafe(_bot, final, slow: false, cohesion);
                                _lastIssuedMove = final;
                                _lastMoveTime = now;
                            }
                        }
                    }

                    SetStance(distToTarget, advancePoint, usedCover, _cache.Perception?.IsSuppressed ?? false);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Tick failed: " + ex);
            }
        }

        #endregion

        #region Advance/Cover/Validation

        private bool TryResolveEnemy(out Player result)
        {
            result = null;
            if (_cache?.ThreatSelector?.CurrentTarget is Player t && EFTPlayerUtil.IsValid(t))
            {
                result = t;
                return true;
            }

            if (_bot?.Memory?.GoalEnemy?.Person is Player fallback && EFTPlayerUtil.IsValid(fallback))
            {
                result = fallback;
                return true;
            }

            return false;
        }

        private Vector3 GetAdvancePoint(Vector3 botPos, Vector3 target, float dist, out bool usedCover)
        {
            usedCover = false;

            if (dist < MinAdvanceDistance)
            {
                Vector3 sidestep = Vector3.Cross(Vector3.up, _bot.LookDirection.normalized);
                float shuffle = UnityEngine.Random.Range(-1f, 1f) * MicroAdjustRadius;
                return target + sidestep * shuffle;
            }

            // Cover preference
            if (_cache.CoverPlanner != null && _cache.CoverPlanner.TryGetBestCoverNear(target, botPos, out Vector3 cover))
            {
                usedCover = true;
                Vector3 lateral = Vector3.Cross(Vector3.up, (target - cover).normalized);
                Vector3 candidate = cover + lateral * UnityEngine.Random.Range(-0.5f, 0.5f);
                return BotNavHelper.TryGetSafeTarget(_bot, out Vector3 safeCover) ? safeCover : candidate;
            }

            // General fallback point (NavMesh/door validated)
            return BotNavHelper.TryGetSafeTarget(_bot, out Vector3 fallback) ? fallback : botPos;
        }

        private void SetStance(float distance, Vector3 advancePos, bool usedCover, bool isSuppressed)
        {
            try
            {
                var pose = _cache.PoseController;
                if (pose == null) return;

                if (usedCover || distance < 7.2f)
                    pose.TrySetStanceFromNearbyCover(advancePos);
                else if (distance < 16.7f)
                    pose.Stand();

                if (isSuppressed)
                    pose.Crouch();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Stance logic failed: " + ex);
            }
        }

        private static bool IsAdvancePointSafe(Vector3 current, Vector3 target)
        {
            float dist = Vector3.Distance(current, target);
            if (dist < SafeMoveMin || dist > SafeMoveMax)
                return false;

            if (!NavMesh.SamplePosition(target, out var hit, 0.55f, NavMesh.AllAreas))
                return false;

            if (Mathf.Abs(hit.position.y - current.y) > MaxNavmeshDeltaY)
                return false;

            return !BotNavHelper.IsBlockedByClosedDoor(current, target);
        }

        private static Vector3 ClampY(Vector3 v, Vector3 basePos)
        {
            if (Mathf.Abs(v.y - basePos.y) > 3f || v.y < -2.5f)
                v.y = basePos.y;
            return v;
        }

        #endregion
    }
}
