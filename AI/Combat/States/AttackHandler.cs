// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls behavior during direct combat engagements.
    /// Drives toward target, aligns stance, and updates destination dynamically.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private Vector3? _lastTargetPosition;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes the attack handler with bot component cache.
        /// </summary>
        /// <param name="cache">The component cache for the bot.</param>
        public AttackHandler(BotComponentCache cache)
        {
            if (cache == null)
            {
                AIRefactoredController.Logger.LogError("[AttackHandler] Constructor failed: cache is null.");
                throw new ArgumentNullException(nameof(cache));
            }

            if (cache.Bot == null)
            {
                AIRefactoredController.Logger.LogError("[AttackHandler] Constructor failed: BotOwner is null.");
                throw new InvalidOperationException("AttackHandler requires a valid BotOwner.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Clears last known target position.
        /// </summary>
        public void ClearTarget()
        {
            this._lastTargetPosition = null;
        }

        /// <summary>
        /// Determines if the attack state should be used.
        /// </summary>
        /// <returns>True if the bot should use attack logic.</returns>
        public bool ShallUseNow()
        {
            Player? target = this.GetCurrentEnemy();
            return EFTPlayerUtil.IsValid(target);
        }

        /// <summary>
        /// Updates attack logic based on target position.
        /// </summary>
        /// <param name="time">Current game time.</param>
        public void Tick(float time)
        {
            Player? enemy = this.GetCurrentEnemy();
            if (!EFTPlayerUtil.IsValid(enemy))
            {
                return;
            }

            Transform? enemyTransform = EFTPlayerUtil.GetTransform(enemy);
            if (enemyTransform == null)
            {
                return;
            }

            Vector3 targetPosition = enemyTransform.position;

            if (!this._lastTargetPosition.HasValue ||
                (this._lastTargetPosition.Value - targetPosition).sqrMagnitude > 1.0f)
            {
                this._lastTargetPosition = targetPosition;

                Vector3 destination = this._cache.SquadPath != null
                    ? this._cache.SquadPath.ApplyOffsetTo(targetPosition)
                    : targetPosition;

                BotMovementHelper.SmoothMoveTo(this._bot, destination);
                BotCoverHelper.TrySetStanceFromNearbyCover(this._cache, destination);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Gets the current valid enemy, if any.
        /// </summary>
        /// <returns>The current enemy target or null.</returns>
        private Player? GetCurrentEnemy()
        {
            if (this._cache == null || this._bot == null)
            {
                return null;
            }

            if (this._cache.ThreatSelector?.CurrentTarget is Player target && EFTPlayerUtil.IsValid(target))
            {
                return target;
            }

            if (this._bot.Memory?.GoalEnemy?.Person is Player fallback && EFTPlayerUtil.IsValid(fallback))
            {
                return fallback;
            }

            return null;
        }

        #endregion
    }
}
