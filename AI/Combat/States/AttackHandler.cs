// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls direct combat engagement logic.
    /// Pushes toward the enemy, recalculates stance and movement based on distance, visibility, and cover presence.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Constants

        private const float PositionUpdateThresholdSqr = 1.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _lastTargetPosition;
        private bool _hasLastTarget;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes the attack handler with bot component cache.
        /// </summary>
        /// <param name="cache">The component cache for the bot.</param>
        public AttackHandler(BotComponentCache cache)
        {
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            BotOwner bot = cache.Bot;
            if (bot == null)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] BotOwner is null during construction.");
                throw new InvalidOperationException("AttackHandler requires a valid BotOwner.");
            }

            _cache = cache;
            _bot = bot;
            _lastTargetPosition = Vector3.zero;
            _hasLastTarget = false;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Clears last known enemy position tracking.
        /// </summary>
        public void ClearTarget()
        {
            _hasLastTarget = false;
            _lastTargetPosition = Vector3.zero;
        }

        /// <summary>
        /// Determines if the bot currently has a valid target to attack.
        /// </summary>
        /// <returns>True if a valid enemy is found.</returns>
        public bool ShallUseNow()
        {
            Player dummy;
            return TryResolveEnemy(out dummy);
        }

        /// <summary>
        /// Executes per-frame attack logic: move toward enemy and adjust stance.
        /// </summary>
        /// <param name="time">Current time value.</param>
        public void Tick(float time)
        {
            Player enemy;
            if (!TryResolveEnemy(out enemy))
            {
                return;
            }

            Transform transform = EFTPlayerUtil.GetTransform(enemy);
            if (transform == null)
            {
                return;
            }

            Vector3 currentPos = transform.position;

            Vector3[] deltaArray = TempVector3Pool.Rent(1);
            deltaArray[0] = currentPos - _lastTargetPosition;

            if (!_hasLastTarget || deltaArray[0].sqrMagnitude > PositionUpdateThresholdSqr)
            {
                _lastTargetPosition = currentPos;
                _hasLastTarget = true;

                Vector3 moveTarget = _cache.SquadPath != null
                    ? _cache.SquadPath.ApplyOffsetTo(currentPos)
                    : currentPos;

                BotMovementHelper.SmoothMoveTo(_bot, moveTarget);
                BotCoverHelper.TrySetStanceFromNearbyCover(_cache, moveTarget);
            }

            TempVector3Pool.Return(deltaArray);
        }

        #endregion

        #region Private Methods

        private bool TryResolveEnemy(out Player result)
        {
            result = null;

            BotThreatSelector selector = _cache.ThreatSelector;
            if (selector != null && selector.CurrentTarget is Player player && EFTPlayerUtil.IsValid(player))
            {
                result = player;
                return true;
            }

            if (_bot.Memory != null && _bot.Memory.GoalEnemy != null)
            {
                Player fallback = _bot.Memory.GoalEnemy.Person as Player;
                if (fallback != null && EFTPlayerUtil.IsValid(fallback))
                {
                    result = fallback;
                    return true;
                }
            }

            return false;
        }

        #endregion
    }
}
