// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls behavior during direct combat engagements.
    /// Drives toward target, aligns stance, and updates destination dynamically.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Fields

        /// <summary>
        /// The bot owner entity.
        /// </summary>
        private readonly BotOwner _bot;

        /// <summary>
        /// The component cache containing bot systems and helpers.
        /// </summary>
        private readonly BotComponentCache _cache;

        /// <summary>
        /// The last target position moved toward.
        /// </summary>
        private Vector3? _lastTargetPosition;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="AttackHandler"/> class.
        /// </summary>
        /// <param name="cache">The component cache for the bot.</param>
        public AttackHandler(BotComponentCache cache)
        {
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            if (cache.Bot == null)
            {
                throw new ArgumentNullException(nameof(cache.Bot));
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Clears the cached attack destination.
        /// </summary>
        public void ClearTarget()
        {
            this._lastTargetPosition = null;
        }

        /// <summary>
        /// Returns true if the bot currently has a valid, alive enemy target.
        /// </summary>
        /// <returns>True if the enemy is alive and valid; otherwise, false.</returns>
        public bool ShallUseNow()
        {
            IPlayer? target = this.GetCurrentEnemy();
            return target != null &&
                   target.HealthController != null &&
                   target.HealthController.IsAlive;
        }

        /// <summary>
        /// Executes attack logic each frame: pursue, reposition, and update stance.
        /// </summary>
        /// <param name="time">Current game time.</param>
        public void Tick(float time)
        {
            IPlayer? enemy = this.GetCurrentEnemy();
            if (enemy == null || enemy.HealthController == null || !enemy.HealthController.IsAlive)
            {
                return;
            }

            Vector3 targetPosition = enemy.Transform.position;
            if (!this._lastTargetPosition.HasValue ||
                (this._lastTargetPosition.Value - targetPosition).sqrMagnitude > 1.0f)
            {
                this._lastTargetPosition = targetPosition;

                Vector3 destination = this._cache.SquadPath != null
                    ? this._cache.SquadPath.ApplyOffsetTo(targetPosition)
                    : targetPosition;

                BotMovementHelper.SmoothMoveTo(this._bot, destination);
                BotCoverHelper.TrySetStanceFromNearbyCover(this._cache, destination);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Gets the current enemy target from threat selector or fallback memory.
        /// </summary>
        /// <returns>The IPlayer enemy target, or null if none available.</returns>
        private IPlayer? GetCurrentEnemy()
        {
            if (this._cache != null &&
                this._cache.ThreatSelector != null &&
                this._cache.ThreatSelector.CurrentTarget != null)
            {
                return this._cache.ThreatSelector.CurrentTarget;
            }

            if (this._bot != null &&
                this._bot.Memory != null &&
                this._bot.Memory.GoalEnemy != null &&
                this._bot.Memory.GoalEnemy.Person != null)
            {
                return this._bot.Memory.GoalEnemy.Person;
            }

            return null;
        }

        #endregion
    }
}
