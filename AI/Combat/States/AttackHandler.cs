// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls direct combat engagement logic.
    /// Pushes toward the enemy, recalculates stance and movement based on distance, visibility, and cover presence.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _lastTargetPosition;
        private bool _hasLastTarget;

        private const float PositionUpdateThresholdSqr = 1.0f;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes the attack handler with bot component cache.
        /// </summary>
        /// <param name="cache">The component cache for the bot.</param>
        public AttackHandler(BotComponentCache cache)
        {
            if (cache == null)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Constructor failed: cache is null.");
                throw new ArgumentNullException(nameof(cache));
            }

            if (cache.Bot == null)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Constructor failed: BotOwner is null.");
                throw new InvalidOperationException("AttackHandler requires a valid BotOwner.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
            this._lastTargetPosition = Vector3.zero;
            this._hasLastTarget = false;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Resets last tracked enemy position.
        /// </summary>
        public void ClearTarget()
        {
            this._hasLastTarget = false;
            this._lastTargetPosition = Vector3.zero;
        }

        /// <summary>
        /// Determines if the bot has a valid reason to enter the attack state.
        /// </summary>
        /// <returns>True if a valid enemy target exists.</returns>
        public bool ShallUseNow()
        {
            return this.ResolveEnemy(out Player resolved) && EFTPlayerUtil.IsValid(resolved);
        }

        /// <summary>
        /// Updates bot movement and stance toward enemy.
        /// </summary>
        /// <param name="time">Current world time.</param>
        public void Tick(float time)
        {
            Player enemy;
            if (!this.ResolveEnemy(out enemy))
            {
                return;
            }

            Transform enemyTransform = EFTPlayerUtil.GetTransform(enemy);
            if (enemyTransform == null)
            {
                return;
            }

            Vector3 currentPosition = enemyTransform.position;

            if (!this._hasLastTarget || (currentPosition - this._lastTargetPosition).sqrMagnitude > PositionUpdateThresholdSqr)
            {
                this._lastTargetPosition = currentPosition;
                this._hasLastTarget = true;

                Vector3 destination = (this._cache.SquadPath != null)
                    ? this._cache.SquadPath.ApplyOffsetTo(currentPosition)
                    : currentPosition;

                BotMovementHelper.SmoothMoveTo(this._bot, destination);
                BotCoverHelper.TrySetStanceFromNearbyCover(this._cache, destination);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Resolves the most current known enemy.
        /// </summary>
        /// <param name="resolved">Output enemy player if found.</param>
        /// <returns>True if a valid enemy was found.</returns>
        private bool ResolveEnemy(out Player resolved)
        {
            resolved = null;

            if (this._cache.ThreatSelector != null)
            {
                Player current = this._cache.ThreatSelector.CurrentTarget as Player;
                if (EFTPlayerUtil.IsValid(current))
                {
                    resolved = current;
                    return true;
                }
            }

            if (this._bot.Memory != null && this._bot.Memory.GoalEnemy != null)
            {
                Player fallback = this._bot.Memory.GoalEnemy.Person as Player;
                if (EFTPlayerUtil.IsValid(fallback))
                {
                    resolved = fallback;
                    return true;
                }
            }

            return false;
        }

        #endregion
    }
}
