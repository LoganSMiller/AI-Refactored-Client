// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles suppression fallback, retreat routing, and cover movement during engagements.
    /// </summary>
    public sealed class FallbackHandler
    {
        #region Constants

        private const float MinArrivalDistance = 2.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly List<Vector3> _currentFallbackPath;

        private Vector3 _fallbackTarget;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes the fallback handler for the given bot.
        /// </summary>
        /// <param name="cache">Component cache of the bot.</param>
        public FallbackHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentException("[FallbackHandler] Cache or Bot is null.");
            }

            this._cache = cache;
            this._bot = cache.Bot;
            this._fallbackTarget = this._bot.Position;
            this._currentFallbackPath = new List<Vector3>(8);
        }

        #endregion

        #region Public API

        /// <summary>
        /// Gets the fallback destination currently assigned.
        /// </summary>
        public Vector3 GetFallbackPosition()
        {
            return this._fallbackTarget;
        }

        /// <summary>
        /// Returns the fallback destination if valid; otherwise returns a default position.
        /// </summary>
        public Vector3 GetFallbackPositionOrDefault(Vector3 defaultPos)
        {
            return this.HasValidFallbackPath() ? this._fallbackTarget : defaultPos;
        }

        /// <summary>
        /// Checks if a fallback path exists and is viable.
        /// </summary>
        public bool HasValidFallbackPath()
        {
            return this._currentFallbackPath.Count >= 2;
        }

        /// <summary>
        /// Assigns a raw fallback target directly.
        /// </summary>
        public void SetFallbackTarget(Vector3 target)
        {
            if (float.IsNaN(target.x) || float.IsNaN(target.y) || float.IsNaN(target.z))
            {
                Plugin.LoggerInstance.LogWarning("[FallbackHandler] Ignored fallback target with NaN values.");
                return;
            }

            this._fallbackTarget = target;
        }

        /// <summary>
        /// Sets a fallback path and assigns the last point as target.
        /// </summary>
        public void SetFallbackPath(List<Vector3> path)
        {
            if (path == null || path.Count < 2)
            {
                Plugin.LoggerInstance.LogWarning("[FallbackHandler] Rejected fallback path: insufficient length.");
                return;
            }

            this._currentFallbackPath.Clear();
            for (int i = 0, len = path.Count; i < len; i++)
            {
                this._currentFallbackPath.Add(path[i]);
            }

            this._fallbackTarget = path[path.Count - 1];
        }

        /// <summary>
        /// Returns true if fallback is still necessary based on current position.
        /// </summary>
        public bool ShallUseNow(float time)
        {
            return Vector3.Distance(this._bot.Position, this._fallbackTarget) > MinArrivalDistance;
        }

        /// <summary>
        /// Determines if suppression fallback should trigger based on time and panic state.
        /// </summary>
        public bool ShouldTriggerSuppressedFallback(float now, float lastStateChangeTime, float minStateDuration)
        {
            return this._cache.Suppression != null &&
                   this._cache.Suppression.IsSuppressed() &&
                   (now - lastStateChangeTime) >= minStateDuration;
        }

        /// <summary>
        /// Executes fallback move, updates cover and optionally transitions state if arrived.
        /// </summary>
        /// <param name="time">Current time.</param>
        /// <param name="forceState">Callback to transition to a different state.</param>
        public void Tick(float time, Action<CombatState, float> forceState)
        {
            if (float.IsNaN(this._fallbackTarget.x) || float.IsNaN(this._fallbackTarget.y) || float.IsNaN(this._fallbackTarget.z))
            {
                Plugin.LoggerInstance.LogWarning("[FallbackHandler] Skipped Tick: fallback target was invalid.");
                return;
            }

            Vector3 currentPos = this._bot.Position;
            float dist = Vector3.Distance(currentPos, this._fallbackTarget);

            BotMovementHelper.SmoothMoveTo(this._bot, this._fallbackTarget);
            BotCoverHelper.TrySetStanceFromNearbyCover(this._cache, this._fallbackTarget);

            if (dist < MinArrivalDistance)
            {
                forceState(CombatState.Patrol, time);

                if (!FikaHeadlessDetector.IsHeadless && this._bot.BotTalk != null)
                {
                    this._bot.BotTalk.TrySay(EPhraseTrigger.NeedHelp);
                }
            }
        }

        /// <summary>
        /// Returns true if fallback logic is still in motion.
        /// </summary>
        public bool IsActive()
        {
            return Vector3.Distance(this._bot.Position, this._fallbackTarget) > MinArrivalDistance;
        }

        #endregion
    }
}
