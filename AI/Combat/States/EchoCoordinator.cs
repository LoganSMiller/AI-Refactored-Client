// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates squad echo behavior for fallback, investigate, and enemy spotting.
    /// Ensures bots react realistically to group triggers and maintain cohesion.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4f;
        private const float MaxEchoRange = 40f;
        private const float BaseFallbackDistance = 6f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private float _lastEchoFallbackTime;
        private float _lastEchoInvestigateTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="EchoCoordinator"/> class.
        /// </summary>
        /// <param name="cache">Bot component cache reference.</param>
        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache ?? throw new System.ArgumentNullException(nameof(cache));
            _bot = cache.Bot ?? throw new System.ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public API

        /// <summary>
        /// Orders nearby squadmates to fallback from danger.
        /// </summary>
        /// <param name="retreatPosition">Position to fallback from.</param>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            if (_bot.BotsGroup == null || Time.time - _lastEchoFallbackTime < EchoCooldown)
            {
                return;
            }

            for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
            {
                BotOwner? mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate))
                {
                    continue;
                }

                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache == null || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                {
                    continue;
                }

                Vector3 direction = mate.LookDirection.normalized;
                Vector3 fallback = mate.Position - direction * BaseFallbackDistance;

                mateCache.Combat.TriggerFallback(fallback);
            }

            _lastEchoFallbackTime = Time.time;
        }

        /// <summary>
        /// Orders nearby squadmates to investigate a disturbance.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            if (_bot.BotsGroup == null || Time.time - _lastEchoInvestigateTime < EchoCooldown)
            {
                return;
            }

            for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
            {
                BotOwner? mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate))
                {
                    continue;
                }

                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache == null || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                {
                    continue;
                }

                mateCache.Combat.NotifyEchoInvestigate();
            }

            _lastEchoInvestigateTime = Time.time;
        }

        /// <summary>
        /// Broadcasts enemy position to squadmates within echo range.
        /// </summary>
        /// <param name="enemyPosition">Enemy's last known position.</param>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            if (_bot.BotsGroup == null)
            {
                return;
            }

            for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
            {
                BotOwner? mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate))
                {
                    continue;
                }

                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache != null)
                {
                    mateCache.TacticalMemory?.RecordEnemyPosition(enemyPosition);
                }
            }
        }

        #endregion

        #region Internal Logic

        private bool CanAcceptEcho(BotComponentCache cache)
        {
            if (cache.IsBlinded || (cache.PanicHandler?.IsPanicking ?? false))
            {
                return false;
            }

            BotPersonalityProfile? profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            return profile != null && profile.Caution >= 0.2f;
        }

        private bool IsValidSquadmate(BotOwner? mate)
        {
            return mate != null &&
                   mate != _bot &&
                   !mate.IsDead &&
                   Vector3.Distance(mate.Position, _bot.Position) <= MaxEchoRange;
        }

        #endregion
    }
}
