// <auto-generated>
//   AI-Refactored: EchoCoordinator.cs (Supreme Arbitration Overlay/Event Edition, Beyond Diamond, June 2025, Max Realism)
//   100% overlay/event squad comms/fallback/investigation, triple-guarded, anti-spam, anti-clump, pooled, SPT/FIKA/headless/client parity.
//   All overlay moves go through BotOverlayManager/BotOverlayType, NavMesh+Y validation, post-NavMesh drift, dedup/cooldown, anticipation/lockout.
//   Full squad/role/personality overlays, voice, and error isolation. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Handles overlay-only, squad-aware fallback, echo, and investigation overlays, triple-guarded, pooled, error-isolated.
    /// All squad overlays are arbitration/event, NavMesh/Y safe, anti-parallel/anti-clump, personality/role/voice aware, and zero tick/coroutine-move.
    /// SPT/FIKA/client/headless parity. Bulletproof and beyond diamond.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600f;
        private const float IsolatedMateDistanceSqr = 81f;
        private const float AnticipationMin = 0.13f;
        private const float AnticipationMax = 0.23f;
        private const float OverlayMoveDedupSqr = 0.00011f;
        private const float OverlayMoveCooldown = 0.45f;
        private const float NavSampleRadius = 1.23f;
        private const float MaxNavmeshDeltaY = 3.1f;
        private const float SquadAntiClumpRadius = 1.55f;
        private const float SquadSpread = 1.19f;
        private const float DriftMagnitude = 0.37f;
        private const float VoiceCoverChance = 0.62f;
        private const float VoiceInvestigateChance = 0.77f;
        private const float VoiceContactFearful = 0.48f;
        private const float VoiceContactNormal = 0.21f;
        private const BotOverlayType OverlayType = BotOverlayType.SquadMove;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;
        private float _lastEnemySightingTime = float.NegativeInfinity;
        private int _lastEchoedEnemyCount = 0;
        private float _nextAnticipation = float.NegativeInfinity;

        #endregion

        #region Construction

        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
        }

        #endregion

        #region Squad Overlay APIs

        /// <summary>
        /// Overlay fallback: every squadmate gets a triple-guarded, pooled, NavMesh/Y/drifted fallback overlay (never disables, anti-clump, pooled).
        /// </summary>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoFallbackTime < EchoCooldown || now < _nextAnticipation)
                    return;

                _nextAnticipation = now + UnityEngine.Random.Range(AnticipationMin, AnticipationMax);
                bool isLeader = _bot.BotsGroup.Member(0) == _bot;
                Vector3 selfPos = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPos)) continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache)) continue;
                    if (!BotOverlayManager.CanIssueMove(mate, OverlayType)) continue;
                    if (BotMovementHelper.IsMovementPaused(mate) || BotMovementHelper.IsInInteractionState(mate))
                        continue;

                    Vector3 fallbackPoint = GetEFTSafeFallbackPoint(mate, retreatPosition, selfPos, mateCache);
                    fallbackPoint = ApplySquadAntiClump(mate, fallbackPoint);

                    if (!IsNavMeshFallbackValid(mate, fallbackPoint)) continue;

                    float cohesion = Mathf.Clamp(mateCache?.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);

                    if ((mateCache.MoveCache.LastIssuedTarget - fallbackPoint).sqrMagnitude < OverlayMoveDedupSqr)
                        continue;
                    if ((now - mateCache.MoveCache.LastMoveTime) < OverlayMoveCooldown)
                        continue;

                    bool leaderMove = isLeader || UnityEngine.Random.value > 0.22f + (mateCache?.PersonalityProfile?.Caution ?? 0.07f);

                    if (leaderMove)
                    {
                        BotMovementHelper.SmoothMoveToSafe(mate, fallbackPoint, true, cohesion, OverlayType);
                        BotOverlayManager.RegisterMove(mate, OverlayType);

                        // Post-move: cover/stance and squad voice overlays
                        BotCoverHelper.TrySetStanceFromNearbyCover(mateCache, fallbackPoint);
                        if (mate.BotTalk != null && UnityEngine.Random.value < VoiceCoverChance)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.CoverMe); } catch { }
                        }
                    }
                }

                _lastEchoFallbackTime = now;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoFallbackToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Squad overlay investigate event: overlays/tactical comms, never disables, pooled, anti-spam.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoInvestigateTime < EchoCooldown || now < _nextAnticipation)
                    return;

                _nextAnticipation = now + UnityEngine.Random.Range(AnticipationMin, AnticipationMax);
                Vector3 origin = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, origin)) continue;
                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache)) continue;
                    if (!BotOverlayManager.CanIssueMove(mate, OverlayType)) continue;
                    if (BotMovementHelper.IsMovementPaused(mate) || BotMovementHelper.IsInInteractionState(mate))
                        continue;

                    mateCache?.Combat?.NotifyEchoInvestigate();

                    if (mate.BotTalk != null && UnityEngine.Random.value < VoiceInvestigateChance)
                    {
                        try { mate.BotTalk.TrySay(EPhraseTrigger.CheckHim); } catch { }
                    }
                }

                _lastEchoInvestigateTime = now;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoInvestigateToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Echoes enemy sighting event to squad: overlays comms, tactical memory, anti-clump, pooled.
        /// </summary>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                string enemyId = _cache.ThreatSelector?.CurrentTarget?.ProfileId ?? string.Empty;
                Vector3 origin = _bot.Position;
                float now = Time.time;
                int count = _bot.BotsGroup.MembersCount;

                if (now - _lastEnemySightingTime < EchoCooldown && _lastEchoedEnemyCount == count)
                    return;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, origin)) continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!BotOverlayManager.CanIssueMove(mate, OverlayType)) continue;
                    if (BotMovementHelper.IsMovementPaused(mate) || BotMovementHelper.IsInInteractionState(mate))
                        continue;

                    mateCache?.TacticalMemory?.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);

                    if (mate.BotTalk != null)
                    {
                        bool fearful = mateCache?.PersonalityProfile?.IsFearful ?? false;
                        float chance = fearful ? VoiceContactFearful : VoiceContactNormal;
                        if (UnityEngine.Random.value < chance)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.OnFirstContact); } catch { }
                        }
                    }
                }

                _lastEnemySightingTime = now;
                _lastEchoedEnemyCount = count;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoSpottedEnemyToSquad failed: {ex}");
            }
        }

        #endregion

        #region Overlay/Move Safety Helpers

        /// <summary>
        /// Applies a post-NavMesh squad anti-clump/anti-parallel drift offset for maximum realism.
        /// </summary>
        private static Vector3 ApplySquadAntiClump(BotOwner mate, Vector3 fallback)
        {
            if (mate?.BotsGroup == null || mate.BotsGroup.MembersCount <= 1) return fallback;
            int idx = GetSquadIndex(mate);
            Vector3 perp = Vector3.Cross(Vector3.up, mate.LookDirection.normalized);
            float offset = SquadSpread * (idx - (mate.BotsGroup.MembersCount / 2f));
            fallback += perp * offset;
            fallback += UnityEngine.Random.insideUnitSphere * DriftMagnitude;

            // Anti-parallel: drift if mates are too close.
            for (int i = 0; i < mate.BotsGroup.MembersCount; i++)
            {
                var buddy = mate.BotsGroup.Member(i);
                if (buddy == null || buddy == mate) continue;
                if ((fallback - buddy.Position).magnitude < SquadAntiClumpRadius)
                    fallback += UnityEngine.Random.insideUnitSphere * 0.41f;
            }
            return fallback;
        }

        private static Vector3 GetEFTSafeFallbackPoint(BotOwner mate, Vector3 originRetreat, Vector3 squadLead, BotComponentCache cache)
        {
            try
            {
                Vector3 dir = -mate.LookDirection.normalized;
                if (dir.sqrMagnitude < 0.01f) dir = Vector3.back;
                float dist = (mate.Position - squadLead).sqrMagnitude;
                bool isolated = dist > IsolatedMateDistanceSqr;
                float baseDist = isolated ? 2.22f : UnityEngine.Random.Range(2.13f, 4.4f);
                bool fearful = cache?.PersonalityProfile?.IsFearful ?? false;

                Vector3 candidate = mate.Position + dir * baseDist + UnityEngine.Random.insideUnitSphere * (fearful ? 0.82f : 0.51f);
                candidate.y = mate.Position.y;

                if (NavMesh.SamplePosition(candidate, out var navHit, NavSampleRadius, NavMesh.AllAreas))
                {
                    Vector3 clamped = ClampY(navHit.position, mate.Position);
                    return IsValidNavFallback(mate, clamped) ? clamped : mate.Position;
                }
                return mate.Position;
            }
            catch { return mate?.Position ?? Vector3.zero; }
        }

        private static bool IsNavMeshFallbackValid(BotOwner mate, Vector3 pos)
        {
            if (!IsValidNavFallback(mate, pos))
                return false;
            if (!NavMesh.SamplePosition(pos, out var navHit, NavSampleRadius, NavMesh.AllAreas))
                return false;
            if (Mathf.Abs(navHit.position.y - mate.Position.y) > MaxNavmeshDeltaY)
                return false;
            if (!BotNavHelper.IsNavMeshPositionValid(navHit.position))
                return false;
            if (BotNavHelper.IsBlockedByClosedDoor(mate.Position, navHit.position))
                return false;
            return true;
        }

        private static bool IsValidNavFallback(BotOwner mate, Vector3 v)
        {
            return mate != null && !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z)
                && v != Vector3.zero && v.y > -2.5f && Mathf.Abs(v.y) < 1000f
                && (v - mate.Position).sqrMagnitude < MaxEchoRangeSqr;
        }

        private static Vector3 ClampY(Vector3 v, Vector3 basePos)
        {
            if (Mathf.Abs(v.y - basePos.y) > MaxNavmeshDeltaY || v.y < -2.5f)
                v.y = basePos.y;
            return v;
        }

        private static bool CanEchoHumanly(BotComponentCache cache)
        {
            if (cache == null || cache.IsBlinded || cache.PanicHandler?.IsPanicking == true)
                return false;
            if (cache.Perception?.IsSuppressed == true && UnityEngine.Random.value < 0.62f)
                return false;
            float caution = cache.PersonalityProfile?.Caution ?? 0.4f;
            return !(caution < 0.13f && UnityEngine.Random.value < 0.52f);
        }

        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            return mate != null && mate != _bot && !mate.IsDead &&
                   (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        private static int GetSquadIndex(BotOwner bot)
        {
            if (bot?.BotsGroup == null) return -1;
            for (int i = 0; i < bot.BotsGroup.MembersCount; i++)
                if (bot.BotsGroup.Member(i) == bot) return i;
            return -1;
        }

        #endregion
    }
}
