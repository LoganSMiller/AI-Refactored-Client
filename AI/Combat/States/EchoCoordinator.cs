// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates squad echo behavior for fallback, investigation, and enemy spotting.
    /// Ensures bots react realistically to group triggers and maintain cohesion.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRange = 40.0f;
        private const float BaseFallbackDistance = 6.0f;
        private const float FallbackChaosOffset = 1.75f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private float _lastEchoFallbackTime = -999.0f;
        private float _lastEchoInvestigateTime = -999.0f;

        #endregion

        #region Constructor

        /// <summary>
        /// Creates a new echo coordinator for the given bot.
        /// </summary>
        /// <param name="cache">The bot's component cache.</param>
        public EchoCoordinator(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                AIRefactoredController.Logger.LogError("[EchoCoordinator] ❌ Initialization failed: cache or bot is null.");
                throw new ArgumentNullException(nameof(cache));
            }

            this._cache = cache;
            this._bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Sends a fallback signal to nearby squadmates.
        /// </summary>
        /// <param name="retreatPosition">The fallback target position.</param>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            BotsGroup? group = this._bot.BotsGroup;
            if (group == null)
            {
                return;
            }

            float now = Time.time;
            if (now - this._lastEchoFallbackTime < EchoCooldown)
            {
                return;
            }

            Vector3 selfPos = this._bot.Position;
            int count = group.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner? mate = group.Member(i);
                if (!this.IsValidSquadmate(mate))
                {
                    continue;
                }

                Vector3 matePos = mate.Position;
                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);

                if (mateCache == null || mateCache.Combat == null || !this.CanAcceptEcho(mateCache))
                {
                    continue;
                }

                Vector3 threatDir = selfPos - matePos;
                Vector3 fallbackDir = threatDir.sqrMagnitude > 0.01f
                    ? threatDir.normalized
                    : (mate.LookDirection.sqrMagnitude > 0.1f ? -mate.LookDirection.normalized : Vector3.back);

                Vector3 chaos = UnityEngine.Random.insideUnitSphere * FallbackChaosOffset;
                chaos.y = 0;

                Vector3 fallback = matePos - fallbackDir * BaseFallbackDistance + chaos;
                mateCache.Combat.TriggerFallback(fallback);

                if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                {
                    mate.BotTalk.TrySay(EPhraseTrigger.CoverMe);
                }
            }

            this._lastEchoFallbackTime = now;
        }

        /// <summary>
        /// Sends an investigate signal to nearby squadmates.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            BotsGroup? group = this._bot.BotsGroup;
            if (group == null)
            {
                return;
            }

            float now = Time.time;
            if (now - this._lastEchoInvestigateTime < EchoCooldown)
            {
                return;
            }

            int count = group.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner? mate = group.Member(i);
                if (!this.IsValidSquadmate(mate))
                {
                    continue;
                }

                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);

                if (mateCache == null || mateCache.Combat == null || !this.CanAcceptEcho(mateCache))
                {
                    continue;
                }

                mateCache.Combat.NotifyEchoInvestigate();

                if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                {
                    mate.BotTalk.TrySay(EPhraseTrigger.CheckHim);
                }
            }

            this._lastEchoInvestigateTime = now;
        }

        /// <summary>
        /// Shares an enemy position with squadmates for tactical memory.
        /// </summary>
        /// <param name="enemyPosition">The enemy's position.</param>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            BotsGroup? group = this._bot.BotsGroup;
            if (group == null)
            {
                return;
            }

            string enemyId = string.Empty;

            if (this._cache.ThreatSelector != null &&
                this._cache.ThreatSelector.CurrentTarget != null &&
                this._cache.ThreatSelector.CurrentTarget.ProfileId != null)
            {
                enemyId = this._cache.ThreatSelector.CurrentTarget.ProfileId;
            }

            int count = group.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner? mate = group.Member(i);
                if (!this.IsValidSquadmate(mate))
                {
                    continue;
                }

                BotComponentCache? mateCache = BotCacheUtility.GetCache(mate);

                if (mateCache != null && mateCache.TacticalMemory != null)
                {
                    mateCache.TacticalMemory.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);
                }
            }
        }

        #endregion

        #region Private Methods

        private bool CanAcceptEcho(BotComponentCache cache)
        {
            if (cache.IsBlinded)
            {
                return false;
            }

            if (cache.PanicHandler != null && cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            BotPersonalityProfile? profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            return profile != null && profile.Caution >= 0.15f;
        }

        private bool IsValidSquadmate(BotOwner? mate)
        {
            if (mate == null || mate == this._bot || mate.IsDead)
            {
                return false;
            }

            Vector3 matePos = mate.Position;
            float distSq = (matePos - this._bot.Position).sqrMagnitude;
            return distSq <= (MaxEchoRange * MaxEchoRange);
        }

        #endregion
    }
}
