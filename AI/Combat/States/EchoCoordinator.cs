// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All errors are locally isolated, never disables handler, never disables squadmates, never triggers fallback AI.
//   All fallback/echo points are hints only—never direct teleportation. All movement is path-based, never direct assignment.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Runtime;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates echo behavior for fallback, investigation, and enemy sightings.
    /// Ensures realistic squad cohesion and tactical communication.
    /// Bulletproof: All failures are isolated and never cascade. Never disables itself or squadmates.
    /// All movement positions are resolved via internal EFT movement/pathfinding logic only. Teleportation is forbidden.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600.0f; // 40m
        private const float MinHumanDelay = 0.08f;
        private const float MaxHumanDelay = 0.32f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;

        #endregion

        #region Constructor

        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
        }

        #endregion

        #region Echo Fallback

        /// <summary>
        /// Suggests a fallback position to all squadmates, using only path-based fallback—never direct teleport.
        /// </summary>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            if (_bot == null || _cache == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoFallbackTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPosition))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache))
                        continue;

                    Vector3 fallbackPoint = GetFallbackPoint(mate);

                    if (IsValidVector(fallbackPoint))
                    {
                        // This only *suggests* fallback; movement is always through bot's own controller
                        mateCache.Combat.TriggerFallback(fallbackPoint);

                        // Squad voice (client-only, never in headless)
                        if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.CoverMe); } catch { }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError($"[EchoCoordinator] Fallback echo failed: {ex}");
                }
            }

            _lastEchoFallbackTime = now;
        }

        /// <summary>
        /// Returns a human-like fallback point for a squadmate—never used to teleport.
        /// </summary>
        private static Vector3 GetFallbackPoint(BotOwner mate)
        {
            Vector3 dir = -mate.LookDirection.normalized;
            if (dir.sqrMagnitude < 0.01f)
                dir = Vector3.back;

            Vector3 offset = dir * UnityEngine.Random.Range(2.0f, 4.0f);
            Vector3 noise = UnityEngine.Random.insideUnitSphere * 0.5f;
            Vector3 candidate = mate.Position + offset + noise;
            candidate.y = mate.Position.y;

            // Snap to NavMesh to guarantee it's pathable; never teleports, only hints
            UnityEngine.AI.NavMeshHit navHit;
            if (UnityEngine.AI.NavMesh.SamplePosition(candidate, out navHit, 1.1f, UnityEngine.AI.NavMesh.AllAreas))
                return navHit.position;
            return mate.Position; // If not valid, fallback to current pos (no movement/teleport)
        }

        #endregion

        #region Echo Investigate

        /// <summary>
        /// Informs squad to investigate; never moves anyone directly, only notifies.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            if (_bot == null || _cache == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoInvestigateTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPosition))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache))
                        continue;

                    mateCache.Combat.NotifyEchoInvestigate();

                    if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                    {
                        try { mate.BotTalk.TrySay(EPhraseTrigger.CheckHim); } catch { }
                    }
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError($"[EchoCoordinator] Investigate echo failed: {ex}");
                }
            }

            _lastEchoInvestigateTime = now;
        }

        #endregion

        #region Echo Enemy Spotted

        /// <summary>
        /// Shares an enemy sighting with all squadmates for tactical memory (never causes instant path/move).
        /// </summary>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            if (_bot == null || _cache == null || _bot.BotsGroup == null)
                return;

            string enemyId = _cache.ThreatSelector?.CurrentTarget?.ProfileId ?? string.Empty;

            int count = _bot.BotsGroup.MembersCount;
            Vector3 origin = _bot.Position;

            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, origin))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache?.TacticalMemory == null)
                        continue;

                    mateCache.TacticalMemory.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError($"[EchoCoordinator] Enemy sighting echo failed: {ex}");
                }
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Determines if a squadmate is a valid target for echo.
        /// </summary>
        private static bool CanEchoHumanly(BotComponentCache cache)
        {
            if (cache == null)
                return false;
            if (cache.IsBlinded)
                return false;
            if (cache.PanicHandler?.IsPanicking == true)
                return false;
            if (cache.Perception != null && cache.Perception.IsSuppressed && UnityEngine.Random.value < 0.6f)
                return false;

            float caution = cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution ?? 0.4f;
            if (caution < 0.1f && UnityEngine.Random.value < 0.5f)
                return false;

            return true;
        }

        /// <summary>
        /// Validates a squadmate's participation in echo routines.
        /// </summary>
        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            if (mate == null || mate == _bot || mate.IsDead)
                return false;

            return (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        /// <summary>
        /// Vector validity check (no NaN or zero).
        /// </summary>
        private static bool IsValidVector(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        #endregion
    }
}
