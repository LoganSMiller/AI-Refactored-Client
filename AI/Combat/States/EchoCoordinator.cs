// <auto-generated>
//   AI-Refactored: EchoCoordinator.cs (Ultimate Realism – Beyond Diamond, Fully Patched, June 2025)
//   All squad comms and fallback/investigation are bulletproof, path-based, voice-humanized, and error-isolated.
//   All movement and tactical hints NavMesh-validated, never teleports. No vanilla AI fallback.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Handles all squad fallback, investigation, and enemy sighting comms.
    /// Bulletproof, path-based, fully squad-role, error-isolated, never teleports, multiplayer/headless safe.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600f;
        private const float IsolatedMateDistanceSqr = 81f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;
        private float _lastEnemySightingTime = float.NegativeInfinity;
        private int _lastEchoedEnemyCount = 0;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates an EchoCoordinator for the given bot cache.
        /// </summary>
        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Broadcasts fallback/retreat to squad. Path-based, squad-aware, voice randomized.
        /// </summary>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoFallbackTime < EchoCooldown)
                    return;

                bool isLeader = IsSquadLeader(_bot);
                Vector3 selfPos = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    try
                    {
                        BotOwner mate = _bot.BotsGroup.Member(i);
                        if (!IsValidSquadmate(mate, selfPos)) continue;

                        var mateCache = BotCacheUtility.GetCache(mate);
                        if (!CanEchoHumanly(mateCache)) continue;

                        Vector3 fallbackPoint = GetEFTSafeFallbackPoint(mate, retreatPosition, selfPos, mateCache);
                        if (!BotNavHelper.IsNavMeshPositionValid(fallbackPoint)) continue;

                        float cohesion = Mathf.Clamp(mateCache?.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);

                        // Only leader or non-cautious bots echo fallback
                        if (isLeader || UnityEngine.Random.value > 0.22f + (mateCache?.PersonalityProfile?.Caution ?? 0.07f))
                        {
                            BotMovementHelper.SmoothMoveTo(mate, fallbackPoint, true, cohesion);

                            // Randomize voice
                            if (mate.BotTalk != null && UnityEngine.Random.value < 0.7f)
                            {
                                try { mate.BotTalk.TrySay(EPhraseTrigger.CoverMe); } catch { }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EchoCoordinator] Fallback echo failed: {ex}");
                    }
                }

                _lastEchoFallbackTime = now;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoFallbackToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Broadcasts investigation alert to squad. All mates update combat memory, voice randomized.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoInvestigateTime < EchoCooldown)
                    return;

                Vector3 origin = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    try
                    {
                        BotOwner mate = _bot.BotsGroup.Member(i);
                        if (!IsValidSquadmate(mate, origin)) continue;

                        var mateCache = BotCacheUtility.GetCache(mate);
                        if (!CanEchoHumanly(mateCache)) continue;

                        mateCache?.Combat?.NotifyEchoInvestigate();

                        // Voice: randomized by squad member
                        if (mate.BotTalk != null && UnityEngine.Random.value < 0.75f)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.CheckHim); } catch { }
                        }
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EchoCoordinator] Investigate echo failed: {ex}");
                    }
                }

                _lastEchoInvestigateTime = Time.time;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoInvestigateToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Broadcasts enemy sighting to squad. All mates update memory. Voice randomized by personality/fearful.
        /// </summary>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                string enemyId = _cache.ThreatSelector?.CurrentTarget?.ProfileId ?? string.Empty;
                Vector3 origin = _bot.Position;
                float now = Time.time;
                int count = _bot.BotsGroup.MembersCount;

                if (now - _lastEnemySightingTime < EchoCooldown && _lastEchoedEnemyCount == count)
                    return;

                for (int i = 0; i < count; i++)
                {
                    try
                    {
                        BotOwner mate = _bot.BotsGroup.Member(i);
                        if (!IsValidSquadmate(mate, origin)) continue;

                        var mateCache = BotCacheUtility.GetCache(mate);
                        mateCache?.TacticalMemory?.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);

                        // Voice: more frequent if fearful
                        if (mate.BotTalk != null)
                        {
                            bool fearful = mateCache?.PersonalityProfile?.IsFearful ?? false;
                            float chance = fearful ? 0.44f : 0.22f;
                            if (UnityEngine.Random.value < chance)
                            {
                                try { mate.BotTalk.TrySay(EPhraseTrigger.OnFirstContact); } catch { }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EchoCoordinator] Enemy sighting echo failed: {ex}");
                    }
                }

                _lastEnemySightingTime = now;
                _lastEchoedEnemyCount = count;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoSpottedEnemyToSquad failed: {ex}");
            }
        }

        #endregion

        #region Internal Helpers

        /// <summary>
        /// Returns true if the given bot is the squad leader.
        /// </summary>
        private static bool IsSquadLeader(BotOwner bot)
        {
            return bot?.BotsGroup?.MembersCount > 0 && bot.BotsGroup.Member(0) == bot;
        }

        /// <summary>
        /// Returns true if the given cache is allowed to echo comms (not panicked/blinded/suppressed).
        /// </summary>
        private static bool CanEchoHumanly(BotComponentCache cache)
        {
            if (cache == null || cache.IsBlinded || cache.PanicHandler?.IsPanicking == true)
                return false;

            if (cache.Perception?.IsSuppressed == true && UnityEngine.Random.value < 0.6f)
                return false;

            float caution = cache.PersonalityProfile?.Caution ?? 0.4f;
            return !(caution < 0.1f && UnityEngine.Random.value < 0.5f);
        }

        /// <summary>
        /// Returns true if mate is a valid squadmate for comms (not self/dead, within echo range).
        /// </summary>
        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            return mate != null && mate != _bot && !mate.IsDead &&
                   (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        /// <summary>
        /// Computes a squadmate's fallback point using EFT-native nav/door logic, randomizes by fear and isolation.
        /// </summary>
        private static Vector3 GetEFTSafeFallbackPoint(BotOwner mate, Vector3 originRetreat, Vector3 squadLead, BotComponentCache cache)
        {
            try
            {
                Vector3 dir = -mate.LookDirection.normalized;
                if (dir.sqrMagnitude < 0.01f) dir = Vector3.back;

                float dist = (mate.Position - squadLead).sqrMagnitude;
                bool isolated = dist > IsolatedMateDistanceSqr;

                float baseDist = isolated ? 2.2f : UnityEngine.Random.Range(2.0f, 4.2f);
                bool fearful = cache?.PersonalityProfile?.IsFearful ?? false;

                Vector3 candidate = mate.Position + dir * baseDist + UnityEngine.Random.insideUnitSphere * (fearful ? 0.7f : 0.45f);
                candidate.y = mate.Position.y;

                return NavMesh.SamplePosition(candidate, out var navHit, 1.2f, NavMesh.AllAreas)
                    ? navHit.position
                    : mate.Position;
            }
            catch
            {
                return mate?.Position ?? Vector3.zero;
            }
        }

        #endregion
    }
}
