// <auto-generated>
//   AI-Refactored: EchoCoordinator.cs (Final Overlay-Only, Ultimate Realism, June 2025)
//   Squad comms, fallback, investigation: fully NavMesh/door validated, never disables, no teleport, no vanilla fallback.
//   Bulletproof: robust error handling, no alloc in hot paths, pooled, multiplayer/headless parity.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Coordinates realistic squad fallback, enemy echo, and investigation voice/comms.
    /// All tactical movement is overlay/event-based, always NavMesh/door validated, and fully humanized.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600f;
        private const float IsolatedMateDistanceSqr = 81f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;
        private float _lastEnemySightingTime = float.NegativeInfinity;
        private int _lastEchoedEnemyCount = 0;

        #endregion

        #region Construction

        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
        }

        #endregion

        #region Public APIs

        /// <summary>
        /// Orders squad to fallback to a validated retreat position, triggers human-like voice lines.
        /// All positions are NavMesh/door checked; no bot is ever teleported or snapped.
        /// </summary>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoFallbackTime < EchoCooldown)
                    return;

                bool isLeader = _bot.BotsGroup.Member(0) == _bot;
                Vector3 selfPos = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPos))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache))
                        continue;

                    Vector3 fallbackPoint = GetEFTSafeFallbackPoint(mate, retreatPosition, selfPos, mateCache);
                    if (!IsValid(fallbackPoint) || !BotNavHelper.IsNavMeshPositionValid(fallbackPoint))
                        continue;

                    float cohesion = Mathf.Clamp(mateCache?.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);

                    // Only leaders or non-fearful will issue fallback movement; others may hesitate.
                    if (isLeader || UnityEngine.Random.value > 0.22f + (mateCache?.PersonalityProfile?.Caution ?? 0.07f))
                    {
                        BotMovementHelper.SmoothMoveToSafe(mate, fallbackPoint, slow: true, cohesion);

                        if (mate.BotTalk != null && UnityEngine.Random.value < 0.7f)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.CoverMe); } catch { }
                        }
                    }
                }

                _lastEchoFallbackTime = now;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoFallbackToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Informs all valid squadmates to investigate (for e.g., search/contact), triggers comms and tactical memory update.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                float now = Time.time;
                if (now - _lastEchoInvestigateTime < EchoCooldown)
                    return;

                Vector3 origin = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, origin))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (!CanEchoHumanly(mateCache))
                        continue;

                    mateCache?.Combat?.NotifyEchoInvestigate();

                    if (mate.BotTalk != null && UnityEngine.Random.value < 0.75f)
                    {
                        try { mate.BotTalk.TrySay(EPhraseTrigger.CheckHim); } catch { }
                    }
                }

                _lastEchoInvestigateTime = now;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoInvestigateToSquad failed: {ex}");
            }
        }

        /// <summary>
        /// Echoes enemy sighting to all valid squadmates, updating tactical memory and issuing first contact comms.
        /// </summary>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.BotsGroup == null)
                    return;

                string enemyId = _cache.ThreatSelector?.CurrentTarget?.ProfileId ?? string.Empty;
                Vector3 origin = _bot.Position;
                float now = Time.time;
                int count = _bot.BotsGroup.MembersCount;

                // Throttle to avoid spam
                if (now - _lastEnemySightingTime < EchoCooldown && _lastEchoedEnemyCount == count)
                    return;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, origin))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    mateCache?.TacticalMemory?.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);

                    if (mate.BotTalk != null)
                    {
                        bool fearful = mateCache?.PersonalityProfile?.IsFearful ?? false;
                        float chance = fearful ? 0.44f : 0.22f;
                        if (UnityEngine.Random.value < chance)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.OnFirstContact); } catch { }
                        }
                    }
                }

                _lastEnemySightingTime = now;
                _lastEchoedEnemyCount = count;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EchoCoordinator] EchoSpottedEnemyToSquad failed: {ex}");
            }
        }

        #endregion

        #region Internal Utility

        private static bool CanEchoHumanly(BotComponentCache cache)
        {
            if (cache == null || cache.IsBlinded || cache.PanicHandler?.IsPanicking == true)
                return false;

            if (cache.Perception?.IsSuppressed == true && UnityEngine.Random.value < 0.6f)
                return false;

            float caution = cache.PersonalityProfile?.Caution ?? 0.4f;
            return !(caution < 0.1f && UnityEngine.Random.value < 0.5f);
        }

        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            return mate != null && mate != _bot && !mate.IsDead &&
                   (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        private static Vector3 GetEFTSafeFallbackPoint(BotOwner mate, Vector3 originRetreat, Vector3 squadLead, BotComponentCache cache)
        {
            try
            {
                Vector3 dir = -mate.LookDirection.normalized;
                if (dir.sqrMagnitude < 0.01f) dir = Vector3.back;

                float dist = (mate.Position - squadLead).sqrMagnitude;
                bool isolated = dist > IsolatedMateDistanceSqr;
                float baseDist = isolated ? 2.2f : UnityEngine.Random.Range(2.0f, 4.2f);
                bool fearful = cache?.PersonalityProfile?.IsFearful ?? false;

                Vector3 candidate = mate.Position + dir * baseDist + UnityEngine.Random.insideUnitSphere * (fearful ? 0.7f : 0.45f);
                candidate.y = mate.Position.y;

                if (NavMesh.SamplePosition(candidate, out var navHit, 1.2f, NavMesh.AllAreas))
                {
                    Vector3 clamped = ClampY(navHit.position, mate.Position);
                    return IsValid(clamped) ? clamped : mate.Position;
                }

                return mate.Position;
            }
            catch
            {
                return mate?.Position ?? Vector3.zero;
            }
        }

        private static Vector3 ClampY(Vector3 v, Vector3 basePos)
        {
            if (Mathf.Abs(v.y - basePos.y) > 3f || v.y < -2.5f)
                v.y = basePos.y;
            return v;
        }

        private static bool IsValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z)
                && v != Vector3.zero && v.y > -2.5f && Mathf.Abs(v.y) < 1000f;
        }

        #endregion
    }
}
