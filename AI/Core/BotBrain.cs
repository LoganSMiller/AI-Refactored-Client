// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Threads
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Components;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Central AI controller ticking perception, combat, movement, group sync, and personality logic.
    /// </summary>
    public sealed class BotBrain : MonoBehaviour
    {
        #region Logger

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Fields

        private BotOwner? bot;
        private Player? player;
        private BotComponentCache? cache;

        private bool isValid;

        private CombatStateMachine? combat;
        private BotMovementController? movement;
        private BotPoseController? pose;
        private BotTilt? tilt;
        private BotCornerScanner? corner;
        private BotGroupBehavior? groupBehavior;
        private BotJumpController? jump;

        private BotVisionSystem? vision;
        private BotHearingSystem? hearing;
        private BotPerceptionSystem? perception;
        private HearingDamageComponent? hearingDamage;
        private FlashGrenadeComponent? flashDetector;
        private BotFlashReactionComponent? flashReaction;
        private BotTacticalDeviceController? tactical;
        private BotMissionController? mission;
        private BotGroupSyncCoordinator? groupSync;
        private BotTeamLogic? teamLogic;
        private BotAsyncProcessor? asyncProcessor;

        private float nextPerceptionTick;
        private float nextCombatTick;
        private float nextLogicTick;

        private float PerceptionTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 60f : 1f / 30f;
        private float CombatTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 60f : 1f / 30f;
        private float LogicTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 30f : 1f / 15f;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            if (!this.isValid || this.bot == null || this.bot.IsDead || this.player == null)
            {
                return;
            }

            var now = Time.time;

            if (now >= this.nextPerceptionTick)
            {
                this.vision?.Tick(now);
                this.hearing?.Tick(now);
                this.perception?.Tick(Time.deltaTime);
                this.nextPerceptionTick = now + this.PerceptionTickRate;
            }

            if (now >= this.nextCombatTick)
            {
                this.combat?.Tick(now);
                this.cache?.Escalation?.Tick(now);
                this.flashReaction?.Tick(now);
                this.flashDetector?.Tick(now);
                this.nextCombatTick = now + this.CombatTickRate;
            }

            if (now >= this.nextLogicTick)
            {
                this.mission?.Tick(now);
                this.groupSync?.Tick(now);
                this.hearingDamage?.Tick(Time.deltaTime);
                this.tactical?.Tick();
                this.cache?.LootScanner?.Tick(Time.deltaTime);
                this.cache?.DeadBodyScanner?.Tick(now);
                this.asyncProcessor?.Tick(now);
                this.nextLogicTick = now + this.LogicTickRate;
            }

            this.movement?.Tick(Time.deltaTime);
            this.jump?.Tick(Time.deltaTime);
            this.pose?.Tick(now);
            this.corner?.Tick(now);
            this.tilt?.ManualUpdate();
            this.groupBehavior?.Tick(Time.deltaTime);
            this.teamLogic?.CoordinateMovement();
        }

        #endregion

        #region Initialization

        /// <summary>
        /// Fully initializes the AI system stack for the specified bot.
        /// </summary>
        /// <param name="bot">The bot to initialize for.</param>
        public void Initialize(BotOwner bot)
        {
            if (bot.GetPlayer == null || bot.IsDead || !bot.GetPlayer.IsAI || bot.GetPlayer.IsYourPlayer)
            {
                Logger.LogWarning("[BotBrain] ❌ Invalid bot context — initialization skipped.");
                return;
            }

            this.bot = bot;
            this.player = bot.GetPlayer;

            try
            {
                this.cache = new BotComponentCache();
                this.cache.Initialize(bot);

                var refactoredOwner = BotRegistry.TryGetRefactoredOwner(bot.ProfileId);
                if (refactoredOwner != null)
                {
                    this.cache.SetOwner(refactoredOwner);
                }

                // Primary behavior logic
                this.combat = this.cache.Combat;
                this.movement = this.cache.Movement;
                this.pose = this.cache.PoseController;
                this.tilt = this.cache.Tilt;
                this.tactical = this.cache.Tactical;
                this.groupBehavior = this.cache.GroupBehavior;
                this.jump = new BotJumpController(bot, this.cache);

                // Perception systems
                this.vision = new BotVisionSystem();
                this.vision.Initialize(this.cache);

                this.hearing = new BotHearingSystem();
                this.hearing.Initialize(this.cache);

                this.perception = new BotPerceptionSystem();
                this.perception.Initialize(this.cache);

                this.flashReaction = new BotFlashReactionComponent();
                this.flashReaction.Initialize(this.cache);

                this.flashDetector = new FlashGrenadeComponent();
                this.flashDetector.Initialize(this.cache);

                this.hearingDamage = new HearingDamageComponent();
                this.corner = new BotCornerScanner();

                // Mission and squad coordination
                this.mission = new BotMissionController(bot, this.cache);
                this.groupSync = new BotGroupSyncCoordinator();
                this.groupSync.Initialize(bot);
                this.groupSync.InjectLocalCache(this.cache);

                this.asyncProcessor = new BotAsyncProcessor();
                this.asyncProcessor.Initialize(bot, this.cache);

                this.teamLogic = new BotTeamLogic(bot);

                BotBrainGuardian.Enforce(this.player.gameObject);

                this.isValid = true;
                Logger.LogInfo($"[BotBrain] ✅ AI stack initialized for bot: {this.player.Profile?.Info?.Nickname ?? "Unnamed"}.");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotBrain] ❌ Initialization failed: {ex.Message}\n{ex.StackTrace}");
                this.isValid = false;
            }
        }

        #endregion
    }
}
