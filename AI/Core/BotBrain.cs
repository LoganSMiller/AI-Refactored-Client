// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Threads
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Components;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Central AI controller for AIRefactored bots.
    /// Orchestrates tick-based updates for combat, perception, movement, group logic, and subsystem reactions.
    /// </summary>
    public sealed class BotBrain : MonoBehaviour
    {
        #region Static Logger

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Core References

        private BotOwner? _bot;
        private Player? _player;
        private BotComponentCache? _cache;

        private bool _isValid;

        #endregion

        #region Subsystems

        private CombatStateMachine? _combat;
        private BotMovementController? _movement;
        private BotPoseController? _pose;
        private BotTilt? _tilt;
        private BotCornerScanner? _corner;
        private BotGroupBehavior? _groupBehavior;
        private BotJumpController? _jump;

        private BotVisionSystem? _vision;
        private BotHearingSystem? _hearing;
        private BotPerceptionSystem? _perception;
        private HearingDamageComponent? _hearingDamage;
        private FlashGrenadeComponent? _flashDetector;
        private BotFlashReactionComponent? _flashReaction;
        private BotTacticalDeviceController? _tactical;
        private BotMissionController? _mission;
        private BotGroupSyncCoordinator? _groupSync;
        private BotTeamLogic? _teamLogic;
        private BotAsyncProcessor? _asyncProcessor;

        #endregion

        #region Tick Timing

        private float _nextPerceptionTick;
        private float _nextCombatTick;
        private float _nextLogicTick;

        private float PerceptionTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 60f : 1f / 30f;
        private float CombatTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 60f : 1f / 30f;
        private float LogicTickRate => FikaHeadlessDetector.IsHeadless ? 1f / 30f : 1f / 15f;

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            if (!this._isValid || this._bot == null || this._bot.IsDead || this._player == null)
            {
                return;
            }

            float now = Time.time;

            if (now >= this._nextPerceptionTick)
            {
                this._vision?.Tick(now);
                this._hearing?.Tick(now);
                this._perception?.Tick(Time.deltaTime);
                this._nextPerceptionTick = now + this.PerceptionTickRate;
            }

            if (now >= this._nextCombatTick)
            {
                this._combat?.Tick(now);
                this._cache?.Escalation?.Tick(now);
                this._flashReaction?.Tick(now);
                this._flashDetector?.Tick(now);
                this._nextCombatTick = now + this.CombatTickRate;
            }

            if (now >= this._nextLogicTick)
            {
                this._mission?.Tick(now);
                this._groupSync?.Tick(now);
                this._hearingDamage?.Tick(Time.deltaTime);
                this._tactical?.Tick();
                this._cache?.LootScanner?.Tick(Time.deltaTime);
                this._cache?.DeadBodyScanner?.Tick(now);
                this._asyncProcessor?.Tick(now);
                this._nextLogicTick = now + this.LogicTickRate;
            }

            this._movement?.Tick(Time.deltaTime);
            this._jump?.Tick(Time.deltaTime);
            this._pose?.Tick(now);
            this._corner?.Tick(now);
            this._tilt?.ManualUpdate();
            this._groupBehavior?.Tick(Time.deltaTime);
            this._teamLogic?.CoordinateMovement();
        }

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the AI stack and behavior subsystems for this bot.
        /// </summary>
        /// <param name="bot">The BotOwner instance to wrap and control.</param>
        public void Initialize(BotOwner bot)
        {
            if (bot == null || bot.GetPlayer == null || bot.IsDead || !bot.GetPlayer.IsAI || bot.GetPlayer.IsYourPlayer)
            {
                Logger.LogWarning("[BotBrain] Initialization aborted: invalid or non-AI bot.");
                return;
            }

            this._bot = bot;
            this._player = bot.GetPlayer;

            try
            {
                this._cache = new BotComponentCache();
                this._cache.Initialize(bot);

                AIRefactoredBotOwner? owner = BotRegistry.TryGetRefactoredOwner(bot.ProfileId);
                if (owner != null)
                {
                    this._cache.SetOwner(owner);
                }

                this._combat = this._cache.Combat;
                this._movement = this._cache.Movement;
                this._pose = this._cache.PoseController;
                this._tilt = this._cache.Tilt;
                this._tactical = this._cache.Tactical;
                this._groupBehavior = this._cache.GroupBehavior;
                this._jump = new BotJumpController(bot, this._cache);

                this._vision = new BotVisionSystem();
                this._vision.Initialize(this._cache);

                this._hearing = new BotHearingSystem();
                this._hearing.Initialize(this._cache);

                this._perception = new BotPerceptionSystem();
                this._perception.Initialize(this._cache);

                this._flashReaction = new BotFlashReactionComponent();
                this._flashReaction.Initialize(this._cache);

                this._flashDetector = new FlashGrenadeComponent();
                this._flashDetector.Initialize(this._cache);

                this._hearingDamage = new HearingDamageComponent();
                this._corner = new BotCornerScanner();

                this._mission = new BotMissionController(bot, this._cache);

                this._groupSync = new BotGroupSyncCoordinator();
                this._groupSync.Initialize(bot);
                this._groupSync.InjectLocalCache(this._cache);

                this._asyncProcessor = new BotAsyncProcessor();
                this._asyncProcessor.Initialize(bot, this._cache);

                this._teamLogic = new BotTeamLogic(bot);

                BotBrainGuardian.Enforce(this._player.gameObject);

                this._isValid = true;
                Logger.LogInfo("[BotBrain] AI initialized for: " + (this._player.Profile?.Info?.Nickname ?? "Unnamed"));
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotBrain] Initialization failed: " + ex.Message + "\n" + ex.StackTrace);
                this._isValid = false;
            }
        }

        #endregion
    }
}
