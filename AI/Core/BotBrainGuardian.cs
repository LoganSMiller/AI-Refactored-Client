// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Threads
{
    using System;
    using AIRefactored.Runtime;
    using UnityEngine;

    /// <summary>
    /// Ensures only AIRefactored.BotBrain is active on AI-controlled bots.
    /// Scans the bot GameObject and removes conflicting brain MonoBehaviours injected by other mods.
    /// </summary>
    public static class BotBrainGuardian
    {
        /// <summary>
        /// Scans a bot GameObject for conflicting or injected MonoBehaviours.
        /// Removes AI logic from other mods (e.g., SAIN, SPT, LuaBrains).
        /// </summary>
        /// <param name="botGameObject">The bot GameObject to sanitize.</param>
        public static void Enforce(GameObject botGameObject)
        {
            if (botGameObject == null)
            {
                return;
            }

            MonoBehaviour[] components = botGameObject.GetComponents<MonoBehaviour>();
            if (components == null || components.Length == 0)
            {
                return;
            }

            for (int i = 0; i < components.Length; i++)
            {
                MonoBehaviour comp = components[i];
                if (comp == null)
                {
                    continue;
                }

                Type type = comp.GetType();
                string ns = type.Namespace != null ? type.Namespace.ToLowerInvariant() : string.Empty;
                string name = type.Name.ToLowerInvariant();

                // Preserve AIRefactored.BotBrain only
                if (type == typeof(BotBrain))
                {
                    continue;
                }

                // Allow UnityEngine, EFT, or Comfort.Common components
                if (ns.StartsWith("unity") || ns.StartsWith("eft") || ns.Contains("comfort"))
                {
                    continue;
                }

                // Strip conflicting AI logic from mods
                if (IsConflictingBrain(name, ns))
                {
                    UnityEngine.Object.Destroy(comp);
                    AIRefactoredController.Logger.LogWarning(
                        $"[BotBrainGuardian] ⚠ Removed conflicting AI component '{type.FullName}' from GameObject '{botGameObject.name}'.");
                }
            }
        }

        /// <summary>
        /// Determines whether the component appears to be a conflicting AI brain or logic controller.
        /// </summary>
        /// <param name="name">The lowercase name of the component type.</param>
        /// <param name="ns">The lowercase namespace of the component type.</param>
        /// <returns>True if the component is considered conflicting; otherwise, false.</returns>
        private static bool IsConflictingBrain(string name, string ns)
        {
            return name.Contains("brain")
                   || name.StartsWith("pmc", StringComparison.Ordinal)
                   || name.StartsWith("boss", StringComparison.Ordinal)
                   || name.StartsWith("follower", StringComparison.Ordinal)
                   || name.StartsWith("assault", StringComparison.Ordinal)
                   || name.StartsWith("exusec", StringComparison.Ordinal)
                   || name.StartsWith("spt", StringComparison.Ordinal)
                   || name.StartsWith("lua", StringComparison.Ordinal)
                   || ns.Contains("sain")
                   || ns.Contains("lua")
                   || ns.Contains("spt");
        }
    }
}
