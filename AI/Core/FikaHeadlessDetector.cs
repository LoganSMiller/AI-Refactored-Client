// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Text.RegularExpressions;
    using UnityEngine;

    /// <summary>
    /// Detects if the client is running in FIKA Headless Host mode (i.e., -batchmode or -nographics).
    /// Allows runtime branching for systems that must avoid Unity graphics or main-thread dependencies.
    /// </summary>
    public static class FikaHeadlessDetector
    {
        private static readonly bool _isHeadless;
        private static readonly string _raidLocation;

        /// <summary>
        /// Gets a value indicating whether the current client is in headless or batch mode.
        /// </summary>
        public static bool IsHeadless
        {
            get { return _isHeadless; }
        }

        /// <summary>
        /// Gets the map name if parsed from FIKA headless arguments.
        /// Returns string.Empty if not in headless or if parsing failed.
        /// </summary>
        public static string RaidLocationName
        {
            get { return _raidLocation; }
        }

        /// <summary>
        /// Gets a value indicating whether the headless environment has fully parsed its arguments.
        /// Used to delay logic until startup args are loaded.
        /// </summary>
        public static bool IsReady
        {
            get { return _isHeadless && _raidLocation.Length > 0; }
        }

        /// <summary>
        /// Static constructor for environment detection.
        /// </summary>
        static FikaHeadlessDetector()
        {
            _isHeadless = false;
            _raidLocation = string.Empty;

            try
            {
                string cmd = Environment.CommandLine;
                bool foundHeadless = Application.isBatchMode;

                if (!foundHeadless)
                {
                    int index = cmd.IndexOf("-nographics", StringComparison.OrdinalIgnoreCase);
                    if (index >= 0)
                    {
                        foundHeadless = true;
                    }
                }

                _isHeadless = foundHeadless;

                if (_isHeadless)
                {
                    string result = TryParseRaidLocationFromArgs();
                    if (result.Length > 0)
                    {
                        _raidLocation = result;
                    }
                }
            }
            catch (Exception ex)
            {
                _isHeadless = false;
                _raidLocation = string.Empty;
                Debug.LogWarning("[FikaHeadlessDetector] Static init failed: " + ex.Message);
            }
        }

        /// <summary>
        /// Attempts to parse the raid location from the command line arguments.
        /// </summary>
        /// <returns>Returns the raid location if found; otherwise, returns string.Empty.</returns>
        private static string TryParseRaidLocationFromArgs()
        {
            try
            {
                string cmd = Environment.CommandLine;
                Match match = Regex.Match(cmd, "\"location\"\\s*:\\s*\"(.*?)\"", RegexOptions.IgnoreCase);

                if (match.Success)
                {
                    GroupCollection groups = match.Groups;
                    if (groups != null && groups.Count > 1)
                    {
                        string location = groups[1].Value;
                        if (!string.IsNullOrEmpty(location))
                        {
                            return location;
                        }
                    }
                }
            }
            catch
            {
                // Intentionally silent
            }

            return string.Empty;
        }
    }
}
