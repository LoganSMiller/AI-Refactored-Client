// <auto-generated>
//   AI-Refactored: FikaHeadlessDetector.cs (Beyond Diamond, Ultimate Headless Safe, June 2025, Mastermoveplan)
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Text.RegularExpressions;
    using Fika.Headless.Classes;
    using UnityEngine;

    /// <summary>
    /// Detects if the client is running in FIKA Headless Host mode (i.e., -batchmode or -nographics).
    /// Allows runtime branching for systems that must avoid Unity graphics or main-thread dependencies.
    /// Bulletproof: All logic is strictly guarded; no error can ever break mod flow.
    /// </summary>
    public static class FikaHeadlessDetector
    {
        #region Fields

        private static readonly bool _isHeadless;
        private static readonly string _raidLocation;
        private static readonly bool _isTestMode;
        private static readonly bool _isPreviewMode;
        private static readonly string _sessionGuid;

        #endregion

        #region Properties

        /// <summary>
        /// Gets a value indicating whether the current client is in headless or batch mode.
        /// </summary>
        public static bool IsHeadless => _isHeadless;

        /// <summary>
        /// Gets the map name if parsed from FIKA headless arguments.
        /// Returns string.Empty if not in headless or if parsing failed.
        /// </summary>
        public static string RaidLocationName => _raidLocation;

        /// <summary>
        /// Returns true if running with explicit "preview" flag (used for dry-run/automation/tests).
        /// </summary>
        public static bool IsPreviewMode => _isPreviewMode;

        /// <summary>
        /// Returns true if running with explicit "test" flag (used for automation/unit test scenarios).
        /// </summary>
        public static bool IsTestMode => _isTestMode;

        /// <summary>
        /// Gets a value indicating whether the headless environment has fully parsed its arguments.
        /// Used to delay logic until startup args are loaded.
        /// </summary>
        public static bool IsReady => _isHeadless && !string.IsNullOrEmpty(_raidLocation);

        /// <summary>
        /// Gets the unique session GUID (if parsed from args).
        /// </summary>
        public static string SessionGuid => _sessionGuid ?? string.Empty;

        /// <summary>
        /// Gets a value indicating whether the raid loading phase has started (true for client, headless if ready).
        /// </summary>
        public static bool HasRaidStarted()
        {
            // For client, always true. For headless, only true when controller is live.
            return !_isHeadless || HeadlessRaidControllerExists();
        }

        #endregion

        #region Static Constructor

        static FikaHeadlessDetector()
        {
            _isHeadless = false;
            _raidLocation = string.Empty;
            _isTestMode = false;
            _isPreviewMode = false;
            _sessionGuid = string.Empty;

            try
            {
                string cmd = Environment.CommandLine;
                _isHeadless = Application.isBatchMode ||
                              cmd.IndexOf("-nographics", StringComparison.OrdinalIgnoreCase) >= 0 ||
                              cmd.IndexOf("-batchmode", StringComparison.OrdinalIgnoreCase) >= 0;

                if (_isHeadless)
                {
                    _raidLocation = TryParseRaidLocationFromArgs(cmd);
                    _isTestMode = cmd.IndexOf("--test", StringComparison.OrdinalIgnoreCase) >= 0;
                    _isPreviewMode = cmd.IndexOf("--preview", StringComparison.OrdinalIgnoreCase) >= 0;
                    _sessionGuid = TryParseSessionGuidFromArgs(cmd);
                }
            }
            catch
            {
                // All fields will remain false/empty
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Checks if a HeadlessRaidController instance exists in the scene.
        /// </summary>
        private static bool HeadlessRaidControllerExists()
        {
            try
            {
                return GameObject.FindObjectOfType<HeadlessRaidController>() != null;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Tries to parse the raid location argument from command line for headless FIKA.
        /// </summary>
        private static string TryParseRaidLocationFromArgs(string cmd)
        {
            try
            {
                if (string.IsNullOrEmpty(cmd))
                    return string.Empty;

                // Example match: "location":"bigmap"
                Match match = Regex.Match(cmd, "\"location\"\\s*:\\s*\"(.*?)\"", RegexOptions.IgnoreCase);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value ?? string.Empty;
                }
                // Support --map <location> style as well
                match = Regex.Match(cmd, "--map\\s+(\\w+)", RegexOptions.IgnoreCase);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value ?? string.Empty;
                }
            }
            catch
            {
                // Silent fail
            }

            return string.Empty;
        }

        /// <summary>
        /// Tries to parse the session GUID from command line for headless FIKA.
        /// </summary>
        private static string TryParseSessionGuidFromArgs(string cmd)
        {
            try
            {
                if (string.IsNullOrEmpty(cmd))
                    return string.Empty;

                // Example: --session 4B7C1A34-1B2C-4BB1-9D92-278AA27A13C4
                Match match = Regex.Match(cmd, "--session\\s+([A-Fa-f0-9\\-]{24,36})", RegexOptions.IgnoreCase);
                if (match.Success && match.Groups.Count > 1)
                    return match.Groups[1].Value ?? string.Empty;
            }
            catch
            {
                // Silent fail
            }

            return string.Empty;
        }

        #endregion
    }
}
