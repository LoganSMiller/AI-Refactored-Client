// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using System.Text.RegularExpressions;
    using UnityEngine;

    /// <summary>
    /// Detects if the client is running in FIKA Headless Host mode (i.e., -batchmode or -nographics).
    /// Allows runtime branching for systems that must avoid Unity graphics or main-thread dependencies.
    /// </summary>
    public static class FikaHeadlessDetector
    {
        private static readonly bool _isHeadless;
        private static readonly string? _raidLocation;

        /// <summary>
        /// Gets a value indicating whether the current client is in headless or batch mode.
        /// </summary>
        public static bool IsHeadless => _isHeadless;

        /// <summary>
        /// Gets the map name if parsed from FIKA headless arguments.
        /// </summary>
        public static string? RaidLocationName => _raidLocation;

        /// <summary>
        /// Static constructor for environment detection.
        /// </summary>
        static FikaHeadlessDetector()
        {
            _isHeadless = Application.isBatchMode
                          || Environment.CommandLine.IndexOf("-nographics", StringComparison.OrdinalIgnoreCase) >= 0;

            _raidLocation = TryParseRaidLocationFromArgs();
        }

        /// <summary>
        /// Attempts to parse the raid location from the command line arguments.
        /// </summary>
        /// <returns>Returns the raid location if found, otherwise null.</returns>
        private static string? TryParseRaidLocationFromArgs()
        {
            try
            {
                string cmd = Environment.CommandLine;
                Match match = Regex.Match(cmd, "\"location\"\\s*:\\s*\"(.*?)\"", RegexOptions.IgnoreCase);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value;
                }
            }
            catch (Exception)
            {
                // Fail silently — invalid args are expected in some modes
            }

            return null;
        }
    }
}
