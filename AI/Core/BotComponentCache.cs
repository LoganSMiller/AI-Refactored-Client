// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Medical;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Runtime container for all bot-specific AIRefactored logic systems.
    /// Managed via BotComponentCacheRegistry.
    /// </summary>
    public sealed class BotComponentCache
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private AIRefactoredBotOwner _owner;

        #region Core References

        public BotOwner Bot { get; internal set; }

        public AIRefactoredBotOwner AIRefactoredBotOwner
        {
            get { return _owner; }
        }

        public BotMemoryClass Memory
        {
            get { return this.Bot.Memory; }
        }

        public string Nickname
        {
            get
            {
                if (this.Bot.Profile != null && this.Bot.Profile.Info != null)
                {
                    return this.Bot.Profile.Info.Nickname;
                }

                return "Unknown";
            }
        }

        public Vector3 Position
        {
            get { return this.Bot.Position; }
        }

        #endregion

        #region Personality

        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        #endregion

        #region Runtime Flags

        public bool IsBlinded { get; set; }

        public float BlindUntilTime { get; set; }

        public float LastFlashTime { get; set; }

        public float LastHeardTime { get; private set; } = -999f;

        public Vector3 LastHeardDirection { get; private set; }

        public bool HasHeardDirection { get; private set; }

        #endregion

        #region AI Subsystems

        public CombatStateMachine Combat { get; private set; }

        public BotMovementController Movement { get; private set; }

        public BotPoseController PoseController { get; private set; }

        public BotLookController LookController { get; private set; }

        public BotTilt Tilt { get; private set; }

        public BotTacticalDeviceController Tactical { get; private set; }

        public BotGroupBehavior GroupBehavior { get; private set; }

        public BotThreatSelector ThreatSelector { get; private set; }

        public BotTacticalMemory TacticalMemory { get; private set; }

        public BotLastShotTracker LastShotTracker { get; private set; }

        public BotGroupComms GroupComms { get; private set; }

        public BotSuppressionReactionComponent Suppression { get; private set; }

        public BotPanicHandler PanicHandler { get; private set; }

        public BotThreatEscalationMonitor Escalation { get; private set; }

        public BotInjurySystem InjurySystem { get; private set; }

        public BotDeadBodyScanner DeadBodyScanner { get; private set; }

        public BotLootScanner LootScanner { get; private set; }

        public BotLootDecisionSystem LootDecisionSystem { get; private set; }

        public BotOwnerPathfindingCache Pathing { get; private set; }

        public SquadPathCoordinator SquadPath { get; private set; }

        public BotDoorOpener DoorOpener { get; private set; }

        public BotHealingBySomebody HealReceiver { get; private set; }

        public BotHealAnotherTarget SquadHealer { get; private set; }

        public FlashGrenadeComponent FlashGrenade { get; private set; }

        public HearingDamageComponent HearingDamage { get; private set; }

        public TrackedEnemyVisibility VisibilityTracker { get; set; }

        public BotGroupSyncCoordinator GroupSync
        {
            get { return this.GroupBehavior.GroupSync; }
        }

        public BotPanicHandler Panic
        {
            get { return this.PanicHandler; }
        }

        #endregion

        #region Properties

        public bool IsReady
        {
            get
            {
                return this.Bot != null &&
                       this.Movement != null &&
                       this.Suppression != null &&
                       this.PanicHandler != null &&
                       this.Tactical != null &&
                       this.FlashGrenade != null;
            }
        }

        #endregion

        #region Initialization

        public void Initialize(BotOwner bot)
        {
            if (bot == null)
            {
                Logger.LogError("[BotComponentCache] Initialize called with null bot.");
                throw new ArgumentNullException("bot");
            }

            if (this.Bot != null)
            {
                Logger.LogWarning("[BotComponentCache] Already initialized for bot " + (bot.Profile != null ? bot.Profile.Id : "null"));
                return;
            }

            this.Bot = bot;

            try
            {
                string profileId = bot.Profile != null ? bot.Profile.Id : "null-profile";
                this.PersonalityProfile = BotRegistry.Get(profileId);
                Logger.LogDebug("[BotComponentCache] Loaded personality for bot " + profileId + ": " + this.PersonalityProfile.Personality);

                this.Pathing = new BotOwnerPathfindingCache();

                this.TacticalMemory = new BotTacticalMemory();
                this.TacticalMemory.Initialize(this);

                this.TryInitSubsystem("CombatStateMachine", () =>
                {
                    this.Combat = new CombatStateMachine();
                    this.Combat.Initialize(this);
                }, this.TacticalMemory);

                this.TryInitSubsystem("FlashGrenadeComponent", () =>
                {
                    this.FlashGrenade = new FlashGrenadeComponent();
                    this.FlashGrenade.Initialize(this);
                });

                this.TryInitSubsystem("BotPanicHandler", () =>
                {
                    this.PanicHandler = new BotPanicHandler();
                    this.PanicHandler.Initialize(this);
                });

                this.TryInitSubsystem("BotSuppressionReactionComponent", () =>
                {
                    this.Suppression = new BotSuppressionReactionComponent();
                    this.Suppression.Initialize(this);
                });

                this.TryInitSubsystem("BotThreatEscalationMonitor", () =>
                {
                    this.Escalation = new BotThreatEscalationMonitor();
                    this.Escalation.Initialize(bot);
                });

                this.TryInitSubsystem("BotGroupBehavior", () =>
                {
                    this.GroupBehavior = new BotGroupBehavior();
                    this.GroupBehavior.Initialize(this);
                }, this.PanicHandler);

                this.TryInitSubsystem("BotMovementController", () =>
                {
                    this.Movement = new BotMovementController();
                    this.Movement.Initialize(this);
                });

                this.TryInitSubsystem("BotLookController", () =>
                {
                    this.LookController = new BotLookController(bot, this);
                });

                this.TryInitSubsystem("BotTacticalDeviceController", () =>
                {
                    this.Tactical = new BotTacticalDeviceController();
                    this.Tactical.Initialize(this);
                });

                this.PoseController = new BotPoseController(bot, this);
                this.HearingDamage = new HearingDamageComponent();
                this.Tilt = new BotTilt(bot);

                this.SquadPath = new SquadPathCoordinator();
                this.SquadPath.Initialize(this);

                this.LootScanner = new BotLootScanner();
                this.LootScanner.Initialize(this);

                this.LootDecisionSystem = new BotLootDecisionSystem();
                this.LootDecisionSystem.Initialize(this);

                this.DeadBodyScanner = new BotDeadBodyScanner();
                this.DeadBodyScanner.Initialize(this);

                this.DoorOpener = new BotDoorOpener(bot);
                this.InjurySystem = new BotInjurySystem(this);
                this.LastShotTracker = new BotLastShotTracker();
                this.GroupComms = new BotGroupComms(this);
                this.SquadHealer = bot.HealAnotherTarget ?? new BotHealAnotherTarget(bot);
                this.HealReceiver = bot.HealingBySomebody ?? new BotHealingBySomebody(bot);

                Logger.LogDebug("[BotComponentCache] ✅ Initialized for bot: " + this.Nickname);
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotComponentCache] Initialization failed for bot " + (bot.Profile != null ? bot.Profile.Id : "null") + ": " + ex);
                throw;
            }
        }

        private void TryInitSubsystem(string name, Action init, params object[] required)
        {
            for (int i = 0; i < required.Length; i++)
            {
                if (required[i] == null)
                {
                    Logger.LogError("[BotComponentCache] ❌ Subsystem '" + name + "' missing required dependency.");
                    throw new InvalidOperationException("[BotComponentCache] " + name + " initialization failed.");
                }
            }

            try
            {
                init.Invoke();
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotComponentCache] ❌ Init failed (" + name + "): " + ex);
                throw;
            }
        }

        #endregion

        #region External Setters

        public void SetOwner(AIRefactoredBotOwner owner)
        {
            if (owner == null)
            {
                Logger.LogWarning("[BotComponentCache] SetOwner() called with null.");
                return;
            }

            this._owner = owner;

            if (this.ThreatSelector == null)
            {
                this.ThreatSelector = new BotThreatSelector(this);
            }
        }

        public void RegisterHeardSound(Vector3 source)
        {
            Player player = this.Bot.GetPlayer;
            if (player == null || !player.IsAI)
            {
                Logger.LogWarning("[BotComponentCache] RegisterHeardSound failed — bot invalid.");
                return;
            }

            Logger.LogDebug("[BotComponentCache] Registered sound from: " + source);
            this.LastHeardTime = Time.time;
            this.LastHeardDirection = source - this.Position;
            this.HasHeardDirection = true;
        }

        #endregion
    }
}
