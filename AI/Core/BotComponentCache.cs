// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Components;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Medical;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Runtime container for all bot-specific AIRefactored logic systems.
    /// Managed via BotComponentCacheRegistry.
    /// </summary>
    public sealed class BotComponentCache
    {
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #region Core References

        public BotOwner? Bot { get; internal set; }

        public AIRefactoredBotOwner? AIRefactoredBotOwner { get; private set; }

        public BotMemoryClass? Memory => this.Bot?.Memory;

        public string Nickname => this.Bot?.Profile?.Info?.Nickname ?? "Unknown";

        public Vector3 Position => this.Bot?.Position ?? Vector3.zero;

        #endregion

        #region Runtime Flags

        public bool IsBlinded { get; set; }

        public float BlindUntilTime { get; set; }

        public float LastFlashTime { get; set; }

        public float LastHeardTime { get; private set; } = -999f;

        public Vector3? LastHeardDirection { get; private set; }

        #endregion

        #region AI Subsystems

        public CombatStateMachine? Combat { get; private set; }

        public BotMovementController? Movement { get; private set; }

        public BotPoseController? PoseController { get; private set; }

        public BotLookController? LookController { get; private set; }

        public BotTilt? Tilt { get; private set; }

        public BotTacticalDeviceController? Tactical { get; private set; }

        public BotGroupBehavior? GroupBehavior { get; private set; }

        public BotThreatSelector? ThreatSelector { get; private set; }

        public BotTacticalMemory? TacticalMemory { get; private set; }

        public BotLastShotTracker? LastShotTracker { get; private set; }

        public BotGroupComms? GroupComms { get; private set; }

        public BotSuppressionReactionComponent? Suppression { get; private set; }

        public BotPanicHandler? PanicHandler { get; private set; }

        public BotThreatEscalationMonitor? Escalation { get; private set; }

        public BotInjurySystem? InjurySystem { get; private set; }

        public BotDeadBodyScanner? DeadBodyScanner { get; private set; }

        public BotLootScanner? LootScanner { get; private set; }

        public BotLootDecisionSystem? LootDecisionSystem { get; private set; }

        public BotOwnerPathfindingCache? Pathing { get; private set; }

        public SquadPathCoordinator? SquadPath { get; private set; }

        public BotDoorOpener? DoorOpener { get; private set; }

        public BotHealingBySomebody? HealReceiver { get; private set; }

        public BotHealAnotherTarget? SquadHealer { get; private set; }

        public FlashGrenadeComponent? FlashGrenade { get; private set; }

        public HearingDamageComponent? HearingDamage { get; private set; }

        public TrackedEnemyVisibility? VisibilityTracker { get; set; }

        public BotGroupSyncCoordinator? GroupSync => this.GroupBehavior?.GroupSync;

        public BotPanicHandler? Panic => this.PanicHandler;

        #endregion

        #region Properties

        public bool IsReady =>
            this.Bot != null &&
            this.Movement != null &&
            this.Suppression != null &&
            this.PanicHandler != null &&
            this.Tactical != null &&
            this.FlashGrenade != null;

        #endregion

        #region Initialization

        public void Initialize(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (this.Bot != null)
            {
                Logger.LogWarning("[BotComponentCache] Already initialized for bot " + bot.Profile?.Id);
                return;
            }

            this.Bot = bot;

            try
            {
                this.Pathing = new BotOwnerPathfindingCache();

                this.TacticalMemory = new BotTacticalMemory();
                this.TacticalMemory.Initialize(this);

                this.TryInitSubsystem(nameof(CombatStateMachine), () =>
                {
                    this.Combat = new CombatStateMachine();
                    this.Combat.Initialize(this);
                }, this.TacticalMemory);

                this.TryInitSubsystem(nameof(FlashGrenadeComponent), () =>
                {
                    this.FlashGrenade = new FlashGrenadeComponent();
                    this.FlashGrenade.Initialize(this);
                });

                this.TryInitSubsystem(nameof(BotPanicHandler), () =>
                {
                    this.PanicHandler = new BotPanicHandler();
                    this.PanicHandler.Initialize(this);
                });

                this.TryInitSubsystem(nameof(BotSuppressionReactionComponent), () =>
                {
                    this.Suppression = new BotSuppressionReactionComponent();
                    this.Suppression.Initialize(this);
                });

                this.TryInitSubsystem(nameof(BotThreatEscalationMonitor), () =>
                {
                    this.Escalation = new BotThreatEscalationMonitor();
                    this.Escalation.Initialize(bot);
                });

                this.TryInitSubsystem(nameof(BotGroupBehavior), () =>
                {
                    this.GroupBehavior = new BotGroupBehavior();
                    this.GroupBehavior.Initialize(this);
                }, this.PanicHandler);

                this.TryInitSubsystem(nameof(BotMovementController), () =>
                {
                    this.Movement = new BotMovementController();
                    this.Movement.Initialize(this);
                });

                this.TryInitSubsystem(nameof(BotLookController), () =>
                {
                    this.LookController = new BotLookController(bot, this);
                });

                this.TryInitSubsystem(nameof(BotTacticalDeviceController), () =>
                {
                    this.Tactical = new BotTacticalDeviceController();
                    this.Tactical.Initialize(this);
                });

                if (this.PoseController == null)
                {
                    this.PoseController = new BotPoseController(bot, this);
                }

                this.HearingDamage = new HearingDamageComponent();
                this.Tilt = new BotTilt(bot);

                this.SquadPath = new SquadPathCoordinator();
                this.SquadPath.Initialize(this);

                this.LootScanner = new BotLootScanner();
                this.LootScanner.Initialize(this);

                this.LootDecisionSystem = new BotLootDecisionSystem();
                this.LootDecisionSystem.Initialize(this);

                this.DeadBodyScanner = new BotDeadBodyScanner();
                this.DeadBodyScanner.Initialize(this);

                this.DoorOpener = new BotDoorOpener(bot);
                this.InjurySystem = new BotInjurySystem(this);
                this.LastShotTracker = new BotLastShotTracker();
                this.GroupComms = new BotGroupComms(this);
                this.SquadHealer = bot.HealAnotherTarget ?? new BotHealAnotherTarget(bot);
                this.HealReceiver = bot.HealingBySomebody ?? new BotHealingBySomebody(bot);

                Logger.LogDebug("[BotComponentCache] ✅ Initialized for bot: " + this.Nickname);
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotComponentCache] ❌ Initialization failed for bot " + bot.Profile?.Id + ": " + ex.Message + "\n" + ex.StackTrace);
                throw;
            }
        }

        private void TryInitSubsystem(string name, Action init, params object?[] required)
        {
            for (int i = 0; i < required.Length; i++)
            {
                if (required[i] == null)
                {
                    throw new InvalidOperationException("[BotComponentCache] " + name + " initialization failed — missing required dependency.");
                }
            }

            try
            {
                init.Invoke();
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotComponentCache] Subsystem init failed (" + name + "): " + ex.Message + "\n" + ex.StackTrace);
                throw;
            }
        }

        #endregion

        public void SetOwner(AIRefactoredBotOwner owner)
        {
            if (owner == null)
            {
                return;
            }

            this.AIRefactoredBotOwner = owner;

            if (this.ThreatSelector == null)
            {
                this.ThreatSelector = new BotThreatSelector(this);
            }
        }

        public void RegisterHeardSound(Vector3 source)
        {
            if (this.Bot != null && this.Bot.GetPlayer != null && this.Bot.GetPlayer.IsAI)
            {
                Logger.LogDebug($"[BotSoundRegistry] Sound registered from source: {source}");
                this.LastHeardTime = Time.time;
                this.LastHeardDirection = source - this.Position;
            }
            else
            {
                Logger.LogWarning("[BotSoundRegistry] Sound registration failed - Bot or Player not valid.");
            }
        }
    }
}
