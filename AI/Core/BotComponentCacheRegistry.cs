// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// Replaces MonoBehaviour access with pure C# class lookup.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (bot == null || bot.Profile == null || bot.Profile.Info == null)
            {
                BotFallbackUtility.FallbackToEFTLogic(bot);
                Logger.LogWarning("[BotComponentCacheRegistry] Invalid bot — fallback triggered.");
                return BotRegistry.TryGetCache("null", out var fallbackCache) ? fallbackCache : new BotComponentCache();
            }

            string id = bot.Profile.Id;
            if (string.IsNullOrEmpty(id))
            {
                BotFallbackUtility.FallbackToEFTLogic(bot);
                Logger.LogWarning("[BotComponentCacheRegistry] Bot profile ID is null/empty — fallback triggered.");
                return BotRegistry.TryGetCache("null", out var fallbackCache) ? fallbackCache : new BotComponentCache();
            }

            if (CacheMap.TryGetValue(id, out var existing))
            {
                return existing;
            }

            try
            {
                var cache = new BotComponentCache();
                cache.Initialize(bot);
                CacheMap[id] = cache;
                Logger.LogDebug("[BotComponentCacheRegistry] ✅ Created new cache for: " + id);
                return cache;
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotComponentCacheRegistry] Cache init failed for " + id + ": " + ex);
                BotFallbackUtility.FallbackToEFTLogic(bot);
                return BotRegistry.TryGetCache(id, out var fallbackCache) ? fallbackCache : new BotComponentCache();
            }
        }

        /// <summary>
        /// Gets the cache if it exists.
        /// </summary>
        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                cache = BotRegistry.TryGetCache("null", out var fallbackCache) ? fallbackCache : new BotComponentCache();
                return false;
            }

            return CacheMap.TryGetValue(profileId, out cache);
        }

        /// <summary>
        /// Removes the cache for the specified bot.
        /// </summary>
        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id == null)
            {
                return;
            }

            string id = bot.Profile.Id;
            if (CacheMap.Remove(id))
            {
                Logger.LogDebug("[BotComponentCacheRegistry] Removed cache for: " + id);
            }
        }

        /// <summary>
        /// Clears all caches.
        /// </summary>
        public static void ClearAll()
        {
            CacheMap.Clear();
            Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
        }
    }
}
