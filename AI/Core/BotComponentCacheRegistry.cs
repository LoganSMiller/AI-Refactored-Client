// <auto-generated>
//   AI-Refactored: BotComponentCacheRegistry.cs (Supreme Arbitration, Final Headless Sync Fix, June 2025)
//   Enforces correct cache/owner order and removes race causing "Init failed" or "Deferred wait" logs.
//   Bulletproof: No overwrites, no broken wiring, no unready cache/owner on BotBrain.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Canonical cache registry for all AIRefactored bot component caches and owner attach points.
    /// Guarantees correct order and bulletproof attach across client, headless, and FIKA.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        #region Internal State

        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        private static readonly Dictionary<Player, BotComponentCache> PlayerMap =
            new Dictionary<Player, BotComponentCache>(128);

        private static readonly object Lock = new object();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Returns or creates the canonical BotComponentCache for a valid BotOwner, ensuring safe owner attach.
        /// Never creates double-wired owners/caches. Enforces correct order, parity, and null safety.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            Player player = bot.GetPlayer;
            if (string.IsNullOrEmpty(id) || player == null)
                return null;

            lock (Lock)
            {
                if (CacheMap.TryGetValue(id, out var existing))
                {
                    if (!PlayerMap.ContainsKey(player))
                    {
                        PlayerMap[player] = existing;
                        Logger.LogDebug($"[BotComponentCacheRegistry] Added player mapping for bot: {id}");
                    }

                    // Attach owner if missing and not yet initialized, ensure no overwrites
                    if (existing.AIRefactoredBotOwner == null)
                    {
                        var attachOwner = bot.GetComponent<AIRefactoredBotOwner>();
                        if (attachOwner == null)
                        {
                            attachOwner = new AIRefactoredBotOwner();
                            Logger.LogDebug($"[BotComponentCacheRegistry] Created new AIRefactoredBotOwner for bot: {id}");
                        }

                        existing.SetOwner(attachOwner);

                        if (!attachOwner.IsInitialized)
                        {
                            try
                            {
                                attachOwner.Initialize(bot);
                            }
                            catch (Exception ex)
                            {
                                Logger.LogError($"[BotComponentCacheRegistry] Failed to initialize AIRefactoredBotOwner for bot {id}: {ex}");
                                return null;
                            }
                        }
                    }
                    return existing;
                }

                // Create new cache + owner and initialize safely
                try
                {
                    var newCache = new BotComponentCache();
                    newCache.Initialize(bot);

                    var owner = bot.GetComponent<AIRefactoredBotOwner>();
                    if (owner == null)
                    {
                        owner = new AIRefactoredBotOwner();
                        Logger.LogDebug($"[BotComponentCacheRegistry] Created new AIRefactoredBotOwner for bot: {id}");
                    }

                    newCache.SetOwner(owner);

                    if (!owner.IsInitialized)
                    {
                        owner.Initialize(bot);
                    }

                    CacheMap[id] = newCache;
                    PlayerMap[player] = newCache;

                    Logger.LogDebug($"[BotComponentCacheRegistry] Created and initialized new cache for bot: {id}");
                    return newCache;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"[BotComponentCacheRegistry] Cache creation failed for {id}: {ex}");
                    return null;
                }
            }
        }

        /// <summary>
        /// Returns the cache for a given bot, or null if missing. Never creates. Canonical arbitration lookup.
        /// </summary>
        public static BotComponentCache Get(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                if (CacheMap.TryGetValue(id, out var existing))
                    return existing;
            }
            return null;
        }

        /// <summary>
        /// Tries to get an existing cache for a BotOwner. Legacy/compat.
        /// </summary>
        public static BotComponentCache TryGetExisting(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                return CacheMap.TryGetValue(id, out var existing) ? existing : null;
            }
        }

        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            cache = null;
            if (string.IsNullOrEmpty(profileId))
                return false;

            lock (Lock)
            {
                return CacheMap.TryGetValue(profileId, out cache);
            }
        }

        public static bool TryGetByPlayer(Player player, out BotComponentCache cache)
        {
            cache = null;
            if (player == null)
                return false;

            lock (Lock)
            {
                if (PlayerMap.TryGetValue(player, out cache))
                    return true;

                string id = player.Profile?.Id;
                if (!string.IsNullOrEmpty(id) && CacheMap.TryGetValue(id, out cache))
                {
                    PlayerMap[player] = cache;
                    return true;
                }
                return false;
            }
        }

        public static bool TryGetByBotOwner(BotOwner bot, out BotComponentCache cache)
        {
            cache = null;
            if (!IsFullyValidBot(bot))
                return false;
            return TryGet(bot.Profile.Id, out cache);
        }

        /// <summary>
        /// Safely removes cache for a bot and all player mappings.
        /// </summary>
        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id == null)
                return;

            string id = bot.Profile.Id;
            Player player = bot.GetPlayer;

            lock (Lock)
            {
                CacheMap.Remove(id);
                if (player != null)
                    PlayerMap.Remove(player);

                Logger.LogDebug($"[BotComponentCacheRegistry] Removed cache for: {id}");
            }
        }

        /// <summary>
        /// Clears all caches and player mappings. Use with care.
        /// </summary>
        public static void ClearAll()
        {
            lock (Lock)
            {
                CacheMap.Clear();
                PlayerMap.Clear();
                Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
            }
        }

        #endregion

        #region Utility

        /// <summary>
        /// Validates the BotOwner has all required fields for safe registration.
        /// </summary>
        private static bool IsFullyValidBot(BotOwner bot)
        {
            return bot != null &&
                   bot.Profile != null &&
                   bot.Profile.Info != null &&
                   !string.IsNullOrEmpty(bot.Profile.Id) &&
                   bot.GetPlayer != null &&
                   bot.AIData != null;
        }

        #endregion
    }
}
