// <auto-generated>
//   AI-Refactored: BotComponentCacheRegistry.cs (Ultimate Safety & Extensibility Edition)
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// All wiring is atomic, fully thread-safe, and null-guarded. Caches are keyed by ProfileId and Player instance.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        #region Fields

        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        private static readonly Dictionary<Player, BotComponentCache> PlayerMap =
            new Dictionary<Player, BotComponentCache>(128);

        private static readonly object Lock = new object();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// Safe: always wires owner+cache once. Must not be called inside AIRefactoredBotOwner.Initialize to prevent recursion.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            var player = bot.GetPlayer;
            if (string.IsNullOrEmpty(id) || player == null || bot.AIData == null)
                return null;

            lock (Lock)
            {
                if (CacheMap.TryGetValue(id, out var existing))
                    return existing;

                try
                {
                    var cache = new BotComponentCache();
                    var owner = new AIRefactoredBotOwner();

                    cache.Initialize(bot);
                    cache.SetOwner(owner);

                    // DO NOT call owner.Initialize(bot) here — caller (BotSpawnWatcherService) will handle this
                    CacheMap[id] = cache;

                    if (!PlayerMap.ContainsKey(player))
                        PlayerMap[player] = cache;

                    Logger.LogDebug($"[BotComponentCacheRegistry] ✅ Created new cache for bot: {id}");
                    return cache;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"[BotComponentCacheRegistry] ❌ Cache creation failed for {id}: {ex}");
                    return null;
                }
            }
        }

        public static BotComponentCache TryGetExisting(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                return CacheMap.TryGetValue(id, out var existing) ? existing : null;
            }
        }

        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                cache = null;
                return false;
            }

            lock (Lock)
            {
                return CacheMap.TryGetValue(profileId, out cache);
            }
        }

        public static bool TryGetByPlayer(Player player, out BotComponentCache cache)
        {
            cache = null;
            if (player == null)
                return false;

            lock (Lock)
            {
                if (PlayerMap.TryGetValue(player, out cache))
                    return true;

                string id = player.Profile?.Id;
                if (!string.IsNullOrEmpty(id) && CacheMap.TryGetValue(id, out cache))
                {
                    PlayerMap[player] = cache;
                    return true;
                }

                return false;
            }
        }

        public static bool TryGetByBotOwner(BotOwner bot, out BotComponentCache cache)
        {
            cache = null;
            if (!IsFullyValidBot(bot))
                return false;
            return TryGet(bot.Profile.Id, out cache);
        }

        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id == null)
                return;

            string id = bot.Profile.Id;
            var player = bot.GetPlayer;

            lock (Lock)
            {
                if (CacheMap.Remove(id))
                    Logger.LogDebug($"[BotComponentCacheRegistry] Removed cache for: {id}");
                if (player != null)
                    PlayerMap.Remove(player);
            }
        }

        public static void ClearAll()
        {
            lock (Lock)
            {
                CacheMap.Clear();
                PlayerMap.Clear();
                Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
            }
        }

        #endregion

        #region Helpers

        private static bool IsFullyValidBot(BotOwner bot)
        {
            return bot != null
                   && bot.Profile != null
                   && bot.Profile.Info != null
                   && !string.IsNullOrEmpty(bot.Profile.Id)
                   && bot.GetPlayer != null
                   && bot.AIData != null;
        }

        #endregion
    }
}
