// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// Replaces MonoBehaviour access with pure C# class lookup.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// </summary>
        /// <param name="bot">BotOwner to resolve or register cache for.</param>
        /// <returns>Initialized BotComponentCache instance.</returns>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException("bot", "[BotComponentCacheRegistry] BotOwner is null.");
            }

            Profile profile = bot.Profile;
            if (profile == null)
            {
                throw new InvalidOperationException("[BotComponentCacheRegistry] Bot profile is null.");
            }

            string id = profile.Id;
            if (string.IsNullOrEmpty(id))
            {
                throw new InvalidOperationException("[BotComponentCacheRegistry] Bot profile ID is null or empty.");
            }

            BotComponentCache cache;
            if (CacheMap.TryGetValue(id, out cache))
            {
                return cache;
            }

            cache = new BotComponentCache();
            cache.Initialize(bot);
            CacheMap[id] = cache;

            Logger.LogDebug("[BotComponentCacheRegistry] Created new cache for bot: " + id);
            return cache;
        }

        /// <summary>
        /// Gets the cache if it exists, or returns false if not found.
        /// </summary>
        /// <param name="profileId">Profile ID to look up.</param>
        /// <param name="cache">Out BotComponentCache if found.</param>
        /// <returns>True if found.</returns>
        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            cache = null;

            if (string.IsNullOrEmpty(profileId))
            {
                return false;
            }

            return CacheMap.TryGetValue(profileId, out cache);
        }

        /// <summary>
        /// Removes the cache for the specified bot.
        /// </summary>
        /// <param name="bot">BotOwner to unregister.</param>
        public static void Remove(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException("bot");
            }

            Profile profile = bot.Profile;
            if (profile != null)
            {
                string id = profile.Id;
                if (!string.IsNullOrEmpty(id))
                {
                    if (CacheMap.Remove(id))
                    {
                        Logger.LogDebug("[BotComponentCacheRegistry] Removed cache for bot: " + id);
                    }
                }
            }
        }

        /// <summary>
        /// Clears all registered caches.
        /// </summary>
        public static void ClearAll()
        {
            CacheMap.Clear();
            Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
        }
    }
}