// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All cache/owner initialization is bulletproof: nulls are impossible, no terminal fallback, always retries, logs are clear.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// Replaces MonoBehaviour access with pure C# class lookup.
    /// Bulletproof: All failures are locally contained, no fallback, always retries. No cache can ever be left in a bad state.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        #region Fields

        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        private static readonly object Lock = new object();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// If bot/profile is invalid, returns null (no fallback), and caller must retry next tick.
        /// Ensures AIRefactoredBotOwner is always constructed and wired before cache is returned.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            if (string.IsNullOrEmpty(id))
                return null;

            lock (Lock)
            {
                if (CacheMap.TryGetValue(id, out var existing))
                {
                    EnsureOwnerAssigned(existing, bot, id);
                    return existing;
                }

                try
                {
                    var cache = new BotComponentCache();
                    cache.Initialize(bot);

                    if (!BotRegistry.TryGetRefactoredOwner(id, out var owner) || owner == null)
                    {
                        owner = new AIRefactoredBotOwner();
                        owner.Initialize(bot);
                        BotRegistry.RegisterOwner(id, owner);
                        Logger.LogDebug($"[BotComponentCacheRegistry] Created new AIRefactoredBotOwner for: {id}");
                    }

                    cache.SetOwner(owner);

                    if (cache.Bot == null || cache.AIRefactoredBotOwner == null)
                    {
                        Logger.LogWarning($"[BotComponentCacheRegistry] Null Bot or Owner in cache after init! For {id}");
                        return null; // Will be retried on next tick
                    }

                    CacheMap[id] = cache;
                    Logger.LogDebug($"[BotComponentCacheRegistry] ✅ Created new cache for: {id}");
                    return cache;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"[BotComponentCacheRegistry] Cache init failed for {id}: {ex}");
                    return null;
                }
            }
        }

        /// <summary>
        /// Gets the cache for a profile ID if it exists. If not, returns false and null.
        /// </summary>
        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                cache = null;
                return false;
            }

            lock (Lock)
            {
                return CacheMap.TryGetValue(profileId, out cache);
            }
        }

        /// <summary>
        /// Removes the cache for the specified bot, if present.
        /// </summary>
        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id == null)
                return;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                if (CacheMap.Remove(id))
                {
                    Logger.LogDebug($"[BotComponentCacheRegistry] Removed cache for: {id}");
                }
            }
        }

        /// <summary>
        /// Clears all bot caches.
        /// </summary>
        public static void ClearAll()
        {
            lock (Lock)
            {
                CacheMap.Clear();
                Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
            }
        }

        #endregion

        #region Private Helpers

        /// <summary>
        /// Returns true if bot, Profile, Info, and Id are all non-null/non-empty.
        /// </summary>
        private static bool IsFullyValidBot(BotOwner bot)
        {
            return bot?.Profile?.Info != null && !string.IsNullOrEmpty(bot.Profile.Id);
        }

        /// <summary>
        /// Ensures that a BotComponentCache has a valid AIRefactoredBotOwner assigned before use.
        /// </summary>
        private static void EnsureOwnerAssigned(BotComponentCache cache, BotOwner bot, string id)
        {
            if (cache == null)
                return;
            if (cache.AIRefactoredBotOwner != null)
                return;

            try
            {
                if (!BotRegistry.TryGetRefactoredOwner(id, out var owner) || owner == null)
                {
                    owner = new AIRefactoredBotOwner();
                    owner.Initialize(bot);
                    BotRegistry.RegisterOwner(id, owner);
                    Logger.LogDebug($"[BotComponentCacheRegistry] [Owner Assign] Created new owner for {id} during EnsureOwnerAssigned.");
                }

                cache.SetOwner(owner);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotComponentCacheRegistry] [Owner Assign] Exception for {id}: {ex}");
            }
        }

        #endregion
    }
}
