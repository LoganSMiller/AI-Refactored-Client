// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// Replaces MonoBehaviour access with pure C# class lookup.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly Dictionary<string, BotComponentCache> CacheMap = new Dictionary<string, BotComponentCache>(128);

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (bot == null || bot.Profile == null)
            {
                throw new ArgumentNullException(nameof(bot), "BotOwner or its profile is null.");
            }

            string profileId = bot.Profile.Id;

            if (CacheMap.TryGetValue(profileId, out var existing))
            {
                return existing;
            }

            var newCache = new BotComponentCache();
            newCache.Initialize(bot);
            CacheMap[profileId] = newCache;

            Logger.LogDebug("[BotComponentCacheRegistry] Created new cache for bot: " + profileId);
            return newCache;
        }

        /// <summary>
        /// Gets the cache if it exists, or null if not registered.
        /// </summary>
        public static BotComponentCache? TryGet(string profileId)
        {
            if (string.IsNullOrWhiteSpace(profileId))
                return null;

            CacheMap.TryGetValue(profileId, out var cache);
            return cache;
        }

        /// <summary>
        /// Removes the cache for the specified bot.
        /// </summary>
        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id is string id && CacheMap.ContainsKey(id))
            {
                CacheMap.Remove(id);
                Logger.LogDebug("[BotComponentCacheRegistry] Removed cache for bot: " + id);
            }
        }

        /// <summary>
        /// Clears all registered caches.
        /// </summary>
        public static void ClearAll()
        {
            CacheMap.Clear();
            Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
        }
    }
}
