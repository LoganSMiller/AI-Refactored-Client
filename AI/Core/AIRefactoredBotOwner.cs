// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Holds AIRefactored-specific metadata for a bot, including personality, zone, tuning, and runtime behavior state.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        #region Static

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly PersonalityType[] PersonalityTypes = (PersonalityType[])Enum.GetValues(typeof(PersonalityType));
        private static readonly object PersonalityLock = new object();
        private static bool _hasGlobalAssigned;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotMissionController _missionController;
        private bool _isInitialized;

        #endregion

        #region Properties

        /// <summary>Assigned bot instance. Throws if not initialized.</summary>
        public BotOwner Bot
        {
            get
            {
                if (!_isInitialized)
                {
                    throw new InvalidOperationException("AIRefactoredBotOwner accessed before initialization.");
                }

                return _bot;
            }
        }

        /// <summary>Component cache. Throws if not initialized.</summary>
        public BotComponentCache Cache
        {
            get
            {
                if (!_isInitialized)
                {
                    throw new InvalidOperationException("Component cache accessed before initialization.");
                }

                return _cache;
            }
        }

        /// <summary>Mission controller if assigned. Throws if not set.</summary>
        public BotMissionController MissionController
        {
            get
            {
                if (_missionController == null)
                {
                    throw new InvalidOperationException("MissionController not assigned.");
                }

                return _missionController;
            }
        }

        /// <summary>Active personality configuration.</summary>
        public BotPersonalityProfile PersonalityProfile { get; private set; }

        /// <summary>Display/debug personality name.</summary>
        public string PersonalityName { get; private set; }

        /// <summary>Assigned zone name.</summary>
        public string AssignedZone { get; private set; }

        #endregion

        #region Constructor

        public AIRefactoredBotOwner()
        {
            this.PersonalityProfile = new BotPersonalityProfile();
            this.PersonalityName = "Unknown";
            this.AssignedZone = "unknown";
        }

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes this AIRefactoredBotOwner with the specified BotOwner.
        /// </summary>
        /// <param name="bot">Live bot owner instance.</param>
        public void Initialize(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (_isInitialized)
            {
                Logger.LogWarning("[AIRefactoredBotOwner] Duplicate initialization attempt blocked.");
                return;
            }

            _bot = bot;
            _cache = BotComponentCacheRegistry.GetOrCreate(bot);
            _cache.SetOwner(this);
            _isInitialized = true;

            try
            {
                lock (PersonalityLock)
                {
                    if (!_hasGlobalAssigned)
                    {
                        _hasGlobalAssigned = true;
                        this.InitProfile(this.GetRandomPersonality());
                    }
                }

                if (!FikaHeadlessDetector.IsHeadless)
                {
                    string name = bot.Profile != null && bot.Profile.Info != null ? bot.Profile.Info.Nickname : "Unnamed";
                    Logger.LogDebug("[AIRefactoredBotOwner] Initialized for bot: " + name);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredBotOwner] Initialization failed: " + ex);
                throw;
            }
        }

        #endregion

        #region Personality

        /// <summary>
        /// Initializes the personality profile using a named preset.
        /// </summary>
        /// <param name="type">Enum value representing preset personality.</param>
        public void InitProfile(PersonalityType type)
        {
            BotPersonalityProfile preset;
            if (!BotPersonalityPresets.Presets.TryGetValue(type, out preset) || preset == null)
            {
                preset = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                this.PersonalityName = "Adaptive";
                Logger.LogWarning("[AIRefactoredBotOwner] Invalid or null personality preset for '" + type + "' — using Adaptive.");
            }
            else
            {
                this.PersonalityName = type.ToString();
            }

            this.PersonalityProfile = preset;

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Personality assigned: " + this.PersonalityName);
            }
        }

        /// <summary>
        /// Assigns a custom personality profile.
        /// </summary>
        /// <param name="profile">The custom profile.</param>
        /// <param name="name">Optional name for display/debug purposes.</param>
        public void InitProfile(BotPersonalityProfile profile, string name)
        {
            if (profile == null)
            {
                throw new ArgumentNullException(nameof(profile));
            }

            this.PersonalityProfile = profile;
            this.PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Custom profile assigned: " + this.PersonalityName);
            }
        }

        /// <summary>
        /// Resets to a blank personality profile.
        /// </summary>
        public void ClearPersonality()
        {
            this.PersonalityProfile = new BotPersonalityProfile();
            this.PersonalityName = "Cleared";

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Personality cleared.");
            }
        }

        /// <summary>
        /// Returns true if a personality profile is assigned.
        /// </summary>
        public bool HasPersonality()
        {
            return this.PersonalityProfile != null;
        }

        #endregion

        #region Zone + Mission

        /// <summary>
        /// Assigns the zone name associated with this bot.
        /// </summary>
        /// <param name="zoneName">Valid zone name string.</param>
        public void SetZone(string zoneName)
        {
            if (string.IsNullOrWhiteSpace(zoneName))
            {
                Logger.LogWarning("[AIRefactoredBotOwner] Ignored empty zone assignment.");
                return;
            }

            this.AssignedZone = zoneName;

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Zone assigned: " + zoneName);
            }
        }

        /// <summary>
        /// Attaches a mission controller to this bot owner.
        /// </summary>
        /// <param name="controller">Valid mission controller instance.</param>
        public void SetMissionController(BotMissionController controller)
        {
            if (controller == null)
            {
                throw new ArgumentNullException(nameof(controller));
            }

            this._missionController = controller;
        }

        #endregion

        #region Helpers

        private PersonalityType GetRandomPersonality()
        {
            return PersonalityTypes[UnityEngine.Random.Range(0, PersonalityTypes.Length)];
        }

        #endregion
    }
}
