// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Holds bot-specific personality, profile, and strategic coordination metadata.
    /// Used for all AIRefactored behavior customization, including zone logic and combat tuning.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        #region Constants

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Properties

        /// <summary>Assigned tactical zone or region label (used for routing and fallback).</summary>
        public string AssignedZone { get; private set; } = "unknown";

        /// <summary>Main EFT BotOwner instance linked to this AI refactor.</summary>
        public BotOwner? Bot { get; private set; }

        /// <summary>Refactored runtime cache of AI systems, memory, perception, etc.</summary>
        public BotComponentCache? Cache { get; private set; }

        /// <summary>Reference to the active mission controller (set during AI initialization).</summary>
        public BotMissionController? MissionController { get; private set; }

        /// <summary>Human-readable name of the current profile (e.g., "Aggressive", "Stealth").</summary>
        public string PersonalityName { get; private set; } = "Unknown";

        /// <summary>Active behavior profile for this bot (aggression, reaction, caution, etc).</summary>
        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        #endregion

        #region Public Methods

        /// <summary>
        /// Primary initialization for the AIRefactoredBotOwner wrapper.
        /// Called once by BotBrain or system bootstrap.
        /// </summary>
        /// <param name="bot">The linked BotOwner instance.</param>
        /// <param name="cache">The component cache instance.</param>
        public void Initialize(BotOwner bot, BotComponentCache cache)
        {
            this.Bot = bot ?? throw new ArgumentNullException(nameof(bot));
            this.Cache = cache ?? throw new ArgumentNullException(nameof(cache));

            if (!this.HasPersonality())
            {
                this.InitProfile(this.GetRandomPersonality());
            }

            var nickname = bot.Profile?.Info?.Nickname ?? "Unknown";
            Logger.LogDebug($"[AIRefactored-Owner] Initialized for {nickname}.");
        }

        /// <summary>
        /// Initializes the AI personality with a given preset type.
        /// </summary>
        /// <param name="type">The personality type to assign.</param>
        public void InitProfile(PersonalityType type)
        {
            if (BotPersonalityPresets.Presets.TryGetValue(type, out var preset))
            {
                this.PersonalityProfile = preset;
                this.PersonalityName = type.ToString();
                Logger.LogInfo($"[AIRefactored-Owner] Personality '{this.PersonalityName}' assigned.");
            }
            else
            {
                this.PersonalityProfile = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                this.PersonalityName = "Adaptive";
                Logger.LogWarning($"[AIRefactored-Owner] Invalid preset '{type}', defaulted to Adaptive.");
            }
        }

        /// <summary>
        /// Initializes the AI personality with a custom profile.
        /// </summary>
        /// <param name="profile">The profile to assign.</param>
        /// <param name="name">Optional readable name for the personality.</param>
        public void InitProfile(BotPersonalityProfile profile, string name = "Custom")
        {
            this.PersonalityProfile = profile ?? new BotPersonalityProfile();
            this.PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;
            Logger.LogInfo($"[AIRefactored-Owner] Custom personality '{this.PersonalityName}' assigned.");
        }

        /// <summary>
        /// Clears the currently assigned personality and resets to default.
        /// </summary>
        public void ClearPersonality()
        {
            this.PersonalityProfile = new BotPersonalityProfile();
            this.PersonalityName = "Cleared";
            Logger.LogInfo("[AIRefactored-Owner] Personality cleared.");
        }

        /// <summary>
        /// Checks whether a personality profile has been assigned.
        /// </summary>
        /// <returns>True if personality is assigned, otherwise false.</returns>
        public bool HasPersonality()
        {
            return this.PersonalityProfile != null;
        }

        /// <summary>
        /// Sets the mission controller reference for this bot.
        /// </summary>
        /// <param name="controller">The active mission controller.</param>
        public void SetMissionController(BotMissionController controller)
        {
            this.MissionController = controller ?? throw new ArgumentNullException(nameof(controller));
        }

        /// <summary>
        /// Sets the tactical zone name assigned to this bot.
        /// </summary>
        /// <param name="zoneName">The zone name string.</param>
        public void SetZone(string zoneName)
        {
            if (string.IsNullOrEmpty(zoneName))
            {
                Logger.LogWarning("[AIRefactored-Owner] Attempted to assign empty zone name.");
                return;
            }

            this.AssignedZone = zoneName;
            Logger.LogInfo($"[AIRefactored-Owner] Zone assigned: {zoneName}.");
        }

        #endregion

        #region Private Methods

        private PersonalityType GetRandomPersonality()
        {
            var values = (PersonalityType[])Enum.GetValues(typeof(PersonalityType));
            var roll = UnityEngine.Random.Range(0, values.Length);
            return values[roll];
        }

        #endregion
    }
}
