// <auto-generated>
//   AI-Refactored: AIRefactoredBotOwner.cs (Beyond Diamond Edition, June 2025)
//   Bulletproof atomic wiring, no fallback disables, full parity for headless/client mode.
//   Fully integrated with BotComponentCacheRegistry. All exceptions locally contained.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Stores AIRefactored-specific metadata per bot: personality, mission, zone tag, cache, and initialization state.
    /// Bulletproof: Atomic attach, no null propagation, safe for all raid types and hosting modes.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotMissionController _missionController;
        private bool _isInitialized;

        public BotOwner Bot => _isInitialized && _bot != null ? _bot : LogAndReturnNull("[AIRefactoredBotOwner] Bot accessed before initialization.");
        public BotComponentCache Cache => _isInitialized && _cache != null ? _cache : LogAndReturnEmptyCache();
        public BotMissionController MissionController => _missionController ?? LogAndReturnNullMission();

        public BotPersonalityProfile PersonalityProfile { get; private set; }
        public string PersonalityName { get; private set; }
        public string AssignedZone { get; private set; }
        public bool IsInitialized => _isInitialized;

        public AIRefactoredBotOwner()
        {
            PersonalityProfile = new BotPersonalityProfile();
            PersonalityName = "Unknown";
            AssignedZone = "unknown";
        }

        /// <summary>
        /// Atomic initializer. Wires to bot + cache, initializes profile, and guarantees valid state.
        /// Safe for all environments (headless, client, host). All exceptions locally logged.
        /// </summary>
        public void Initialize(BotOwner bot)
        {
            if (_isInitialized)
            {
                Logger.LogDebug($"[AIRefactoredBotOwner] Already initialized for {bot?.Profile?.Id ?? "null"}.");
                return;
            }

            if (bot == null)
            {
                Logger.LogError("[AIRefactoredBotOwner] Cannot initialize — bot was null.");
                return;
            }

            _bot = bot;
            string id = bot.Profile?.Id ?? "null";

            try
            {
                _cache = BotComponentCacheRegistry.TryGetExisting(bot);
                if (_cache == null)
                {
                    Logger.LogError($"[AIRefactoredBotOwner] Cache not found for {id} — cannot initialize.");
                    return;
                }

                if (_cache.AIRefactoredBotOwner != this)
                {
                    _cache.SetOwner(this);
                    Logger.LogDebug($"[AIRefactoredBotOwner] SetOwner wired: {id}");
                }

                WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;
                BotPersonalityProfile profile = BotRegistry.GetOrGenerate(id, PersonalityType.Balanced, role);
                InitProfile(profile, profile?.Personality.ToString() ?? "Balanced");

                _isInitialized = true;
                Logger.LogDebug($"[AIRefactoredBotOwner] Initialized for: {bot.Profile?.Info?.Nickname ?? "Unnamed"}");
                _cache.OnOwnerAttached();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] Initialization failed for {id}: {ex}");
            }
        }

        /// <summary>
        /// Assigns preset personality by type. Falls back to Adaptive on failure.
        /// </summary>
        public void InitProfile(PersonalityType type)
        {
            try
            {
                if (!BotPersonalityPresets.Presets.TryGetValue(type, out var preset) || preset == null)
                {
                    preset = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                    PersonalityName = "Adaptive";
                    Logger.LogWarning($"[AIRefactoredBotOwner] Invalid personality type {type} — defaulted to Adaptive.");
                }
                else
                {
                    PersonalityName = type.ToString();
                }

                PersonalityProfile = preset;
                Logger.LogDebug($"[AIRefactoredBotOwner] Assigned personality: {PersonalityName}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] InitProfile(type) failed: {ex}");
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Fallback";
            }
        }

        /// <summary>
        /// Assigns a provided profile with optional name.
        /// </summary>
        public void InitProfile(BotPersonalityProfile profile, string name)
        {
            try
            {
                if (profile == null)
                {
                    Logger.LogError("[AIRefactoredBotOwner] InitProfile failed: null profile.");
                    PersonalityProfile = new BotPersonalityProfile();
                    PersonalityName = "Fallback";
                    return;
                }

                PersonalityProfile = profile;
                PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;
                Logger.LogDebug($"[AIRefactoredBotOwner] Profile set: {PersonalityName}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] InitProfile(profile, name) failed: {ex}");
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Fallback";
            }
        }

        public void ClearPersonality()
        {
            try
            {
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Cleared";
                Logger.LogDebug("[AIRefactoredBotOwner] Personality cleared.");
            }
            catch { }
        }

        public bool HasPersonality() => PersonalityProfile != null;

        public void SetZone(string zoneName)
        {
            try
            {
                if (!string.IsNullOrEmpty(zoneName))
                {
                    AssignedZone = zoneName;
                    Logger.LogDebug($"[AIRefactoredBotOwner] Zone assigned: {zoneName}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] SetZone failed: {ex}");
            }
        }

        public void SetMissionController(BotMissionController controller)
        {
            try
            {
                if (controller == null)
                {
                    Logger.LogError("[AIRefactoredBotOwner] SetMissionController failed: null controller.");
                    return;
                }

                _missionController = controller;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] SetMissionController failed: {ex}");
            }
        }

        private static BotOwner LogAndReturnNull(string msg)
        {
            Logger.LogError(msg);
            return null;
        }

        private static BotComponentCache LogAndReturnEmptyCache()
        {
            Logger.LogError("[AIRefactoredBotOwner] Cache accessed before initialization.");
            return BotComponentCache.Empty;
        }

        private static BotMissionController LogAndReturnNullMission()
        {
            Logger.LogError("[AIRefactoredBotOwner] MissionController accessed before assignment.");
            return null;
        }
    }
}
