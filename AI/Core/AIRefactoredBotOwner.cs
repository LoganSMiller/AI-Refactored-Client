// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Holds AIRefactored-specific metadata for a bot, including personality, tactical zone,
    /// profile tuning, and behavior state. Used to customize strategic decisions at runtime.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        #region Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the primary EFT BotOwner instance linked to this wrapper.
        /// </summary>
        public BotOwner? Bot { get; private set; }

        /// <summary>
        /// Gets the system-level runtime cache for this bot (combat, memory, etc).
        /// </summary>
        public BotComponentCache? Cache { get; private set; }

        /// <summary>
        /// Gets the linked mission controller responsible for this bot’s current objective state.
        /// </summary>
        public BotMissionController? MissionController { get; private set; }

        /// <summary>
        /// Gets the behavior tuning profile (aggression, caution, suppress bias, etc).
        /// </summary>
        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        /// <summary>
        /// Gets the name of the personality profile (e.g., Aggressive, Stealth).
        /// </summary>
        public string PersonalityName { get; private set; } = "Unknown";

        /// <summary>
        /// Gets the zone or tactical region assigned to the bot (for routing/fallback logic).
        /// </summary>
        public string AssignedZone { get; private set; } = "unknown";

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the wrapper with the live bot instance and system cache.
        /// </summary>
        /// <param name="bot">The underlying EFT BotOwner.</param>
        /// <param name="cache">The AIRefactored component cache for this bot.</param>
        public void Initialize(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            this.Bot = bot;
            this.Cache = cache;

            if (!this.HasPersonality())
            {
                this.InitProfile(this.GetRandomPersonality());
            }

            string nickname = bot.Profile?.Info?.Nickname ?? "Unnamed";
            Logger.LogDebug("[AIRefactoredBotOwner] Initialized for bot: " + nickname);
        }

        #endregion

        #region Personality Control

        /// <summary>
        /// Assigns a personality preset by enum type (e.g., Cautious, Aggressive).
        /// </summary>
        /// <param name="type">The personality type to use.</param>
        public void InitProfile(PersonalityType type)
        {
            if (BotPersonalityPresets.Presets.TryGetValue(type, out BotPersonalityProfile? preset))
            {
                this.PersonalityProfile = preset;
                this.PersonalityName = type.ToString();
                Logger.LogInfo("[AIRefactoredBotOwner] Personality '" + this.PersonalityName + "' assigned.");
            }
            else
            {
                this.PersonalityProfile = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                this.PersonalityName = "Adaptive";
                Logger.LogWarning("[AIRefactoredBotOwner] Invalid personality '" + type + "' — defaulting to Adaptive.");
            }
        }

        /// <summary>
        /// Manually assigns a custom personality profile with optional display name.
        /// </summary>
        /// <param name="profile">The profile instance to use.</param>
        /// <param name="name">Optional profile label for logging.</param>
        public void InitProfile(BotPersonalityProfile profile, string name = "Custom")
        {
            this.PersonalityProfile = profile ?? new BotPersonalityProfile();
            this.PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;
            Logger.LogInfo("[AIRefactoredBotOwner] Custom profile assigned: " + this.PersonalityName);
        }

        /// <summary>
        /// Resets the bot’s personality profile and name to a cleared default.
        /// </summary>
        public void ClearPersonality()
        {
            this.PersonalityProfile = new BotPersonalityProfile();
            this.PersonalityName = "Cleared";
            Logger.LogInfo("[AIRefactoredBotOwner] Personality cleared.");
        }

        /// <summary>
        /// Returns true if a personality profile is currently assigned.
        /// </summary>
        public bool HasPersonality()
        {
            return this.PersonalityProfile != null;
        }

        #endregion

        #region Zone and Mission Binding

        /// <summary>
        /// Assigns the active mission controller for this bot.
        /// </summary>
        /// <param name="controller">The mission controller to assign.</param>
        public void SetMissionController(BotMissionController controller)
        {
            if (controller == null)
            {
                throw new ArgumentNullException(nameof(controller));
            }

            this.MissionController = controller;
        }

        /// <summary>
        /// Sets the named tactical zone for fallback and patrol routing logic.
        /// </summary>
        /// <param name="zoneName">The zone name string.</param>
        public void SetZone(string zoneName)
        {
            if (string.IsNullOrWhiteSpace(zoneName))
            {
                Logger.LogWarning("[AIRefactoredBotOwner] Refused to assign empty or null zone name.");
                return;
            }

            this.AssignedZone = zoneName;
            Logger.LogInfo("[AIRefactoredBotOwner] Zone set to: " + zoneName);
        }

        #endregion

        #region Internals

        private PersonalityType GetRandomPersonality()
        {
            PersonalityType[] values = (PersonalityType[])Enum.GetValues(typeof(PersonalityType));
            int roll = UnityEngine.Random.Range(0, values.Length);
            return values[roll];
        }

        #endregion
    }
}
