// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Holds AIRefactored-specific metadata for a bot, including personality, tactical zone,
    /// profile tuning, and behavior state. Used to customize strategic decisions at runtime.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        #region Static

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly PersonalityType[] PersonalityTypes = (PersonalityType[])Enum.GetValues(typeof(PersonalityType));
        private static readonly object PersonalityLock = new object();
        private static bool _hasGlobalAssigned = false;

        #endregion

        #region Properties

        public BotOwner? Bot { get; private set; }

        public BotComponentCache? Cache { get; private set; }

        public BotMissionController? MissionController { get; private set; }

        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        public string PersonalityName { get; private set; } = "Unknown";

        public string AssignedZone { get; private set; } = "unknown";

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the wrapper with the live bot instance and system cache.
        /// </summary>
        /// <param name="bot">The underlying EFT BotOwner.</param>
        public void Initialize(BotOwner bot)
        {
            if (bot == null) throw new ArgumentNullException(nameof(bot));

            if (this.Bot != null || this.Cache != null)
            {
                Logger.LogWarning("[AIRefactoredBotOwner] Initialize called more than once.");
                return;
            }

            this.Bot = bot;
            this.Cache = BotComponentCacheRegistry.GetOrCreate(bot);

            try
            {
                lock (PersonalityLock)
                {
                    if (!_hasGlobalAssigned)
                    {
                        _hasGlobalAssigned = true;
                        InitProfile(GetRandomPersonality());
                    }
                }

                string nickname = bot.Profile?.Info?.Nickname ?? "Unnamed";
                if (!FikaHeadlessDetector.IsHeadless)
                {
                    Logger.LogDebug("[AIRefactoredBotOwner] Initialized for bot: " + nickname);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredBotOwner] Initialization failed: " + ex.Message + "\n" + ex.StackTrace);
                throw;
            }
        }

        #endregion

        #region Personality

        public void InitProfile(PersonalityType type)
        {
            if (BotPersonalityPresets.Presets.TryGetValue(type, out BotPersonalityProfile? preset) && preset != null)
            {
                PersonalityProfile = preset;
                PersonalityName = type.ToString();

                if (!FikaHeadlessDetector.IsHeadless)
                {
                    Logger.LogInfo("[AIRefactoredBotOwner] Personality '" + PersonalityName + "' assigned.");
                }
            }
            else
            {
                PersonalityProfile = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                PersonalityName = "Adaptive";

                Logger.LogWarning("[AIRefactoredBotOwner] Invalid or null profile for '" + type + "' — fallback to Adaptive.");
            }
        }

        public void InitProfile(BotPersonalityProfile profile, string name = "Custom")
        {
            if (profile == null)
            {
                profile = new BotPersonalityProfile();
            }

            PersonalityProfile = profile;
            PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Custom profile assigned: " + PersonalityName);
            }
        }

        public void ClearPersonality()
        {
            PersonalityProfile = new BotPersonalityProfile();
            PersonalityName = "Cleared";

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Personality cleared.");
            }
        }

        public bool HasPersonality()
        {
            return PersonalityProfile != null;
        }

        #endregion

        #region Zones & Missions

        public void SetMissionController(BotMissionController controller)
        {
            if (controller == null)
            {
                throw new ArgumentNullException(nameof(controller));
            }

            MissionController = controller;
        }

        public void SetZone(string zoneName)
        {
            if (string.IsNullOrWhiteSpace(zoneName))
            {
                Logger.LogWarning("[AIRefactoredBotOwner] Refused to assign empty or null zone name.");
                return;
            }

            AssignedZone = zoneName;

            if (!FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[AIRefactoredBotOwner] Zone set to: " + zoneName);
            }
        }

        #endregion

        #region Internals

        private PersonalityType GetRandomPersonality()
        {
            return PersonalityTypes[UnityEngine.Random.Range(0, PersonalityTypes.Length)];
        }

        #endregion
    }
}
