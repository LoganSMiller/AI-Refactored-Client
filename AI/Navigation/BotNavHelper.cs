// <auto-generated>
//   Part of AI-Refactored: Realistic AI for Escape from Tarkov.
//   SYSTEMATICALLY MANAGED: Strictly uses EFT internal navigation. No custom nav fallback.
//   All movement/tactical queries rely only on PathControllerClass and BotMover.
//   Bulletproof: All null/invalid states handled locally. No fallback. No vanilla AI handoff.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using EFT;
    using UnityEngine;
    using BepInEx.Logging;

    /// <summary>
    /// Canonical wrapper for all AIRefactored navigation queries.
    /// Strictly uses EFT's internal navigation: BotMover and PathControllerClass.
    /// No registry, cache, or spatial query logic allowed.
    /// Bulletproof: All failures are locally isolated and never cause fallback or vanilla handoff.
    /// </summary>
    public static class BotNavHelper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        /// <summary>
        /// Attempts to resolve the next safe movement target using EFT's internal path system.
        /// Returns true if a valid target point is available.
        /// </summary>
        public static bool TryGetSafeTarget(BotOwner bot, out Vector3 target)
        {
            target = Vector3.zero;
            if (!HasPath(bot))
                return false;

            Vector3 pt = bot.Mover._pathController.LastTargetPoint(1.0f);
            if (!IsValid(pt) || pt.y < -2.5f)
                return false;

            target = pt;
            return true;
        }

        /// <summary>
        /// Gets the current EFT path waypoints as a Vector3 array.
        /// Returns null if unavailable or invalid.
        /// </summary>
        public static Vector3[] GetCurrentPathPoints(BotOwner bot, int maxPoints = 16)
        {
            if (!HasPath(bot))
                return null;

            var points = bot.Mover._pathController.GetWayPoints(maxPoints);
            if (points == null || points.Length == 0)
                return null;

            for (int i = 0; i < points.Length; i++)
            {
                if (!IsValid(points[i]) || points[i].y < -2.5f)
                    return null;
            }

            return points;
        }

        /// <summary>
        /// Gets the current "corner" (next turn) on the active path, if available.
        /// Adds tiny human-like jitter for realism.
        /// </summary>
        public static bool TryGetCurrentCorner(BotOwner bot, out Vector3 corner)
        {
            corner = Vector3.zero;
            if (!HasPath(bot))
                return false;

            Vector3 c = bot.Mover._pathController.CurrentCorner();
            if (!IsValid(c) || c.y < -2.5f)
                return false;

            float jitter = 0.045f;
            corner = c + new Vector3(
                UnityEngine.Random.Range(-jitter, jitter),
                0f,
                UnityEngine.Random.Range(-jitter, jitter)
            );
            return true;
        }

        /// <summary>
        /// Gets the remaining distance to the destination, or float.MaxValue if unavailable.
        /// </summary>
        public static float GetRemainingDistance(BotOwner bot)
        {
            return HasPath(bot)
                ? Mathf.Clamp(bot.Mover._pathController.PlayerRemainingDist, 0f, 9999f)
                : float.MaxValue;
        }

        /// <summary>
        /// Returns true if a given point is on the bot's current path within maxDist.
        /// </summary>
        public static bool IsPointOnCurrentPath(BotOwner bot, Vector3 point, float maxDist)
        {
            return HasPath(bot) &&
                   bot.Mover._pathController.IsPointOnCurrentWay(point, maxDist);
        }

        /// <summary>
        /// Returns true if the bot has a valid path controller with an active path.
        /// </summary>
        public static bool HasPath(BotOwner bot)
        {
            return bot?.Mover != null && IsPathValid(bot.Mover._pathController);
        }

        #region Internal Helpers

        private static bool IsPathValid(PathControllerClass pathController)
        {
            return pathController != null &&
                   pathController.HavePath &&
                   pathController.CurPath != null &&
                   pathController.CurPath.Length > 0;
        }

        private static bool IsValid(Vector3 pt)
        {
            return !float.IsNaN(pt.x) && !float.IsNaN(pt.y) && !float.IsNaN(pt.z) &&
                   !float.IsInfinity(pt.x) && !float.IsInfinity(pt.y) && !float.IsInfinity(pt.z) &&
                   Mathf.Abs(pt.x) < 10000f && Mathf.Abs(pt.y) < 10000f && Mathf.Abs(pt.z) < 10000f;
        }

        #endregion
    }
}
