// <auto-generated>
//   AI-Refactored: BotNavHelper.cs (Supreme Overlay/Event-Only, Max-Realism, Full Introspection, June 2025)
//   Overlay/event-only: exposes EFT-internal nav/path state for overlays/intents. Never issues or modifies movement.
//   All outputs are overlays or pooled vectors only. Zero-allocation hot path, SPT/FIKA/headless parity, anti-stuck, MIT License.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;
    using BepInEx.Logging;
    using EFT.Interactive;

    /// <summary>
    /// Overlay/event-only: exposes all EFT bot navigation/path state for overlays/intents, anti-stuck, squad, and intent planners.
    /// Never issues movement or path changes. Bulletproof, pooled, SPT/FIKA/headless safe, real EFT-only.
    /// </summary>
    public static class BotNavHelper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #region EFT Path/Overlay Introspection

        /// <summary>
        /// Attempts to get the next valid path target for overlays (never sets position).
        /// </summary>
        public static bool TryGetSafeTarget(BotOwner bot, out Vector3 target)
        {
            target = Vector3.zero;
            if (!HasPath(bot)) return false;
            try
            {
                var pc = bot.Mover?._pathController;
                if (pc == null) return false;
                Vector3 pt = pc.LastTargetPoint(1.0f);
                if (IsValid(pt) && pt.y > -2.5f)
                {
                    target = pt;
                    return true;
                }
            }
            catch { }
            return false;
        }

        /// <summary>
        /// Gets all current path points for overlay logic (never sets position).
        /// </summary>
        public static Vector3[] GetCurrentPathPoints(BotOwner bot, int maxPoints = 16)
        {
            if (!HasPath(bot)) return null;
            try
            {
                var pc = bot.Mover?._pathController;
                if (pc == null) return null;
                Vector3[] points = pc.GetWayPoints(maxPoints);
                if (points == null || points.Length == 0) return null;
                for (int i = 0; i < points.Length; i++)
                    if (!IsValid(points[i]) || points[i].y < -2.5f)
                        return null;
                return points;
            }
            catch { return null; }
        }

        /// <summary>
        /// Gets the current (optionally jittered) path corner (overlay only).
        /// </summary>
        public static bool TryGetCurrentCorner(BotOwner bot, out Vector3 corner)
        {
            corner = Vector3.zero;
            if (!HasPath(bot)) return false;
            try
            {
                Vector3 c = bot.Mover.CurrentCornerPoint;
                if (!IsValid(c) || c.y < -2.5f) return false;
                const float jitter = 0.045f;
                corner = c + new Vector3(
                    UnityEngine.Random.Range(-jitter, jitter),
                    0f,
                    UnityEngine.Random.Range(-jitter, jitter)
                );
                return true;
            }
            catch { return false; }
        }

        /// <summary>
        /// Returns remaining path distance (never sets position, never alloc).
        /// </summary>
        public static float GetRemainingDistance(BotOwner bot)
        {
            try
            {
                return HasPath(bot) ? Mathf.Clamp(bot.Mover.DistDestination, 0f, 9999f) : float.MaxValue;
            }
            catch { return float.MaxValue; }
        }

        /// <summary>
        /// Returns current path segment index (for overlays/diagnostics), or -1 if unavailable.
        /// (Indexing is guarded due to PathControllerClass internals.)
        /// </summary>
        public static int GetCurrentPathIndex(BotOwner bot)
        {
            try
            {
                var pc = bot.Mover?._pathController;
                // PathControllerClass does NOT expose PathIndex directly in all builds; fallback to -1.
                if (pc != null && pc.CurPath != null && pc.HavePath)
                {
                    // (No direct public property for PathIndex; skip unless available.)
                }
            }
            catch { }
            return -1;
        }

        /// <summary>
        /// Returns total current path length (points), 0 if unavailable.
        /// </summary>
        public static int GetCurrentPathLength(BotOwner bot)
        {
            try
            {
                var pc = bot.Mover?._pathController;
                if (pc != null && pc.CurPath != null && pc.HavePath)
                    return pc.CurPath.Length;
            }
            catch { }
            return 0;
        }

        /// <summary>
        /// True if the point is on the current path segment (for overlays only).
        /// </summary>
        public static bool IsPointOnCurrentPath(BotOwner bot, Vector3 point, float maxDist)
        {
            return HasPath(bot) && bot.Mover.IsPointOnCurrentWay(point, maxDist);
        }

        /// <summary>
        /// True if bot has a valid, non-stale path.
        /// </summary>
        public static bool HasPath(BotOwner bot)
        {
            var mover = bot?.Mover;
            var pc = mover?._pathController;
            return mover != null && IsPathValid(pc);
        }

        /// <summary>
        /// Overlay nav state (never sets/changes nav, overlay-only).
        /// </summary>
        public static BotNavState GetNavState(BotOwner bot)
        {
            if (bot == null || bot.Mover == null) return BotNavState.Invalid;
            var pc = bot.Mover._pathController;
            if (!IsPathValid(pc)) return BotNavState.NoPath;
            if (IsAtDestination(bot)) return BotNavState.AtGoal;
            if (bot.Mover.Blocked) return BotNavState.Blocked;
            return BotNavState.Active;
        }

        /// <summary>
        /// True if bot is at destination (overlay check, never sets position).
        /// </summary>
        public static bool IsAtDestination(BotOwner bot)
        {
            if (!HasPath(bot)) return false;
            Vector3 dest = GetCurrentDestination(bot);
            return dest != Vector3.zero && Vector3.Distance(bot.Position, dest) < 1.05f;
        }

        /// <summary>
        /// Checks if current EFT path state is valid for overlay planning.
        /// </summary>
        public static bool IsPathValid(BotOwner bot)
        {
            return bot?.Mover != null && IsPathValid(bot.Mover._pathController);
        }

        /// <summary>
        /// Overlay-only: Checks if current PathControllerClass is valid (deeply defensive).
        /// </summary>
        private static bool IsPathValid(object pc)
        {
            // PathControllerClass type safety (can be obfuscated or internal type)
            if (pc == null) return false;
            // Safe dynamic property access:
            var curPathProp = pc.GetType().GetProperty("CurPath");
            var havePathProp = pc.GetType().GetProperty("HavePath");
            if (curPathProp == null || havePathProp == null) return false;
            var curPath = curPathProp.GetValue(pc) as System.Array;
            bool havePath = (bool)havePathProp.GetValue(pc);
            if (!havePath || curPath == null || curPath.Length == 0) return false;
            return true;
        }

        /// <summary>
        /// Returns current path destination (overlay-only).
        /// </summary>
        public static Vector3 GetCurrentDestination(BotOwner bot)
        {
            if (!HasPath(bot)) return Vector3.zero;
            try
            {
                var tp = bot.Mover.TargetPoint;
                Vector3 dest = tp.HasValue ? tp.Value : Vector3.zero;
                return (IsValid(dest) && dest.y > -2.5f) ? dest : Vector3.zero;
            }
            catch { return Vector3.zero; }
        }

        /// <summary>
        /// Returns normalized path direction (first two waypoints) or Vector3.zero.
        /// </summary>
        public static Vector3 GetCurrentPathDirection(BotOwner bot)
        {
            if (!HasPath(bot)) return Vector3.zero;
            var pts = GetCurrentPathPoints(bot, 2);
            if (pts == null || pts.Length < 2) return Vector3.zero;
            Vector3 dir = pts[1] - pts[0]; dir.y = 0f;
            return dir.sqrMagnitude > 0.001f ? dir.normalized : Vector3.zero;
        }

        /// <summary>
        /// Returns the normalized navmesh normal at bot's current position (useful for slope/collision overlays).
        /// </summary>
        public static Vector3 GetNavMeshNormal(BotOwner bot, float radius = 2.0f)
        {
            if (bot == null) return Vector3.up;
            if (NavMesh.SamplePosition(bot.Position, out NavMeshHit hit, radius, NavMesh.AllAreas))
                return hit.normal.normalized;
            return Vector3.up;
        }

        /// <summary>
        /// True if NavMesh position is walkable for bots (overlay-only).
        /// </summary>
        public static bool IsWalkable(Vector3 pos, float radius = 1.0f)
        {
            if (NavMesh.SamplePosition(pos, out NavMeshHit hit, radius, NavMesh.AllAreas))
                return (hit.mask & NavMesh.AllAreas) != 0 && IsValid(hit.position);
            return false;
        }

        /// <summary>
        /// Overlay: True if bot is near NavMesh edge (anti-stuck, cover overlays).
        /// </summary>
        public static bool IsNearNavMeshEdge(BotOwner bot, float threshold = 0.65f)
        {
            if (bot == null) return false;
            if (NavMesh.FindClosestEdge(bot.Position, out NavMeshHit hit, NavMesh.AllAreas))
                return hit.distance < threshold;
            return false;
        }

        /// <summary>
        /// Overlay: Returns the distance to the nearest NavMesh edge.
        /// </summary>
        public static float GetDistanceToNavMeshEdge(Vector3 pos, float searchRadius = 2.5f)
        {
            if (NavMesh.FindClosestEdge(pos, out NavMeshHit hit, NavMesh.AllAreas))
                return hit.distance;
            return float.MaxValue;
        }

        /// <summary>
        /// Overlay: Returns the NavMesh area mask at a position.
        /// </summary>
        public static int GetNavMeshAreaMask(Vector3 pos, float radius = 1.5f)
        {
            if (NavMesh.SamplePosition(pos, out NavMeshHit hit, radius, NavMesh.AllAreas))
                return hit.mask;
            return 0;
        }

        /// <summary>
        /// Overlay: Returns true if NavMesh position is flagged as "outdoor".
        /// </summary>
        public static bool IsNavMeshOutdoor(Vector3 pos, float radius = 1.5f)
        {
            int mask = GetNavMeshAreaMask(pos, radius);
            return (mask & (1 << 3)) != 0; // Adjust this index if your project's NavMesh uses different area indices.
        }

        // OffMeshLink info is not accessible via BotMover (no IsOnNavMeshLink), so no IsOnOffMeshLink provided.

        #endregion

        #region NavMesh/Overlay Sampling

        public static bool TryGetNavMeshSafePosition(Vector3 candidate, Vector3 origin, out Vector3 navSafe, float radius = 1.5f)
        {
            navSafe = candidate;
            if (NavMesh.SamplePosition(candidate, out NavMeshHit hit, radius, NavMesh.AllAreas))
            {
                navSafe = ClampY(hit.position, origin);
                return IsValid(navSafe);
            }
            navSafe = ClampY(candidate, origin);
            return IsValid(navSafe);
        }

        public static Vector3 GetNavMeshSafePosition(Vector3 candidate, Vector3 origin, float radius = 1.5f)
        {
            if (NavMesh.SamplePosition(candidate, out NavMeshHit hit, radius, NavMesh.AllAreas))
                return ClampY(hit.position, origin);
            return ClampY(origin, origin);
        }

        public static Vector3 ClampY(Vector3 v, Vector3 basePos)
        {
            if (Mathf.Abs(v.y - basePos.y) > 3f || v.y < -2.5f)
                v.y = basePos.y;
            return v;
        }

        public static bool IsValid(Vector3 pt)
        {
            return !float.IsNaN(pt.x) && !float.IsNaN(pt.y) && !float.IsNaN(pt.z) &&
                   !float.IsInfinity(pt.x) && !float.IsInfinity(pt.y) && !float.IsInfinity(pt.z) &&
                   Mathf.Abs(pt.x) < 10000f && Mathf.Abs(pt.y) < 10000f && Mathf.Abs(pt.z) < 10000f &&
                   pt != Vector3.zero;
        }

        #endregion

        #region Squad/Group Overlay Helpers

        public static Vector3 GetGroupFormationTarget(BotOwner self, BotOwner leader, float weight, float spacing)
        {
            if (self == null || leader == null)
                return Vector3.zero;

            Vector3 myPos = self.Position;
            Vector3 leaderPos = leader.Position;
            Vector3 dir = (myPos - leaderPos).normalized;
            if (dir == Vector3.zero)
                dir = UnityEngine.Random.onUnitSphere;

            float stagger = spacing * (1.0f + UnityEngine.Random.Range(-0.23f, 0.23f));
            Vector3 offset = dir * stagger;
            return Vector3.Lerp(myPos, leaderPos + offset, Mathf.Clamp01(weight));
        }

        public static bool IsBlockedByClosedDoor(Vector3 from, Vector3 to)
        {
            Vector3 dir = to - from;
            float dist = dir.magnitude;
            if (dist < 0.01f) return false;

            dir /= dist;
            int doorLayerMask = 1 << LayerMaskClass.DoorLayer;
            if (Physics.SphereCast(from + Vector3.up * 1.1f, 0.4f, dir, out RaycastHit hit, dist, doorLayerMask))
            {
                Door door = hit.collider.GetComponentInParent<Door>();
                if (door != null && door.enabled && door.Operatable)
                {
                    EDoorState state = door.DoorState;
                    if ((state & EDoorState.Open) == 0)
                        return true;
                }
            }
            return false;
        }

        public static bool IsNavMeshPositionValid(Vector3 pos)
        {
            return IsValid(pos) && pos.y > -2.5f;
        }

        #endregion

        #region Overlay Diagnostics/State

        public static float GetXZDistanceToGoal(BotOwner bot)
        {
            Vector3 goal = GetCurrentDestination(bot);
            Vector3 p = bot?.Position ?? Vector3.zero;
            Vector2 a = new Vector2(p.x, p.z);
            Vector2 b = new Vector2(goal.x, goal.z);
            return Vector2.Distance(a, b);
        }

        public static Vector3 GetOverlayWorldNormal(Vector3 pos)
        {
            if (NavMesh.SamplePosition(pos, out NavMeshHit hit, 1.2f, NavMesh.AllAreas))
                return hit.normal.normalized;
            return Vector3.up;
        }

        public static string GetNavStateString(BotOwner bot)
        {
            try
            {
                var nav = GetNavState(bot);
                var mover = bot?.Mover;
                var pc = mover?._pathController;
                return $"State:{nav} Path:{(pc != null && (bool)pc.GetType().GetProperty("HavePath")?.GetValue(pc) ? "Y" : "N")} Blocked:{(mover?.Blocked == true ? "Y" : "N")}";
            }
            catch { return "Invalid"; }
        }

        #endregion

        #region Internal Types

        public enum BotNavState
        {
            Invalid,
            NoPath,
            Active,
            Blocked,
            AtGoal
        }

        #endregion
    }
}
