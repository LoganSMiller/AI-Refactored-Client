// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Custom navpoint/caching logic fully removed. Pure Unity NavMesh warmup only.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Unity.AI.Navigation;
    using UnityEngine;

    /// <summary>
    /// Immediately builds Unity NavMesh surfaces once the map is known.
    /// Ensures NavMesh is flagged and safe before bot AI is initialized.
    /// All errors and state are strictly localized; never breaks outside navigation systems.
    /// </summary>
    public static class NavMeshWarmupManager
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _hasStarted;
        private static bool _isReady;

        #endregion

        #region Properties

        /// <summary>
        /// Gets a value indicating whether the NavMesh has been warmed up this raid.
        /// </summary>
        public static bool IsNavMeshReady => _hasStarted && _isReady;

        #endregion

        #region Public API

        /// <summary>
        /// Attempts to build the NavMesh after GameWorld is ready.
        /// Called from AIRefactoredController.OnRaidStarted ONLY.
        /// All errors are isolated—never break or cascade beyond navigation.
        /// </summary>
        public static void TryPrebuildNavMesh()
        {
            if (_hasStarted)
            {
                Logger.LogDebug("[NavMeshWarmupManager] Already started, skipping.");
                return;
            }

            if (!GameWorldHandler.IsHost)
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — not host.");
                return;
            }

            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — raid not started in headless mode.");
                return;
            }

            if (!GameWorldHandler.IsReady())
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — GameWorldHandler not ready.");
                return;
            }

            _hasStarted = true;
            _isReady = false;

            try
            {
                var surfaces = UnityEngine.Object.FindObjectsOfType<NavMeshSurface>();
                if (surfaces == null || surfaces.Length == 0)
                {
                    Logger.LogWarning("[NavMeshWarmupManager] No NavMeshSurface found in scene.");
                    return;
                }

                bool builtAny = false;
                for (int i = 0; i < surfaces.Length; i++)
                {
                    var surface = surfaces[i];
                    if (surface == null || !surface.enabled || !surface.gameObject.activeInHierarchy)
                        continue;

                    try
                    {
                        surface.BuildNavMesh();
                        builtAny = true;
                        Logger.LogDebug("[NavMeshWarmupManager] Built NavMeshSurface: " + surface.name);
                    }
                    catch (Exception navEx)
                    {
                        Logger.LogWarning("[NavMeshWarmupManager] NavMeshSurface build failed: " + navEx.Message);
                    }
                }

                if (!builtAny)
                {
                    Logger.LogWarning("[NavMeshWarmupManager] No valid NavMesh surfaces were built.");
                    return;
                }

                Logger.LogInfo("[NavMeshWarmupManager] ✅ NavMesh warmup complete.");
                _isReady = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[NavMeshWarmupManager] ❌ NavMesh build failed: " + ex);
            }
        }

        /// <summary>
        /// Resets NavMesh warmup status before each raid start.
        /// </summary>
        public static void Reset()
        {
            _hasStarted = false;
            _isReady = false;
        }

        #endregion
    }
}
