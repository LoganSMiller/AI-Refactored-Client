// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Automatically detects IZones and triggers NavPointRegistry refresh after bootstrap.
    /// Ensures zone tags are recovered even if IZones appears late or during world recovery.
    /// </summary>
    public static class ZoneAutoRefresher
    {
        private const float CheckInterval = 5.0f;

        private static bool _hasRefreshed;
        private static float _nextCheckTime;
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        /// <summary>
        /// Call every few seconds from a host-only tick to detect and apply late zone refresh.
        /// </summary>
        public static void Tick(float time)
        {
            if (_hasRefreshed || !GameWorldHandler.IsInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (time < _nextCheckTime)
            {
                return;
            }

            _nextCheckTime = time + CheckInterval;

            IZones? zones;
            if (!GameWorldHandler.TryGetIZones(out zones) || zones == null)
            {
                return;
            }

            // Log only when zones are refreshed, to minimize logging in normal operations
            if (!_hasRefreshed)
            {
                Logger.LogInfo("[ZoneAutoRefresher] Zones detected late — refreshing tags.");
            }

            NavPointRegistry.InitializeZoneSystem(zones);
            NavPointRegistry.RefreshZones();
            _hasRefreshed = true;
        }

        /// <summary>
        /// Resets the internal state, allowing refresh logic to re-trigger if needed.
        /// </summary>
        public static void Reset()
        {
            _hasRefreshed = false;
            _nextCheckTime = 0.0f;
        }
    }
}
