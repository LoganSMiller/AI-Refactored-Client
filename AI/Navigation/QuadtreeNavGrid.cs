// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Quadtree-based spatial index for NavPointData.
    /// Supports fast lookup with optional filtering by zone, elevation, and cover tag.
    /// </summary>
    public class QuadtreeNavGrid
    {
        private const int MaxDepth = 6;
        private const int MaxPointsPerNode = 8;

        private Node _root;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuadtreeNavGrid"/> class.
        /// </summary>
        public QuadtreeNavGrid(Vector2 center, float size)
        {
            float half = size * 0.5f;
            _root = new Node(new Rect(center.x - half, center.y - half, size, size), 0);
        }

        /// <summary>
        /// Clears all stored points and resets the root node.
        /// </summary>
        public void Clear()
        {
            _root = new Node(_root.Bounds, 0);
        }

        /// <summary>
        /// Inserts a <see cref="NavPointData"/> point into the quadtree.
        /// </summary>
        public void Insert(NavPointData point)
        {
            if (point == null)
            {
                return;
            }

            Insert(_root, point);
        }

        /// <summary>
        /// Inserts a raw world position (Vector3) into the quadtree.
        /// </summary>
        public void Insert(Vector3 point)
        {
            Insert(_root, point);
        }

        /// <summary>
        /// Performs a basic radius-based query on stored NavPointData.
        /// </summary>
        public List<NavPointData> Query(Vector3 position, float radius, Predicate<NavPointData>? filter = null)
        {
            List<NavPointData> result = new List<NavPointData>();
            Query(_root, position, radius * radius, result, filter);
            return result;
        }

        /// <summary>
        /// Performs compound queries against zone, elevation band, and cover tag.
        /// </summary>
        public List<NavPointData> QueryCombined(
            Vector3 position,
            float radius,
            string? zone = null,
            string? elevationBand = null,
            string? coverTag = null)
        {
            Predicate<NavPointData> filter = delegate (NavPointData p)
            {
                if (zone != null && !string.Equals(p.Zone, zone, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }

                if (elevationBand != null && !string.Equals(p.ElevationBand, elevationBand, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }

                if (coverTag != null && !string.Equals(p.Tag, coverTag, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }

                return true;
            };

            return Query(position, radius, filter);
        }

        /// <summary>
        /// Performs a raw spatial query for Vector3 positions.
        /// </summary>
        public List<Vector3> QueryRaw(Vector3 position, float radius, Predicate<Vector3>? filter = null)
        {
            List<Vector3> result = new List<Vector3>();
            QueryRaw(_root, position, radius * radius, result, filter);
            return result;
        }

        private void Insert(Node node, NavPointData point)
        {
            Vector2 pos2D = new Vector2(point.Position.x, point.Position.z);
            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.NavPoints.Add(point);

                if (node.NavPoints.Count > MaxPointsPerNode && node.Depth < MaxDepth)
                {
                    Subdivide(node);
                    ReinsertPoints(node);
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Insert(node.Children[i], point);
                }
            }
        }

        private void Insert(Node node, Vector3 point)
        {
            Vector2 pos2D = new Vector2(point.x, point.z);
            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.RawPoints.Add(point);

                if (node.RawPoints.Count > MaxPointsPerNode && node.Depth < MaxDepth)
                {
                    Subdivide(node);
                    ReinsertPoints(node);
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Insert(node.Children[i], point);
                }
            }
        }

        private void Query(
            Node node,
            Vector3 worldPos,
            float radiusSq,
            List<NavPointData> result,
            Predicate<NavPointData>? filter)
        {
            Vector2 pos2D = new Vector2(worldPos.x, worldPos.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect queryRect = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(queryRect))
            {
                return;
            }

            if (node.IsLeaf)
            {
                for (int i = 0; i < node.NavPoints.Count; i++)
                {
                    NavPointData point = node.NavPoints[i];
                    float distSq = (point.Position - worldPos).sqrMagnitude;

                    if (distSq <= radiusSq && (filter == null || filter(point)))
                    {
                        result.Add(point);
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Query(node.Children[i], worldPos, radiusSq, result, filter);
                }
            }
        }

        private void QueryRaw(
            Node node,
            Vector3 worldPos,
            float radiusSq,
            List<Vector3> result,
            Predicate<Vector3>? filter)
        {
            Vector2 pos2D = new Vector2(worldPos.x, worldPos.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect queryRect = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(queryRect))
            {
                return;
            }

            if (node.IsLeaf)
            {
                for (int i = 0; i < node.RawPoints.Count; i++)
                {
                    Vector3 point = node.RawPoints[i];
                    float distSq = (point - worldPos).sqrMagnitude;

                    if (distSq <= radiusSq && (filter == null || filter(point)))
                    {
                        result.Add(point);
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    QueryRaw(node.Children[i], worldPos, radiusSq, result, filter);
                }
            }
        }

        private void ReinsertPoints(Node node)
        {
            List<NavPointData> navCopy = node.NavPoints;
            node.NavPoints = new List<NavPointData>();

            for (int i = 0; i < navCopy.Count; i++)
            {
                for (int j = 0; j < node.Children.Length; j++)
                {
                    Insert(node.Children[j], navCopy[i]);
                }
            }

            List<Vector3> rawCopy = node.RawPoints;
            node.RawPoints = new List<Vector3>();

            for (int i = 0; i < rawCopy.Count; i++)
            {
                for (int j = 0; j < node.Children.Length; j++)
                {
                    Insert(node.Children[j], rawCopy[i]);
                }
            }
        }

        private void Subdivide(Node node)
        {
            Node[] children = new Node[4];

            float halfW = node.Bounds.width * 0.5f;
            float halfH = node.Bounds.height * 0.5f;
            float x = node.Bounds.x;
            float y = node.Bounds.y;
            int d = node.Depth + 1;

            children[0] = new Node(new Rect(x, y, halfW, halfH), d);                   // Bottom Left
            children[1] = new Node(new Rect(x + halfW, y, halfW, halfH), d);           // Bottom Right
            children[2] = new Node(new Rect(x, y + halfH, halfW, halfH), d);           // Top Left
            children[3] = new Node(new Rect(x + halfW, y + halfH, halfW, halfH), d);   // Top Right

            node.SetChildren(children);
        }

        /// <summary>
        /// Internal quadtree node used for spatial partitioning.
        /// </summary>
        private sealed class Node
        {
            public Node(Rect bounds, int depth)
            {
                this.Bounds = bounds;
                this.Depth = depth;
                this.NavPoints = new List<NavPointData>(MaxPointsPerNode);
                this.RawPoints = new List<Vector3>(MaxPointsPerNode);
                this.Children = Array.Empty<Node>();
            }

            public Rect Bounds { get; }

            public int Depth { get; }

            public List<NavPointData> NavPoints;

            public List<Vector3> RawPoints;

            public Node[] Children { get; private set; }

            public bool IsLeaf => this.Children.Length == 0;

            public void SetChildren(Node[] children)
            {
                this.Children = children ?? Array.Empty<Node>();
            }
        }
    }
}
