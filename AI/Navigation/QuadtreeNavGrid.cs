// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;

    /// <summary>
    /// Quadtree-based spatial index for NavPointData.
    /// Supports fast lookup with optional filtering by zone, elevation, and cover tag.
    /// </summary>
    public sealed class QuadtreeNavGrid
    {
        private const int MaxDepth = 6;
        private const int MaxPointsPerNode = 8;

        private Node _root;

        public QuadtreeNavGrid(Vector2 center, float size)
        {
            float half = size * 0.5f;
            Rect bounds = new Rect(center.x - half, center.y - half, size, size);
            _root = new Node(bounds, 0);
        }

        public void Clear()
        {
            _root = new Node(_root.Bounds, 0);
        }

        public void Insert(NavPointData point)
        {
            if (point == null) return;
            Insert(_root, point);
        }

        public void Insert(Vector3 point)
        {
            Insert(_root, point);
        }

        public List<NavPointData> Query(Vector3 position, float radius, Predicate<NavPointData> filter)
        {
            List<NavPointData> result = TempListPool.Rent<NavPointData>();
            float radiusSq = radius * radius;
            Query(_root, position, radiusSq, result, filter);
            return result;
        }

        public List<NavPointData> QueryCombined(Vector3 position, float radius, string zone, string elevationBand, string coverTag)
        {
            return Query(position, radius, delegate (NavPointData p)
            {
                if (!string.IsNullOrEmpty(zone) && !string.Equals(p.Zone, zone, StringComparison.OrdinalIgnoreCase)) return false;
                if (!string.IsNullOrEmpty(elevationBand) && !string.Equals(p.ElevationBand, elevationBand, StringComparison.OrdinalIgnoreCase)) return false;
                if (!string.IsNullOrEmpty(coverTag) && !string.Equals(p.Tag, coverTag, StringComparison.OrdinalIgnoreCase)) return false;
                return true;
            });
        }

        public List<Vector3> QueryRaw(Vector3 position, float radius, Predicate<Vector3> filter)
        {
            List<Vector3> result = TempListPool.Rent<Vector3>();
            float radiusSq = radius * radius;
            QueryRaw(_root, position, radiusSq, result, filter);
            return result;
        }

        private void Insert(Node node, NavPointData point)
        {
            Vector2 pos2D = new Vector2(point.Position.x, point.Position.z);
            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.NavPoints.Add(point);
                if (node.NavPoints.Count > MaxPointsPerNode && node.Depth < MaxDepth)
                {
                    Subdivide(node);
                    Reinsert(node);
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Insert(node.Children[i], point);
                }
            }
        }

        private void Insert(Node node, Vector3 point)
        {
            Vector2 pos2D = new Vector2(point.x, point.z);
            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.RawPoints.Add(point);
                if (node.RawPoints.Count > MaxPointsPerNode && node.Depth < MaxDepth)
                {
                    Subdivide(node);
                    Reinsert(node);
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Insert(node.Children[i], point);
                }
            }
        }

        private void Query(Node node, Vector3 position, float radiusSq, List<NavPointData> result, Predicate<NavPointData> filter)
        {
            Vector2 pos2D = new Vector2(position.x, position.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect rect = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(rect))
            {
                return;
            }

            if (node.IsLeaf)
            {
                for (int i = 0; i < node.NavPoints.Count; i++)
                {
                    NavPointData point = node.NavPoints[i];
                    if ((point.Position - position).sqrMagnitude <= radiusSq && (filter == null || filter(point)))
                    {
                        result.Add(point);
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    Query(node.Children[i], position, radiusSq, result, filter);
                }
            }
        }

        private void QueryRaw(Node node, Vector3 position, float radiusSq, List<Vector3> result, Predicate<Vector3> filter)
        {
            Vector2 pos2D = new Vector2(position.x, position.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect rect = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(rect))
            {
                return;
            }

            if (node.IsLeaf)
            {
                for (int i = 0; i < node.RawPoints.Count; i++)
                {
                    Vector3 point = node.RawPoints[i];
                    if ((point - position).sqrMagnitude <= radiusSq && (filter == null || filter(point)))
                    {
                        result.Add(point);
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    QueryRaw(node.Children[i], position, radiusSq, result, filter);
                }
            }
        }

        private void Subdivide(Node node)
        {
            float halfW = node.Bounds.width * 0.5f;
            float halfH = node.Bounds.height * 0.5f;
            float x = node.Bounds.x;
            float y = node.Bounds.y;
            int d = node.Depth + 1;

            node.Children = new[]
            {
                new Node(new Rect(x, y, halfW, halfH), d),
                new Node(new Rect(x + halfW, y, halfW, halfH), d),
                new Node(new Rect(x, y + halfH, halfW, halfH), d),
                new Node(new Rect(x + halfW, y + halfH, halfW, halfH), d)
            };
        }

        private void Reinsert(Node node)
        {
            List<NavPointData> nav = node.NavPoints;
            node.NavPoints = TempListPool.Rent<NavPointData>();
            for (int i = 0; i < nav.Count; i++)
            {
                for (int j = 0; j < node.Children.Length; j++)
                {
                    Insert(node.Children[j], nav[i]);
                }
            }

            List<Vector3> raw = node.RawPoints;
            node.RawPoints = TempListPool.Rent<Vector3>();
            for (int i = 0; i < raw.Count; i++)
            {
                for (int j = 0; j < node.Children.Length; j++)
                {
                    Insert(node.Children[j], raw[i]);
                }
            }
        }

        private sealed class Node
        {
            public Node(Rect bounds, int depth)
            {
                this.Bounds = bounds;
                this.Depth = depth;
                this.NavPoints = TempListPool.Rent<NavPointData>();
                this.RawPoints = TempListPool.Rent<Vector3>();
                this.Children = Array.Empty<Node>();
            }

            public Rect Bounds { get; }
            public int Depth { get; }
            public List<NavPointData> NavPoints;
            public List<Vector3> RawPoints;
            public Node[] Children;
            public bool IsLeaf => this.Children.Length == 0;
        }
    }
}
