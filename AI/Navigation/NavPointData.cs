// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using UnityEngine;

    /// <summary>
    /// Lightweight tactical navigation point metadata for fast lookup and AI decision-making.
    /// </summary>
    public sealed class NavPointData
    {
        #region Fields

        /// <summary>
        /// World position of the navigation point.
        /// </summary>
        public readonly Vector3 Position;

        /// <summary>
        /// Indicates if the point provides cover.
        /// </summary>
        public readonly bool IsCover;

        /// <summary>
        /// Navigation zone tag assigned to the point (e.g., Room, Street, etc.).
        /// </summary>
        public readonly string Tag;

        /// <summary>
        /// Vertical world elevation of the point.
        /// </summary>
        public readonly float Elevation;

        /// <summary>
        /// Indicates if the point is located indoors.
        /// </summary>
        public readonly bool IsIndoor;

        /// <summary>
        /// Indicates if the point is safe and jumpable for traversal.
        /// </summary>
        public readonly bool IsJumpable;

        /// <summary>
        /// Optimal cover angle relative to incoming threat direction.
        /// </summary>
        public readonly float CoverAngle;

        /// <summary>
        /// Name of the zone this point belongs to.
        /// </summary>
        public readonly string Zone;

        /// <summary>
        /// Elevation classification band (e.g., Low, Mid, High).
        /// </summary>
        public readonly string ElevationBand;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="NavPointData"/> class.
        /// </summary>
        /// <param name="position">World position of the navigation point.</param>
        /// <param name="isCover">Indicates if the point provides cover.</param>
        /// <param name="tag">Navigation zone tag assigned to the point.</param>
        /// <param name="elevation">Vertical elevation of the point.</param>
        /// <param name="isIndoor">Indicates if the point is located indoors.</param>
        /// <param name="isJumpable">Indicates if the point is jumpable.</param>
        /// <param name="coverAngle">Optimal cover angle relative to incoming threats.</param>
        /// <param name="zone">Zone name the point belongs to.</param>
        /// <param name="elevationBand">Elevation classification band (e.g., Low, Mid, High).</param>
        public NavPointData(
            Vector3 position,
            bool isCover,
            string tag,
            float elevation,
            bool isIndoor,
            bool isJumpable,
            float coverAngle,
            string zone,
            string elevationBand)
        {
            Position = position;
            IsCover = isCover;
            Tag = tag;
            Elevation = elevation;
            IsIndoor = isIndoor;
            IsJumpable = isJumpable;
            CoverAngle = coverAngle;
            Zone = zone;
            ElevationBand = elevationBand;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Calculates the squared distance to a target point for efficient proximity checks.
        /// </summary>
        /// <param name="point">Target world position.</param>
        /// <returns>Squared distance between this navigation point and the target.</returns>
        public float DistanceSqr(Vector3 point)
        {
            return (Position - point).sqrMagnitude;
        }

        #endregion
    }
}
