// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Immutable tactical navigation point used by AIRefactored for pathfinding, cover, and zone awareness.
    /// Fully precomputed for ultra-fast lookup and zero allocations.
    /// </summary>
    public sealed class NavPointData
    {
        #region Fields

        /// <summary>World-space position of the navigation point.</summary>
        public readonly Vector3 Position;

        /// <summary>True if this point offers any kind of cover (prone, low, standing).</summary>
        public readonly bool IsCover;

        /// <summary>Short tag classifying the point (e.g. Room, Street, Roof).</summary>
        public readonly string Tag;

        /// <summary>Y-axis elevation of the point for band classification.</summary>
        public readonly float Elevation;

        /// <summary>True if point is marked as being indoors.</summary>
        public readonly bool IsIndoor;

        /// <summary>True if this point is safe and reachable via jump movement.</summary>
        public readonly bool IsJumpable;

        /// <summary>Precomputed cover angle used for AI scoring vs threats.</summary>
        public readonly float CoverAngle;

        /// <summary>Zone name or spatial label associated with this point.</summary>
        public readonly string Zone;

        /// <summary>Elevation band name (Low, Mid, High) for tactical posture logic.</summary>
        public readonly string ElevationBand;

        #endregion

        #region Constructor

        /// <summary>
        /// Constructs a fully resolved <see cref="NavPointData"/> with all tactical metadata.
        /// </summary>
        public NavPointData(
            Vector3 position,
            bool isCover,
            string tag,
            float elevation,
            bool isIndoor,
            bool isJumpable,
            float coverAngle,
            string zone,
            string elevationBand)
        {
            if (tag == null)
            {
                throw new ArgumentNullException(nameof(tag), "NavPointData constructor: tag must not be null.");
            }

            if (zone == null)
            {
                throw new ArgumentNullException(nameof(zone), "NavPointData constructor: zone must not be null.");
            }

            if (elevationBand == null)
            {
                throw new ArgumentNullException(nameof(elevationBand), "NavPointData constructor: elevationBand must not be null.");
            }

            this.Position = position;
            this.IsCover = isCover;
            this.Tag = tag;
            this.Elevation = elevation;
            this.IsIndoor = isIndoor;
            this.IsJumpable = isJumpable;
            this.CoverAngle = coverAngle;
            this.Zone = zone;
            this.ElevationBand = elevationBand;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Returns squared distance between this nav point and a given world position.
        /// Used to avoid Vector3.Distance overhead during proximity checks.
        /// </summary>
        public float DistanceSqr(Vector3 other)
        {
            float dx = this.Position.x - other.x;
            float dy = this.Position.y - other.y;
            float dz = this.Position.z - other.z;
            return (dx * dx) + (dy * dy) + (dz * dz);
        }

        /// <summary>
        /// String summary of this navigation point for debugging and tooltips.
        /// </summary>
        public override string ToString()
        {
            return string.Concat(
                "[", this.Tag, "] ",
                this.Position.ToString(),
                " | Cover=", this.IsCover ? "Y" : "N",
                " Jump=", this.IsJumpable ? "Y" : "N",
                " Indoor=", this.IsIndoor ? "Y" : "N",
                " Zone=", this.Zone,
                " ElevBand=", this.ElevationBand);
        }

        #endregion
    }
}
