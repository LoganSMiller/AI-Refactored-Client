// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using UnityEngine;

    /// <summary>
    /// Lightweight tactical navigation point metadata for fast lookup and AI decision-making.
    /// </summary>
    public sealed class NavPointData
    {
        #region Fields

        /// <summary>World position of the navigation point.</summary>
        public readonly Vector3 Position;

        /// <summary>Indicates if the point provides cover.</summary>
        public readonly bool IsCover;

        /// <summary>Navigation zone tag assigned to the point (e.g., Room, Street, etc.).</summary>
        public readonly string Tag;

        /// <summary>Vertical world elevation of the point.</summary>
        public readonly float Elevation;

        /// <summary>Indicates if the point is located indoors.</summary>
        public readonly bool IsIndoor;

        /// <summary>Indicates if the point is safe and jumpable for traversal.</summary>
        public readonly bool IsJumpable;

        /// <summary>Optimal cover angle relative to incoming threat direction.</summary>
        public readonly float CoverAngle;

        /// <summary>Name of the zone this point belongs to.</summary>
        public readonly string Zone;

        /// <summary>Elevation classification band (e.g., Low, Mid, High).</summary>
        public readonly string ElevationBand;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="NavPointData"/> class.
        /// </summary>
        public NavPointData(
            Vector3 position,
            bool isCover,
            string tag,
            float elevation,
            bool isIndoor,
            bool isJumpable,
            float coverAngle,
            string zone,
            string elevationBand)
        {
            this.Position = position;
            this.IsCover = isCover;
            this.Tag = tag;
            this.Elevation = elevation;
            this.IsIndoor = isIndoor;
            this.IsJumpable = isJumpable;
            this.CoverAngle = coverAngle;
            this.Zone = zone;
            this.ElevationBand = elevationBand;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Calculates the squared distance to a target point for efficient proximity checks.
        /// </summary>
        public float DistanceSqr(Vector3 target)
        {
            return (this.Position - target).sqrMagnitude;
        }

        /// <summary>
        /// Returns a short description of this point for debugging.
        /// </summary>
        public override string ToString()
        {
            return $"[{this.Tag}] {this.Position} | Cover={this.IsCover} Jump={this.IsJumpable} Indoor={this.IsIndoor} Zone={this.Zone}";
        }

        #endregion
    }
}
