// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Central registry for tactical navigation points with metadata.
    /// Supports cover tagging, elevation bands, indoor/outdoor classification, zone detection,
    /// jumpability flags, cover orientation, and fast quadtree spatial indexing.
    /// </summary>
    public static class NavPointRegistry
    {
        #region Fields

        private static readonly List<NavPoint> _points = new List<NavPoint>(512);
        private static readonly HashSet<Vector3> _unique = new HashSet<Vector3>();
        private static QuadtreeNavGrid? _quadtree;
        private static bool _useQuadtree;
        private static IZones? _zones;

        #endregion

        #region Properties

        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        /// <summary>
        /// Gets the number of registered navigation points.
        /// </summary>
        public static int Count => _points.Count;

        #endregion

        #region Public API

        public static void Clear()
        {
            _points.Clear();
            _unique.Clear();
            _quadtree = null;
        }

        public static void EnableSpatialIndexing(bool enable)
        {
            _useQuadtree = enable;

            if (enable)
            {
                InitializeSpatialIndex();
            }
            else
            {
                _quadtree = null;
            }
        }

        public static List<Vector3> GetAllPositions()
        {
            List<Vector3> result = new List<Vector3>(_points.Count);

            for (int i = 0; i < _points.Count; i++)
            {
                result.Add(_points[i].WorldPos);
            }

            return result;
        }

        public static float GetCoverAngle(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.CoverAngle;
            }

            return 0f;
        }

        public static float GetElevation(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.Elevation;
            }

            return 0f;
        }

        public static string? GetElevationBand(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.ElevationBand;
            }

            return null;
        }

        public static string? GetTag(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.Tag;
            }

            return null;
        }

        public static string? GetZone(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.Zone;
            }

            return null;
        }


        public static void InitializeSpatialIndex()
        {
            if (!_useQuadtree || _points.Count == 0)
            {
                return;
            }

            float minX = float.MaxValue, maxX = float.MinValue;
            float minZ = float.MaxValue, maxZ = float.MinValue;

            for (int i = 0; i < _points.Count; i++)
            {
                Vector3 pos = _points[i].WorldPos;
                minX = Mathf.Min(minX, pos.x);
                maxX = Mathf.Max(maxX, pos.x);
                minZ = Mathf.Min(minZ, pos.z);
                maxZ = Mathf.Max(maxZ, pos.z);
            }

            const float padding = 10f;
            Vector2 center = new Vector2((minX + maxX) * 0.5f, (minZ + maxZ) * 0.5f);
            float size = Mathf.Max(maxX - minX, maxZ - minZ) + (padding * 2f);

            _quadtree = new QuadtreeNavGrid(center, size);

            for (int i = 0; i < _points.Count; i++)
            {
                _quadtree.Insert(_points[i].WorldPos);
            }

            Logger?.LogInfo($"[NavPointRegistry] Built quadtree for {Count} nav points. Size: {size:F1} at {center}");
        }

        public static void InitializeZoneSystem(IZones zones)
        {
            _zones = zones;
        }

        public static bool IsCoverPoint(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.IsCover;
            }

            return false;
        }

        public static bool IsIndoor(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.IsIndoor;
            }

            return false;
        }

        public static bool IsJumpable(Vector3 pos)
        {
            NavPoint? point;
            if (TryGetPoint(pos, out point) && point != null)
            {
                return point.IsJumpable;
            }

            return false;
        }

        public static bool IsRegistered(Vector3 pos)
        {
            return _unique.Contains(pos);
        }

        public static List<Vector3> QueryNearby(
            Vector3 origin,
            float radius,
            Predicate<Vector3>? filter = null,
            bool coverOnly = false)
        {
            List<Vector3> result = new List<Vector3>(16);
            float radiusSq = radius * radius;

            if (_useQuadtree && _quadtree != null)
            {
                List<Vector3> raw = _quadtree.QueryRaw(origin, radius, filter);

                for (int i = 0; i < raw.Count; i++)
                {
                    Vector3 pos = raw[i];

                    NavPoint? nav;
                    if (TryGetPoint(pos, out nav) && nav != null)
                    {
                        if (!coverOnly || nav.IsCover)
                        {
                            result.Add(pos);
                        }
                    }
                }

                return result;
            }

            for (int i = 0; i < _points.Count; i++)
            {
                NavPoint p = _points[i];

                if ((p.WorldPos - origin).sqrMagnitude > radiusSq)
                {
                    continue;
                }

                if (coverOnly && !p.IsCover)
                {
                    continue;
                }

                if (filter == null || filter(p.WorldPos))
                {
                    result.Add(p.WorldPos);
                }
            }

            return result;
        }

        public static List<NavPointData> QueryNearby(
            Vector3 origin,
            float radius,
            Predicate<NavPointData>? filter = null)
        {
            List<NavPointData> result = new List<NavPointData>(16);
            float radiusSq = radius * radius;

            for (int i = 0; i < _points.Count; i++)
            {
                NavPoint p = _points[i];

                if ((p.WorldPos - origin).sqrMagnitude > radiusSq)
                {
                    continue;
                }

                NavPointData data = new NavPointData(
                    p.WorldPos,
                    p.IsCover,
                    p.Tag,
                    p.Elevation,
                    p.IsIndoor,
                    p.IsJumpable,
                    p.CoverAngle,
                    p.Zone,
                    p.ElevationBand);

                if (filter == null || filter(data))
                {
                    result.Add(data);
                }
            }

            return result;
        }

        public static void Register(
            Vector3 pos,
            bool isCover = false,
            string tag = "generic",
            float elevation = 0f,
            bool isIndoor = false,
            bool isJumpable = false,
            float coverAngle = 0f)
        {
            if (_unique.Contains(pos))
            {
                return;
            }

            string zoneName = GetNearestZone(pos);
            string elevationBand = GetElevationBand(elevation);

            NavPoint point = new NavPoint(
                pos,
                isCover,
                tag,
                elevation,
                isIndoor,
                isJumpable,
                coverAngle,
                zoneName,
                elevationBand);

            _points.Add(point);
            _unique.Add(pos);

            if (_useQuadtree && _quadtree != null)
            {
                _quadtree.Insert(pos);
            }
        }

        #endregion

        #region Private Helpers

        private static string GetElevationBand(float elevation)
        {
            if (elevation < 2f)
            {
                return "Low";
            }

            if (elevation < 7f)
            {
                return "Mid";
            }

            return "High";
        }

        private static string GetNearestZone(Vector3 pos)
        {
            if (_zones == null)
            {
                return "Unknown";
            }

            string result = "Unknown";
            float bestDist = float.MaxValue;

            foreach (string zone in _zones.ZoneNames())
            {
                ISpawnPoint[] spawns = _zones.ZoneSpawnPoints(zone);

                for (int i = 0; i < spawns.Length; i++)
                {
                    float dist = Vector3.Distance(pos, spawns[i].Position);

                    if (dist < bestDist)
                    {
                        bestDist = dist;
                        result = zone;
                    }
                }
            }

            return result;
        }

        private static bool TryGetPoint(Vector3 pos, out NavPoint? point)
        {
            for (int i = 0; i < _points.Count; i++)
            {
                if (_points[i].WorldPos == pos)
                {
                    point = _points[i];
                    return true;
                }
            }

            point = null;
            return false;
        }

        #endregion

        #region Private Types

        private sealed class NavPoint
        {
            public NavPoint(
                Vector3 pos,
                bool isCover,
                string tag,
                float elevation,
                bool isIndoor,
                bool isJumpable,
                float coverAngle,
                string zone,
                string elevationBand)
            {
                WorldPos = pos;
                IsCover = isCover;
                Tag = tag;
                Elevation = elevation;
                IsIndoor = isIndoor;
                IsJumpable = isJumpable;
                CoverAngle = coverAngle;
                Zone = zone;
                ElevationBand = elevationBand;
            }

            public Vector3 WorldPos { get; }
            public bool IsCover { get; }
            public string Tag { get; }
            public float Elevation { get; }
            public bool IsIndoor { get; }
            public bool IsJumpable { get; }
            public float CoverAngle { get; }
            public string Zone { get; }
            public string ElevationBand { get; }
        }

        #endregion
    }
}
