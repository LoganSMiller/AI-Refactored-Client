// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Game.Spawning;
    using Unity.AI.Navigation;
    using UnityEngine;

    /// <summary>
    /// Central registry for tactical navigation points with metadata.
    /// Supports cover tagging, elevation bands, indoor/outdoor classification, zone detection,
    /// jumpability flags, cover orientation, and fast quadtree spatial indexing.
    /// </summary>
    public static class NavPointRegistry
    {
        #region Fields

        private static readonly List<NavPoint> Points = new List<NavPoint>(512);
        private static readonly HashSet<Vector3> Unique = new HashSet<Vector3>();
        private static QuadtreeNavGrid? _quadtree;
        private static IZones? _zones;
        private static bool _useQuadtree;

        #endregion

        #region Properties

        private static ManualLogSource Logger => AIRefactoredController.Logger;
        public static int Count => Points.Count;

        #endregion

        #region Public API

        public static void Clear()
        {
            Points.Clear();
            Unique.Clear();
            _quadtree = null;
        }

        public static void EnableSpatialIndexing(bool enable)
        {
            _useQuadtree = enable;
            _quadtree = enable ? BuildQuadtree() : null;
        }

        public static void InitializeZoneSystem(IZones zones)
        {
            _zones = zones;
        }

        public static void Register(
            Vector3 pos,
            bool isCover = false,
            string tag = "generic",
            float elevation = 0f,
            bool isIndoor = false,
            bool isJumpable = false,
            float coverAngle = 0f)
        {
            if (!Unique.Add(pos))
            {
                return;
            }

            string zoneName = GetNearestZone(pos);
            string elevationBand = GetElevationBand(elevation);

            NavPoint point = new NavPoint(
                pos,
                isCover,
                tag,
                elevation,
                isIndoor,
                isJumpable,
                coverAngle,
                zoneName,
                elevationBand);

            Points.Add(point);

            if (_useQuadtree && _quadtree != null)
            {
                _quadtree.Insert(pos);
            }
        }

        public static void RegisterAll(string mapId)
        {
            Clear();

            Logger.LogInfo("[NavPointRegistry] Registering nav points for map: " + mapId);

            NavMeshSurface surface = GameObject.FindObjectOfType<NavMeshSurface>();
            if (surface == null)
            {
                Logger.LogWarning("[NavPointRegistry] No NavMeshSurface found.");
                return;
            }

            if (_zones == null)
            {
                Logger.LogWarning("[NavPointRegistry] IZones system not yet assigned — zone tagging disabled.");
            }

            NavPointBootstrapper.RegisterAll(mapId);
        }

        public static void RefreshZones()
        {
            if (_zones == null || Points.Count == 0)
            {
                Logger.LogWarning("[NavPointRegistry] Cannot refresh zones — IZones unavailable or no points registered.");
                return;
            }

            for (int i = 0; i < Points.Count; i++)
            {
                NavPoint point = Points[i];
                string newZone = GetNearestZone(point.WorldPos);

                if (!string.Equals(newZone, point.Zone, StringComparison.OrdinalIgnoreCase))
                {
                    Points[i] = new NavPoint(
                        point.WorldPos,
                        point.IsCover,
                        point.Tag,
                        point.Elevation,
                        point.IsIndoor,
                        point.IsJumpable,
                        point.CoverAngle,
                        newZone,
                        point.ElevationBand);
                }
            }

            Logger.LogInfo("[NavPointRegistry] Zone tags refreshed.");
        }

        public static void RefreshPointsAround(Vector3 center, float radius)
        {
            float radiusSq = radius * radius;

            for (int i = 0; i < Points.Count; i++)
            {
                NavPoint point = Points[i];
                if ((point.WorldPos - center).sqrMagnitude > radiusSq)
                {
                    continue;
                }

                string newZone = GetNearestZone(point.WorldPos);
                string band = GetElevationBand(point.Elevation);
                bool isIndoor = Physics.Raycast(point.WorldPos + Vector3.up * 1.4f, Vector3.up, 12.0f);

                Points[i] = new NavPoint(
                    point.WorldPos,
                    point.IsCover,
                    point.Tag,
                    point.Elevation,
                    isIndoor,
                    point.IsJumpable,
                    point.CoverAngle,
                    newZone,
                    band);
            }

            Logger.LogInfo("[NavPointRegistry] Refreshed nav points near: " + center.ToString("F1"));
        }

        public static bool IsRegistered(Vector3 pos) => Unique.Contains(pos);
        public static bool IsCoverPoint(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) && p?.IsCover == true;
        public static bool IsIndoor(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) && p?.IsIndoor == true;
        public static bool IsJumpable(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) && p?.IsJumpable == true;
        public static float GetCoverAngle(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) ? p?.CoverAngle ?? 0f : 0f;
        public static float GetElevation(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) ? p?.Elevation ?? 0f : 0f;
        public static string GetTag(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) ? p?.Tag ?? "untagged" : "untagged";
        public static string GetZone(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) ? p?.Zone ?? "unassigned" : "unassigned";
        public static string GetElevationBand(Vector3 pos) => TryGetPoint(pos, out NavPoint? p) ? p?.ElevationBand ?? "unknown" : "unknown";

        public static List<Vector3> GetAllPositions()
        {
            List<Vector3> result = new List<Vector3>(Points.Count);
            for (int i = 0; i < Points.Count; i++)
            {
                result.Add(Points[i].WorldPos);
            }

            return result;
        }

        public static List<Vector3> QueryNearby(Vector3 origin, float radius, Predicate<Vector3>? filter = null, bool coverOnly = false)
        {
            List<Vector3> result = new List<Vector3>(16);
            float radiusSq = radius * radius;

            if (_useQuadtree && _quadtree != null)
            {
                List<Vector3> raw = _quadtree.QueryRaw(origin, radius, filter);
                for (int i = 0; i < raw.Count; i++)
                {
                    if (TryGetPoint(raw[i], out NavPoint? nav) && (!coverOnly || (nav?.IsCover ?? false)))
                    {
                        result.Add(raw[i]);
                    }
                }

                return result;
            }

            for (int i = 0; i < Points.Count; i++)
            {
                NavPoint p = Points[i];
                if ((p.WorldPos - origin).sqrMagnitude > radiusSq || (coverOnly && !p.IsCover))
                {
                    continue;
                }

                if (filter == null || filter(p.WorldPos))
                {
                    result.Add(p.WorldPos);
                }
            }

            return result;
        }

        public static List<NavPointData> QueryNearby(Vector3 origin, float radius, Predicate<NavPointData>? filter = null)
        {
            List<NavPointData> result = new List<NavPointData>(16);
            float radiusSq = radius * radius;

            for (int i = 0; i < Points.Count; i++)
            {
                NavPoint p = Points[i];
                if ((p.WorldPos - origin).sqrMagnitude > radiusSq)
                {
                    continue;
                }

                NavPointData data = new NavPointData(
                    p.WorldPos,
                    p.IsCover,
                    p.Tag,
                    p.Elevation,
                    p.IsIndoor,
                    p.IsJumpable,
                    p.CoverAngle,
                    p.Zone,
                    p.ElevationBand);

                if (filter == null || filter(data))
                {
                    result.Add(data);
                }
            }

            return result;
        }

        #endregion

        #region Internal Helpers

        private static bool TryGetPoint(Vector3 pos, out NavPoint? point)
        {
            for (int i = 0; i < Points.Count; i++)
            {
                if (Points[i].WorldPos == pos)
                {
                    point = Points[i];
                    return true;
                }
            }

            point = null;
            return false;
        }

        private static string GetNearestZone(Vector3 pos)
        {
            if (_zones == null)
            {
                return "Unknown";
            }

            string best = "Unknown";
            float bestDist = float.MaxValue;

            foreach (string zone in _zones.ZoneNames())
            {
                ISpawnPoint[] spawns = _zones.ZoneSpawnPoints(zone);
                for (int i = 0; i < spawns.Length; i++)
                {
                    float dist = Vector3.Distance(pos, spawns[i].Position);
                    if (dist < bestDist)
                    {
                        bestDist = dist;
                        best = zone;
                    }
                }
            }

            return best;
        }

        private static string GetElevationBand(float elevation)
        {
            if (elevation < 2f)
            {
                return "Low";
            }

            if (elevation < 7f)
            {
                return "Mid";
            }

            return "High";
        }

        private static QuadtreeNavGrid? BuildQuadtree()
        {
            if (Points.Count == 0)
            {
                return null;
            }

            float minX = float.MaxValue, maxX = float.MinValue;
            float minZ = float.MaxValue, maxZ = float.MinValue;

            for (int i = 0; i < Points.Count; i++)
            {
                Vector3 pos = Points[i].WorldPos;
                minX = Mathf.Min(minX, pos.x);
                maxX = Mathf.Max(maxX, pos.x);
                minZ = Mathf.Min(minZ, pos.z);
                maxZ = Mathf.Max(maxZ, pos.z);
            }

            Vector2 center = new Vector2((minX + maxX) * 0.5f, (minZ + maxZ) * 0.5f);
            float size = Mathf.Max(maxX - minX, maxZ - minZ) + 20f;

            QuadtreeNavGrid tree = new QuadtreeNavGrid(center, size);

            for (int i = 0; i < Points.Count; i++)
            {
                tree.Insert(Points[i].WorldPos);
            }

            Logger.LogInfo("[NavPointRegistry] Quadtree built for " + Points.Count + " points.");
            return tree;
        }

        #endregion

        #region Types

        private sealed class NavPoint
        {
            public NavPoint(Vector3 pos, bool isCover, string tag, float elevation, bool isIndoor, bool isJumpable, float coverAngle, string zone, string elevationBand)
            {
                this.WorldPos = pos;
                this.IsCover = isCover;
                this.Tag = tag;
                this.Elevation = elevation;
                this.IsIndoor = isIndoor;
                this.IsJumpable = isJumpable;
                this.CoverAngle = coverAngle;
                this.Zone = zone;
                this.ElevationBand = elevationBand;
            }

            public Vector3 WorldPos { get; }
            public bool IsCover { get; }
            public string Tag { get; }
            public float Elevation { get; }
            public bool IsIndoor { get; }
            public bool IsJumpable { get; }
            public float CoverAngle { get; }
            public string Zone { get; }
            public string ElevationBand { get; }
        }

        #endregion
    }
}
