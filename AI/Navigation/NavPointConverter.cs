// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Converts EFT internal navigation metadata into AIRefactored tactical format.
    /// </summary>
    public static class NavPointConverter
    {
        #region Constants

        private const float LowBandMax = 3f;
        private const float HighBandMin = 14f;
        private const float WallVectorMinSqr = 0.001f;

        #endregion

        #region Public Methods

        /// <summary>
        /// Converts a <see cref="CustomNavigationPoint"/> into a standardized <see cref="NavPointData"/> format.
        /// </summary>
        /// <param name="custom">The original EFT navigation point (must be non-null).</param>
        /// <returns>Converted <see cref="NavPointData"/> for AI tactical use.</returns>
        public static NavPointData FromCustom(CustomNavigationPoint custom)
        {
            // Enforce hard null safety
            if (ReferenceEquals(custom, null))
            {
                throw new System.ArgumentException("[NavPointConverter] CustomNavigationPoint was null.");
            }

            Vector3 position = custom.Position;
            float elevation = position.y;

            bool isCover =
                custom.CoverLevel == CoverLevel.Stay ||
                custom.CoverLevel == CoverLevel.Sit ||
                custom.CoverLevel == CoverLevel.Lay;

            float coverAngle = 0f;
            Vector3 toWall = custom.ToWallVector;
            if (toWall.sqrMagnitude > WallVectorMinSqr)
            {
                coverAngle = Vector3.Angle(toWall.normalized, Vector3.forward);
            }

            return new NavPointData(
                position,
                isCover,
                "EFT",
                elevation,
                custom.IsGoodInsideBuilding,
                true, // Always treat CustomNavigationPoints as jump-safe
                coverAngle,
                "Unassigned",
                ResolveElevationBand(elevation));
        }

        #endregion

        #region Private Methods

        private static string ResolveElevationBand(float elevation)
        {
            if (elevation < LowBandMax)
            {
                return "Low";
            }

            if (elevation > HighBandMin)
            {
                return "High";
            }

            return "Mid";
        }

        #endregion
    }
}
