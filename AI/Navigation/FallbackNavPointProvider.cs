// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Provides fallback nav points if NavPointRegistry is unavailable or empty.
    /// Useful for custom maps, corrupt navmesh, or minimal spawn recovery.
    /// </summary>
    public static class FallbackNavPointProvider
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static readonly Vector3[] StaticFallbackOffsets = new Vector3[]
        {
            new Vector3(5f, 0f, 5f),
            new Vector3(-5f, 0f, -5f),
            new Vector3(10f, 0f, -10f),
            new Vector3(-10f, 0f, 10f),
            new Vector3(0f, 0f, 15f),
        };

        #endregion

        #region Public API

        /// <summary>
        /// Returns a fallback nav point offset from a base position.
        /// </summary>
        /// <param name="fromPosition">World-space position to base fallback from.</param>
        /// <returns>Offset fallback point, or Vector3.zero if input is invalid.</returns>
        public static Vector3 GetSafePoint(Vector3 fromPosition)
        {
            if (!IsValid(fromPosition))
            {
                Logger.LogWarning("[FallbackNavPointProvider] Invalid origin passed to GetSafePoint.");
                return Vector3.zero;
            }

            int index = Random.Range(0, StaticFallbackOffsets.Length);
            Vector3 fallback = fromPosition + StaticFallbackOffsets[index];

            Logger.LogWarning("[FallbackNavPointProvider] Generated fallback at: " + fallback.ToString("F1"));
            return fallback;
        }

        /// <summary>
        /// Returns a static global fallback nav point near map origin.
        /// </summary>
        public static Vector3 GetSafeWorldPoint()
        {
            Vector3 fallback = new Vector3(5f, 0f, 5f);
            Logger.LogWarning("[FallbackNavPointProvider] Global fallback used: " + fallback.ToString("F1"));
            return fallback;
        }

        #endregion

        #region Private Helpers

        private static bool IsValid(Vector3 pos)
        {
            return pos != Vector3.zero &&
                !float.IsNaN(pos.x) &&
                !float.IsNaN(pos.y) &&
                !float.IsNaN(pos.z);
        }

        #endregion
    }
}
