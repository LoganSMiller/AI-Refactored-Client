// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Navigation validation uses only EFT internal pathing; never custom nav fallback.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Validates bot navigation state at runtime.
    /// All logic uses only EFT's internal navigation via BotMover and PathControllerClass.
    /// If navigation is invalid, lets vanilla EFT logic handle fallback.
    /// Bulletproof: Locally isolated and never breaks stack.
    /// </summary>
    public static class BotNavValidator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private const float LogCooldown = 2.0f;
        private static float _lastLogTime;

        #endregion

        #region Public API

        /// <summary>
        /// Validates whether the bot has a valid internal navigation state.
        /// Returns true if navigation is valid; false if vanilla EFT logic should take over.
        /// </summary>
        public static bool Validate(BotOwner botOwner, string context)
        {
            try
            {
                if (botOwner == null)
                {
                    TryLogOnce("[BotNavValidator] ❌ Null BotOwner in context: " + context);
                    return false;
                }

                if (botOwner.Transform == null || botOwner.GetPlayer == null || botOwner.IsDead)
                {
                    TryLogOnce("[BotNavValidator] ❌ Invalid bot state — dead or missing transform — context: " + context);
                    return false;
                }

                Vector3 position = botOwner.Position;
                if (!IsValidPosition(position))
                {
                    TryLogOnce("[BotNavValidator] ❌ Bot has invalid position — context: " + context);
                    return false;
                }

                if (botOwner.Mover == null)
                {
                    TryLogOnce("[BotNavValidator] ❌ BotOwner has no Mover — context: " + context);
                    return false;
                }

                var pathController = botOwner.Mover._pathController;
                if (!IsPathValid(pathController))
                {
                    TryLogOnce("[BotNavValidator] ❌ No valid internal path — context: " + context);
                    return false;
                }

                Vector3 target = pathController.LastTargetPoint(1.0f);
                if (!IsValidPosition(target) || target == Vector3.zero)
                {
                    TryLogOnce("[BotNavValidator] ❌ PathController target is invalid — context: " + context);
                    return false;
                }

                // Navigation is valid and up, let movement logic proceed
                return true;
            }
            catch
            {
                // Bulletproof: locally isolated, never propagates failure.
                return false;
            }
        }

        #endregion

        #region Helpers

        private static bool IsValidPosition(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        private static bool IsPathValid(PathControllerClass pathController)
        {
            return pathController != null &&
                   pathController.HavePath &&
                   pathController.CurPath != null &&
                   pathController.CurPath.Length > 0;
        }

        private static void TryLogOnce(string msg)
        {
            try
            {
                float now = Time.time;
                if (now - _lastLogTime > LogCooldown)
                {
                    Logger.LogWarning(msg);
                    _lastLogTime = now;
                }
            }
            catch
            {
                // Never allow log failure to break anything.
            }
        }

        #endregion
    }
}
