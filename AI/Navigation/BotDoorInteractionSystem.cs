// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Handles door interactions for bots using fallback-agnostic, deadlock-free logic.
    /// Replaces EFT.BotDoorInteraction with fully AIRefactored logic.
    /// </summary>
    public sealed class BotDoorInteractionSystem
    {
        private const float DoorRetryCooldown = 2.5f;
        private const float InteractionDistance = 2.0f;
        private const float DoorCheckInterval = 0.4f;

        private readonly BotOwner _bot;
        private readonly ManualLogSource _log;

        private float _lastDoorCheckTime;
        private float _nextRetryTime;
        private Door _currentDoor;

        public bool IsBlockedByDoor { get; private set; }

        public BotDoorInteractionSystem(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException("BotDoorInteractionSystem constructor: bot was null");
            }

            _bot = bot;
            _log = Plugin.LoggerInstance;
        }

        public void Tick(float time)
        {
            if (_bot == null || _bot.IsDead || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
            {
                return;
            }

            if (time < _lastDoorCheckTime + DoorCheckInterval)
            {
                return;
            }

            _lastDoorCheckTime = time;
            Vector3 botPos = _bot.Position;

            Door nearest = FindNearestBlockingDoor(botPos);
            if (nearest == null)
            {
                IsBlockedByDoor = false;
                return;
            }

            float distance = Vector3.Distance(botPos, nearest.transform.position);
            if (distance > InteractionDistance)
            {
                IsBlockedByDoor = false;
                return;
            }

            if (nearest.DoorState == EDoorState.Interacting)
            {
                IsBlockedByDoor = true;
                return;
            }

            if (time < _nextRetryTime)
            {
                IsBlockedByDoor = true;
                return;
            }

            if (!nearest.Operatable)
            {
                _log.LogWarning("[BotDoorInteraction] Cannot operate door: " + nearest.name);
                IsBlockedByDoor = true;
                return;
            }

            if (_bot.GetPlayer.CurrentManagedState == null)
            {
                _log.LogWarning("[BotDoorInteraction] Missing ManagedState for: " + _bot.name);
                return;
            }

            EInteractionType type = GetBestInteractionType(nearest);
            InteractionResult result = new InteractionResult(type);
            _bot.GetPlayer.CurrentManagedState.StartDoorInteraction(nearest, result, null);

            _nextRetryTime = time + DoorRetryCooldown;
            _currentDoor = nearest;
            IsBlockedByDoor = true;

            _log.LogDebug("[BotDoorInteraction] " + _bot.name + " → " + type + " door " + nearest.name);
        }

        public bool IsDoorBlocking(Vector3 position)
        {
            if (_currentDoor == null || !_currentDoor.enabled)
            {
                return false;
            }

            float dist = Vector3.Distance(_currentDoor.transform.position, position);
            return dist < InteractionDistance && (_currentDoor.DoorState & EDoorState.Open) == 0;
        }

        public void Reset()
        {
            _currentDoor = null;
            IsBlockedByDoor = false;
            _nextRetryTime = 0f;
            _lastDoorCheckTime = 0f;
        }

        private Door FindNearestBlockingDoor(Vector3 botPos)
        {
            Door[] all = UnityEngine.Object.FindObjectsOfType<Door>();
            float bestDist = float.MaxValue;
            Door best = null;

            for (int i = 0; i < all.Length; i++)
            {
                Door d = all[i];
                if (d == null || !d.enabled)
                {
                    continue;
                }

                EDoorState state = d.DoorState;
                if ((state & EDoorState.Open) != 0 || (state & EDoorState.Breaching) != 0)
                {
                    continue;
                }

                float dist = Vector3.Distance(botPos, d.transform.position);
                if (dist < bestDist)
                {
                    bestDist = dist;
                    best = d;
                }
            }

            return best;
        }

        private EInteractionType GetBestInteractionType(Door door)
        {
            EDoorState state = door.DoorState;
            if ((state & EDoorState.Shut) != 0 || state == EDoorState.None)
            {
                return EInteractionType.Open;
            }

            if ((state & EDoorState.Open) != 0)
            {
                return EInteractionType.Close;
            }

            return EInteractionType.Open;
        }
    }
}
