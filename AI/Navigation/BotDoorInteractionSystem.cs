// <auto-generated>
//   AI-Refactored: BotDoorInteractionSystem.cs (Beyond Diamond, Squad/Stealth/Human Error Edition)
//   SYSTEMATICALLY MANAGED. All failures are bulletproof. No fallback. No vanilla AI handoff. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    public sealed class BotDoorInteractionSystem
    {
        #region Constants

        private const float DoorRetryCooldown = 2.6f;
        private const float DoorCheckInterval = 0.41f;
        private const float DoorCastRange = 1.85f;
        private const float DoorCastRadius = 0.45f;
        private const float HesitateChance = 0.12f;
        private const float HesitateMinDelay = 0.16f;
        private const float HesitateMaxDelay = 0.53f;
        private const float SquadWaitRadius = 2.1f;
        private const float PanicFastDelay = 0.04f;
        private const float StealthExtraWait = 0.23f;
        private const float RareGiveUpChance = 0.04f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly ManualLogSource _log;

        private float _lastDoorCheckTime;
        private float _nextRetryTime;
        private Door _currentDoor;
        private float _hesitateUntil;
        private float _giveUpUntil;
        private bool _hasGivenUp;

        #endregion

        #region Properties

        public bool IsBlockedByDoor { get; private set; }

        #endregion

        #region Constructor

        public BotDoorInteractionSystem(BotOwner bot)
        {
            if (bot == null)
                throw new ArgumentNullException(nameof(bot), "[BotDoorInteractionSystem] BotOwner was null.");
            _bot = bot;
            _log = Plugin.LoggerInstance;
            _hesitateUntil = 0f;
            _giveUpUntil = 0f;
            _hasGivenUp = false;
        }

        #endregion

        #region Public API

        public void Tick(float time)
        {
            try
            {
                if (_bot == null || _bot.IsDead)
                    return;
                Player player = EFTPlayerUtil.ResolvePlayer(_bot);
                if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.CurrentManagedState == null)
                    return;

                if (time < _lastDoorCheckTime + DoorCheckInterval)
                    return;
                _lastDoorCheckTime = time;

                if (_hasGivenUp)
                {
                    if (time < _giveUpUntil)
                    {
                        MarkBlocked(_currentDoor);
                        return;
                    }
                    _hasGivenUp = false;
                    _giveUpUntil = 0f;
                }

                Vector3 origin = _bot.Position + Vector3.up * 1.18f;
                Vector3 forward = _bot.LookDirection;
                RaycastHit hit;
                if (!Physics.SphereCast(origin, DoorCastRadius, forward, out hit, DoorCastRange, AIRefactoredLayerMasks.Interactive))
                {
                    ClearDoorState();
                    return;
                }

                Collider col = hit.collider;
                if (col == null)
                {
                    ClearDoorState();
                    return;
                }

                Door door = col.GetComponentInParent<Door>();
                if (door == null || !door.enabled || !door.Operatable)
                {
                    ClearDoorState();
                    return;
                }

                EDoorState state = door.DoorState;
                if ((state & EDoorState.Open) != 0 || (state & EDoorState.Breaching) != 0)
                {
                    ClearDoorState();
                    return;
                }
                if (state == EDoorState.Interacting)
                {
                    MarkBlocked(door);
                    return;
                }
                if (time < _nextRetryTime)
                {
                    MarkBlocked(door);
                    return;
                }

                if (ShouldWaitForSquad(door))
                {
                    MarkBlocked(door);
                    return;
                }

                float hesitation = 0f;
                var cache = _bot.GetComponent<BotComponentCache>();
                var profile = cache?.PersonalityProfile;
                if (cache != null && cache.PanicHandler != null && cache.PanicHandler.IsPanicking)
                {
                    hesitation = PanicFastDelay;
                }
                else if (profile != null &&
                         (profile.Personality == PersonalityType.Stalker || profile.Caution > 0.7f))
                {
                    hesitation = UnityEngine.Random.Range(HesitateMinDelay, HesitateMaxDelay) + StealthExtraWait;
                }
                else if (UnityEngine.Random.value < HesitateChance)
                {
                    hesitation = UnityEngine.Random.Range(HesitateMinDelay, HesitateMaxDelay);
                }

                if (_hesitateUntil < time)
                    _hesitateUntil = time + hesitation;
                if (_hesitateUntil > time)
                {
                    MarkBlocked(door);
                    return;
                }

                if (UnityEngine.Random.value < RareGiveUpChance)
                {
                    _hasGivenUp = true;
                    _giveUpUntil = time + DoorRetryCooldown + UnityEngine.Random.Range(0.4f, 1.8f);
                    MarkBlocked(door);
                    return;
                }

                // Correct: Use MovementContext directly for pose
                float pose = _bot.GetPlayer?.MovementContext?.PoseLevel ?? 100f;
                if (pose < 40f) // crouch/prone threshold
                {
                    MarkBlocked(door);
                    return;
                }

                try
                {
                    EInteractionType interactionType = GetBestInteractionType(state);
                    InteractionResult result = new InteractionResult(interactionType);
                    player.CurrentManagedState.StartDoorInteraction(door, result, null);

                    _log.LogDebug($"[BotDoorInteraction] {player.ProfileId} → {interactionType} door {door.name}");
                }
                catch (Exception ex)
                {
                    _log.LogError("[BotDoorInteraction] Door interaction failed: " + ex);
                }

                _nextRetryTime = time + DoorRetryCooldown;
                _currentDoor = door;
                IsBlockedByDoor = true;
            }
            catch
            {
                ClearDoorState();
            }
        }

        public bool IsDoorBlocking(Vector3 position)
        {
            try
            {
                if (_currentDoor == null || !_currentDoor.enabled)
                    return false;
                float dist = Vector3.Distance(_currentDoor.transform.position, position);
                return dist < DoorCastRange && (_currentDoor.DoorState & EDoorState.Open) == 0;
            }
            catch
            {
                return false;
            }
        }

        public void Reset()
        {
            _currentDoor = null;
            IsBlockedByDoor = false;
            _nextRetryTime = 0f;
            _lastDoorCheckTime = 0f;
            _hesitateUntil = 0f;
            _giveUpUntil = 0f;
            _hasGivenUp = false;
        }

        #endregion

        #region Private Helpers

        private void ClearDoorState()
        {
            _currentDoor = null;
            IsBlockedByDoor = false;
            _hesitateUntil = 0f;
            _giveUpUntil = 0f;
            _hasGivenUp = false;
        }

        private void MarkBlocked(Door door)
        {
            _currentDoor = door;
            IsBlockedByDoor = true;
        }

        private bool ShouldWaitForSquad(Door door)
        {
            try
            {
                if (_bot?.BotsGroup == null || _bot.BotsGroup.MembersCount <= 1)
                    return false;
                int waiting = 0;
                for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (mate == null || mate.IsDead || mate == _bot)
                        continue;
                    Vector3 matePos = mate.Position;
                    float dist = Vector3.Distance(door.transform.position, matePos);
                    if (dist < SquadWaitRadius)
                        waiting++;
                    if (waiting > 2)
                        return true;
                }
                return false;
            }
            catch { return false; }
        }

        private static EInteractionType GetBestInteractionType(EDoorState state)
        {
            if ((state & EDoorState.Shut) != 0 || state == EDoorState.None)
                return EInteractionType.Open;
            if ((state & EDoorState.Open) != 0)
                return EInteractionType.Close;
            return EInteractionType.Open;
        }

        #endregion
    }
}
