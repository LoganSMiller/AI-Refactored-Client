// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Handles door interactions for bots using fallback-agnostic, deadlock-free logic.
    /// Replaces EFT.BotDoorInteraction with fully AIRefactored logic.
    /// </summary>
    public sealed class BotDoorInteractionSystem
    {
        #region Constants

        private const float DoorRetryCooldown = 2.5f;
        private const float DoorCheckInterval = 0.4f;
        private const float DoorCastRange = 1.75f;
        private const float DoorCastRadius = 0.4f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly ManualLogSource _log;

        private float _lastDoorCheckTime;
        private float _nextRetryTime;
        private Door _currentDoor;

        #endregion

        #region Properties

        /// <summary>
        /// Gets a value indicating whether a door is currently blocking the bot.
        /// </summary>
        public bool IsBlockedByDoor { get; private set; }

        #endregion

        #region Constructor

        public BotDoorInteractionSystem(BotOwner bot)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot), "BotDoorInteractionSystem constructor: bot was null");
            }

            _bot = bot;
            _log = Plugin.LoggerInstance;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Updates door interaction logic.
        /// </summary>
        public void Tick(float time)
        {
            if (_bot == null || _bot.IsDead)
            {
                return;
            }

            Player player = _bot.GetPlayer;
            if (player == null || !player.IsAI)
            {
                return;
            }

            if (time < _lastDoorCheckTime + DoorCheckInterval)
            {
                return;
            }

            _lastDoorCheckTime = time;

            Vector3 origin = _bot.Position + Vector3.up * 1.2f;
            Vector3 forward = _bot.LookDirection;

            RaycastHit hit;
            if (!Physics.SphereCast(origin, DoorCastRadius, forward, out hit, DoorCastRange, AIRefactoredLayerMasks.Interactive))
            {
                IsBlockedByDoor = false;
                _currentDoor = null;
                return;
            }

            Collider collider = hit.collider;
            if (collider == null)
            {
                IsBlockedByDoor = false;
                _currentDoor = null;
                return;
            }

            Door door = collider.GetComponentInParent<Door>();
            if (door == null || !door.enabled)
            {
                IsBlockedByDoor = false;
                _currentDoor = null;
                return;
            }

            EDoorState state = door.DoorState;
            if ((state & EDoorState.Open) != 0 || (state & EDoorState.Breaching) != 0)
            {
                IsBlockedByDoor = false;
                _currentDoor = null;
                return;
            }

            if (state == EDoorState.Interacting)
            {
                IsBlockedByDoor = true;
                return;
            }

            if (time < _nextRetryTime)
            {
                IsBlockedByDoor = true;
                return;
            }

            if (!door.Operatable)
            {
                _log.LogWarning("[BotDoorInteraction] Cannot operate door: " + door.name);
                IsBlockedByDoor = true;
                return;
            }

            if (player.CurrentManagedState == null)
            {
                _log.LogWarning("[BotDoorInteraction] Missing ManagedState for bot: " + _bot.name);
                return;
            }

            EInteractionType type = GetBestInteractionType(state);
            InteractionResult result = new InteractionResult(type);
            player.CurrentManagedState.StartDoorInteraction(door, result, null);

            _nextRetryTime = time + DoorRetryCooldown;
            _currentDoor = door;
            IsBlockedByDoor = true;

            _log.LogDebug("[BotDoorInteraction] " + _bot.name + " → " + type + " door " + door.name);
        }

        /// <summary>
        /// Checks if a door is currently blocking the specified position.
        /// </summary>
        public bool IsDoorBlocking(Vector3 position)
        {
            if (_currentDoor == null || !_currentDoor.enabled)
            {
                return false;
            }

            float dist = Vector3.Distance(_currentDoor.transform.position, position);
            return dist < DoorCastRange && (_currentDoor.DoorState & EDoorState.Open) == 0;
        }

        /// <summary>
        /// Clears door interaction state and resets cooldowns.
        /// </summary>
        public void Reset()
        {
            _currentDoor = null;
            IsBlockedByDoor = false;
            _nextRetryTime = 0f;
            _lastDoorCheckTime = 0f;
        }

        #endregion

        #region Private Helpers

        private static EInteractionType GetBestInteractionType(EDoorState state)
        {
            if ((state & EDoorState.Shut) != 0 || state == EDoorState.None)
            {
                return EInteractionType.Open;
            }

            if ((state & EDoorState.Open) != 0)
            {
                return EInteractionType.Close;
            }

            return EInteractionType.Open;
        }

        #endregion
    }
}
