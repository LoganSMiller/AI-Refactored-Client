// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using BepInEx.Logging;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Legacy stub. Previously assigned zone names using IZones.
    /// Now fallback-only for compatibility — always returns 'unassigned' or empty values.
    /// </summary>
    public static class ZoneAssignmentHelper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly IReadOnlyList<string> EmptyZones = Array.Empty<string>();
        private static readonly List<ISpawnPoint> EmptySpawnPoints = new List<ISpawnPoint>(0);

        /// <summary>
        /// Gets a value indicating whether the system is initialized (always false in fallback mode).
        /// </summary>
        public static bool IsInitialized => false;

        /// <summary>
        /// Clears zone data (no-op in fallback mode).
        /// </summary>
        public static void Clear()
        {
            // Intentionally no-op
        }

        /// <summary>
        /// Gets all known zone names (always empty).
        /// </summary>
        public static IReadOnlyList<string> GetAllZoneNames()
        {
            return EmptyZones;
        }

        /// <summary>
        /// Gets the nearest zone to a position (always "unassigned").
        /// </summary>
        public static string GetNearestZone(Vector3 position)
        {
            return "unassigned";
        }

        /// <summary>
        /// Gets all spawn points in a zone (always empty).
        /// </summary>
        public static List<ISpawnPoint> GetSpawnPoints(string zone)
        {
            return EmptySpawnPoints;
        }

        /// <summary>
        /// Gets the center of a zone (always Vector3.zero).
        /// </summary>
        public static Vector3 GetZoneCenter(string zone)
        {
            return Vector3.zero;
        }

        /// <summary>
        /// Gets the weight of a zone (always 1.0).
        /// </summary>
        public static float GetZoneWeight(string zone)
        {
            return 1f;
        }

        /// <summary>
        /// Determines if the zone is flagged as a boss zone (always false).
        /// </summary>
        public static bool IsBossZone(string zone)
        {
            return false;
        }

        /// <summary>
        /// Initializes the fallback zone system (logs stub message).
        /// </summary>
        public static void Initialize(object zones, bool includeSnipingZones = true)
        {
            Logger.LogInfo("[ZoneAssignmentHelper] IZones is disabled. Skipping zone assignment.");
        }
    }
}
