// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using System;
    using System.Collections.Generic;
    using EFT.Game.Spawning;
    using UnityEngine;

    /// <summary>
    /// Assigns zone names to world positions using IZones and spawn metadata.
    /// Supports proximity detection, zone weights, and boss presence.
    /// </summary>
    public static class ZoneAssignmentHelper
    {
        private const float MaxZoneSnapDistance = 28f;
        private const float BaseBossWeight = 2.5f;

        private static readonly HashSet<string> _bossZones = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        private static readonly Dictionary<string, Vector3> _zoneCenters = new Dictionary<string, Vector3>(StringComparer.OrdinalIgnoreCase);
        private static readonly Dictionary<string, List<ISpawnPoint>> _zoneSpawns = new Dictionary<string, List<ISpawnPoint>>(StringComparer.OrdinalIgnoreCase);
        private static readonly Dictionary<string, float> _zoneWeights = new Dictionary<string, float>(StringComparer.OrdinalIgnoreCase);
        private static readonly List<string> _zoneNames = new List<string>(64);

        private static IZones? _zones;

        /// <summary>
        /// Clears all cached zone data (called on world unload or reset).
        /// </summary>
        public static void Clear()
        {
            _zones = null;
            _zoneCenters.Clear();
            _zoneSpawns.Clear();
            _zoneWeights.Clear();
            _bossZones.Clear();
            _zoneNames.Clear();
        }

        /// <summary>
        /// Returns all known zone names.
        /// </summary>
        public static IReadOnlyList<string> GetAllZoneNames()
        {
            return _zoneNames;
        }

        /// <summary>
        /// Returns the nearest known zone name based on proximity to a position.
        /// </summary>
        /// <param name="position">World position to evaluate.</param>
        /// <returns>Closest known zone name or 'unassigned'.</returns>
        public static string GetNearestZone(Vector3 position)
        {
            string bestZone = "unassigned";
            float bestDistanceSq = MaxZoneSnapDistance * MaxZoneSnapDistance;

            foreach (KeyValuePair<string, Vector3> pair in _zoneCenters)
            {
                float distSq = (pair.Value - position).sqrMagnitude;
                if (distSq < bestDistanceSq)
                {
                    bestZone = pair.Key;
                    bestDistanceSq = distSq;
                }
            }

            return bestZone;
        }

        /// <summary>
        /// Gets all spawn points registered under the zone.
        /// </summary>
        /// <param name="zone">Zone name to query.</param>
        /// <returns>List of spawn points.</returns>
        public static List<ISpawnPoint> GetSpawnPoints(string zone)
        {
            if (string.IsNullOrWhiteSpace(zone))
            {
                return new List<ISpawnPoint>();
            }

            return _zoneSpawns.TryGetValue(zone, out var list) && list != null ? list : new List<ISpawnPoint>();
        }

        /// <summary>
        /// Returns the average spawn point location for a zone.
        /// </summary>
        /// <param name="zone">Zone name to query.</param>
        /// <returns>Center point of the zone.</returns>
        public static Vector3 GetZoneCenter(string zone)
        {
            return _zoneCenters.TryGetValue(zone, out Vector3 center) ? center : Vector3.zero;
        }

        /// <summary>
        /// Returns the tactical weight (risk/value) of a zone.
        /// </summary>
        /// <param name="zone">Zone name to query.</param>
        /// <returns>Weight of the zone.</returns>
        public static float GetZoneWeight(string zone)
        {
            return _zoneWeights.TryGetValue(zone, out float value) ? value : 1f;
        }

        /// <summary>
        /// Returns true if the specified zone has a known boss presence.
        /// </summary>
        /// <param name="zone">Zone name to check.</param>
        /// <returns>True if a boss spawns here.</returns>
        public static bool IsBossZone(string zone)
        {
            return _bossZones.Contains(zone);
        }

        /// <summary>
        /// Initializes zone metadata using IZones reference and populates all caches.
        /// </summary>
        /// <param name="zones">IZones instance to scan from.</param>
        /// <param name="includeSnipingZones">Whether to include sniper zones.</param>
        public static void Initialize(IZones zones, bool includeSnipingZones = true)
        {
            if (zones == null)
            {
                throw new ArgumentNullException(nameof(zones));
            }

            _zones = zones;

            _zoneCenters.Clear();
            _zoneSpawns.Clear();
            _zoneWeights.Clear();
            _bossZones.Clear();
            _zoneNames.Clear();

            List<string> zoneList = new List<string>(zones.ZoneNames(includeSnipingZones));
            foreach (var zoneName in zoneList)
            {
                if (string.IsNullOrEmpty(zoneName))
                {
                    continue;
                }

                _zoneNames.Add(zoneName);

                ISpawnPoint[] spawns = zones.ZoneSpawnPoints(zoneName);
                if (spawns == null || spawns.Length == 0)
                {
                    continue;
                }

                Vector3 sum = Vector3.zero;
                List<ISpawnPoint> spawnList = new List<ISpawnPoint>(spawns.Length);

                foreach (var spawn in spawns)
                {
                    if (spawn != null)
                    {
                        sum += spawn.Position;
                        spawnList.Add(spawn);
                    }
                }

                _zoneCenters[zoneName] = sum / spawns.Length;
                _zoneSpawns[zoneName] = spawnList;

                float weight = 1f;
                if (int.TryParse(zoneName, out int zoneId))
                {
                    BotZone botZone = new BotZone { Id = zoneId };
                    Vector3? bossPos = zones.GetBossPosition(botZone);
                    if (bossPos.HasValue)
                    {
                        _bossZones.Add(zoneName);
                        weight += BaseBossWeight;
                    }
                }

                _zoneWeights[zoneName] = weight;
            }
        }
    }
}
