// <auto-generated/>
// This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
// Licensed under the MIT License. See the LICENSE file in the repository root for details.

#nullable enable

namespace AIRefactored.AI.Components
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Simulates hearing damage effects such as deafness after exposure to loud sounds.
    /// Gradually recovers hearing over time to simulate ear ringing fading out.
    /// </summary>
    public sealed class HearingDamageComponent
    {
        #region Fields

        /// <summary>
        /// Duration that deafness lasts after exposure.
        /// </summary>
        private float deafDuration;

        /// <summary>
        /// Intensity of deafness between 0.0 (no deafness) and 1.0 (full deafness).
        /// </summary>
        private float deafnessLevel;

        /// <summary>
        /// Target deafness intensity after initial exposure.
        /// </summary>
        private float targetDeafness;

        /// <summary>
        /// Elapsed time since deafness was triggered.
        /// </summary>
        private float elapsedTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current deafness intensity (0.0 to 1.0).
        /// </summary>
        public float Deafness => this.deafnessLevel;

        /// <summary>
        /// Gets a value indicating whether the bot is currently deafened.
        /// </summary>
        public bool IsDeafened => this.deafnessLevel > 0.1f;

        /// <summary>
        /// Gets the remaining deafness duration in seconds.
        /// </summary>
        public float RemainingTime => Mathf.Max(0f, this.deafDuration - this.elapsedTime);

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies new deafness to the bot with the specified intensity and duration.
        /// </summary>
        /// <param name="intensity">Intensity from 0.0 to 1.0.</param>
        /// <param name="duration">Duration in seconds.</param>
        public void ApplyDeafness(float intensity, float duration)
        {
            intensity = Mathf.Clamp01(intensity);
            duration = Mathf.Max(0.1f, duration);

            if (intensity > this.targetDeafness)
            {
                this.targetDeafness = intensity;
                this.deafDuration = duration;
                this.elapsedTime = 0f;
            }
        }

        /// <summary>
        /// Clears all deafness effects immediately.
        /// </summary>
        public void Clear()
        {
            this.deafnessLevel = 0f;
            this.targetDeafness = 0f;
            this.deafDuration = 0f;
            this.elapsedTime = 0f;
        }

        /// <summary>
        /// Updates deafness fading and decay over time.
        /// Should be called every frame.
        /// </summary>
        /// <param name="deltaTime">Delta time in seconds.</param>
        public void Tick(float deltaTime)
        {
            if (this.targetDeafness <= 0.01f)
            {
                return;
            }

            this.elapsedTime += deltaTime;

            if (this.elapsedTime >= this.deafDuration)
            {
                this.Clear();
                return;
            }

            float remainingRatio = 1.0f - Mathf.Clamp01(this.elapsedTime / this.deafDuration);
            this.deafnessLevel = this.targetDeafness * remainingRatio;
        }

        #endregion
    }
}
