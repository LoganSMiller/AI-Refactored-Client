// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates squad-level signal sharing (loot targets, fallback points, danger events).
    /// Syncs between group members using staggered, randomized intervals.
    /// </summary>
    public sealed class BotGroupSyncCoordinator
    {
        #region Constants

        private const float BaseSyncInterval = 0.5f;
        private const float PositionEpsilon = 0.15f;

        #endregion

        #region Fields

        private static readonly List<BotOwner> TempTeammates = new List<BotOwner>(8);

        private readonly Dictionary<BotOwner, BotComponentCache> _teammateCaches = new Dictionary<BotOwner, BotComponentCache>(8);

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private BotsGroup? _group;
        private Vector3? _extractPoint;
        private Vector3? _fallbackPoint;
        private Vector3? _lootPoint;
        private float _nextSyncTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the last broadcast danger timestamp.
        /// </summary>
        public float LastDangerBroadcastTime { get; private set; } = -999f;

        /// <summary>
        /// Gets the last danger broadcasted position.
        /// </summary>
        public Vector3 LastDangerPosition { get; private set; }

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the group sync for the specified bot.
        /// </summary>
        /// <param name="botOwner">The bot owner instance.</param>
        public void Initialize(BotOwner botOwner)
        {
            this._bot = botOwner ?? throw new ArgumentNullException(nameof(botOwner));
            this._group = botOwner.BotsGroup;

            if (this._bot.GetPlayer?.IsAI != true || this._group == null)
            {
                return;
            }

            this._group.OnMemberAdd += this.OnMemberAdded;
            this._group.OnMemberRemove += this.OnMemberRemoved;
        }

        /// <summary>
        /// Injects the local bot cache.
        /// </summary>
        /// <param name="localCache">The bot's cache instance.</param>
        public void InjectLocalCache(BotComponentCache localCache)
        {
            this._cache = localCache ?? throw new ArgumentNullException(nameof(localCache));
        }

        #endregion

        #region Public API

        /// <summary>
        /// Broadcasts a squad fallback point.
        /// </summary>
        public void BroadcastFallbackPoint(Vector3 point)
        {
            this._fallbackPoint = point;

            foreach (BotComponentCache teammate in this._teammateCaches.Values)
            {
                teammate.Combat?.TriggerFallback(point);

                if (teammate.PanicHandler != null && !teammate.PanicHandler.IsPanicking)
                {
                    teammate.PanicHandler.TriggerPanic();
                }
            }
        }

        /// <summary>
        /// Broadcasts a squad extraction point.
        /// </summary>
        public void BroadcastExtractPoint(Vector3 point)
        {
            this._extractPoint = point;
        }

        /// <summary>
        /// Broadcasts a loot target to the squad.
        /// </summary>
        public void BroadcastLootPoint(Vector3 point)
        {
            this._lootPoint = point;
        }

        /// <summary>
        /// Broadcasts a squad-wide danger event.
        /// </summary>
        public void BroadcastDanger(Vector3 position)
        {
            this.LastDangerBroadcastTime = Time.time;
            this.LastDangerPosition = position;

            foreach (BotComponentCache cache in this._teammateCaches.Values)
            {
                if (cache.PanicHandler != null && !cache.PanicHandler.IsPanicking)
                {
                    float delay = UnityEngine.Random.Range(0.1f, 0.35f);
                    TriggerDelayedPanic(cache, delay);
                }
            }
        }

        /// <summary>
        /// Called each frame to sync fallback or danger data.
        /// </summary>
        public void Tick(float time)
        {
            if (this._cache?.Bot?.GetPlayer?.IsAI != true || this._teammateCaches.Count == 0)
            {
                return;
            }

            if (time < this._nextSyncTime)
            {
                return;
            }

            this._nextSyncTime = time + (BaseSyncInterval * UnityEngine.Random.Range(0.8f, 1.2f));

            if (this._cache.PanicHandler?.IsPanicking != true || this._bot == null)
            {
                return;
            }

            Vector3 myPos = this._bot.Position;

            if (!this._fallbackPoint.HasValue || (this._fallbackPoint.Value - myPos).sqrMagnitude > PositionEpsilon * PositionEpsilon)
            {
                this.BroadcastFallbackPoint(myPos);
            }

            if ((this.LastDangerPosition - myPos).sqrMagnitude > PositionEpsilon * PositionEpsilon)
            {
                this.BroadcastDanger(myPos);
            }
        }

        /// <summary>
        /// Returns the shared squad fallback target if any.
        /// </summary>
        public Vector3? GetSharedFallbackTarget() => this._fallbackPoint;

        /// <summary>
        /// Returns the shared squad loot target if any.
        /// </summary>
        public Vector3? GetSharedLootTarget() => this._lootPoint;

        /// <summary>
        /// Returns the shared squad extract target if any.
        /// </summary>
        public Vector3? GetSharedExtractTarget() => this._extractPoint;

        /// <summary>
        /// Returns whether the squad is fully synchronized.
        /// </summary>
        public bool IsSquadReady()
        {
            return this._bot != null && this._group != null && this._teammateCaches.Count > 0;
        }

        /// <summary>
        /// Logs squad cache summary to Unity console (dev use only).
        /// </summary>
        public void PrintSquadState()
        {
            Debug.Log(
                "[GroupSync] Bot: " + (this._bot?.Profile?.Info?.Nickname ?? "Unknown") +
                ", SquadSize: " + this._teammateCaches.Count +
                ", Fallback: " + (this._fallbackPoint?.ToString() ?? "null") +
                ", Loot: " + (this._lootPoint?.ToString() ?? "null"));
        }

        /// <summary>
        /// Gets the local bot cache for a teammate, if available.
        /// </summary>
        public BotComponentCache? GetCache(BotOwner teammate)
        {
            return this._teammateCaches.TryGetValue(teammate, out BotComponentCache cache) ? cache : null;
        }

        /// <summary>
        /// Returns live squadmates (not dead, valid AI).
        /// </summary>
        public IReadOnlyList<BotOwner> GetTeammates()
        {
            TempTeammates.Clear();

            foreach (KeyValuePair<BotOwner, BotComponentCache> pair in this._teammateCaches)
            {
                BotOwner mate = pair.Key;
                if (mate != null && !mate.IsDead && mate.GetPlayer?.IsAI == true)
                {
                    TempTeammates.Add(mate);
                }
            }

            return TempTeammates;
        }

        #endregion

        #region Teammate Lifecycle

        private void OnMemberAdded(BotOwner teammate)
        {
            if (teammate == null || this._bot == null || teammate == this._bot || this._teammateCaches.ContainsKey(teammate))
            {
                return;
            }

            if (teammate.GetPlayer?.IsAI != true || teammate.IsDead)
            {
                return;
            }

            AIRefactoredBotOwner? owner = BotRegistry.TryGetRefactoredOwner(teammate.ProfileId);
            if (owner == null)
            {
                return;
            }

            BotComponentCache newCache = new BotComponentCache();
            newCache.Initialize(teammate);
            newCache.SetOwner(owner);

            this._teammateCaches.Add(teammate, newCache);
        }

        private void OnMemberRemoved(BotOwner teammate)
        {
            this._teammateCaches.Remove(teammate);
        }

        private static void TriggerDelayedPanic(BotComponentCache cache, float delay)
        {
            Task.Run(async () =>
            {
                await Task.Delay((int)(delay * 1000f));
                if (cache.Bot?.IsDead == false)
                {
                    cache.PanicHandler?.TriggerPanic();
                }
            });
        }

        #endregion
    }
}
