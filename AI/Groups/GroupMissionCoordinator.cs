// <auto-generated>
//   AI-Refactored: GroupMissionCoordinator.cs (Supreme Arbitration & Overlay Edition – June 2025, Bulletproofed)
//   Dynamically assigns and caches squad missions by group ID. Personality, map, and squad-aware.
//   Bulletproof: Strict null guards, error isolation, zero static persistence post-raid, pooled logic, no propagation.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System.Collections.Generic;
    using AIRefactored.AI.Missions;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Dynamically assigns and caches squad missions (Loot, Fight, Quest) per group.
    /// Assignment is based on map, squad, and bot personality. All logic is bulletproof, pooled, and overlay/event-safe.
    /// </summary>
    public static class GroupMissionCoordinator
    {
        #region Static State

        // Persists for current raid/session only. Cleared on raid end.
        private static readonly Dictionary<string, BotMissionController.MissionType> AssignedMissions =
            new Dictionary<string, BotMissionController.MissionType>(32);

        #endregion

        #region Public API

        /// <summary>
        /// Explicitly assign a mission to a group. Overlay/event safe.
        /// </summary>
        public static void ForceMissionForGroup(string groupId, BotMissionController.MissionType mission)
        {
            if (!string.IsNullOrEmpty(groupId))
                AssignedMissions[groupId] = mission;
        }

        /// <summary>
        /// Gets the mission for the bot's squad, assigning if none exists.
        /// Always returns a valid mission (never null or invalid). Overlay/event bulletproof.
        /// </summary>
        public static BotMissionController.MissionType GetMissionForGroup(BotOwner bot)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return BotMissionController.MissionType.Loot;

                string groupId = bot.GetPlayer?.Profile?.Info?.GroupId;
                if (string.IsNullOrEmpty(groupId))
                    return PickMission(bot);

                if (!AssignedMissions.TryGetValue(groupId, out var mission))
                {
                    mission = PickMission(bot);
                    AssignedMissions[groupId] = mission;
                }

                return mission;
            }
            catch
            {
                return BotMissionController.MissionType.Loot;
            }
        }

        /// <summary>
        /// Registers a bot for mission generation if none already exists.
        /// Bulletproof for overlay/event context.
        /// </summary>
        public static void RegisterFromBot(BotOwner bot)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return;

                string groupId = bot.GetPlayer?.Profile?.Info?.GroupId;
                if (!string.IsNullOrEmpty(groupId) && !AssignedMissions.ContainsKey(groupId))
                    AssignedMissions[groupId] = PickMission(bot);
            }
            catch { }
        }

        /// <summary>
        /// Clears all mission assignments. Called on raid end/reset.
        /// </summary>
        public static void Reset()
        {
            AssignedMissions.Clear();
        }

        #endregion

        #region Internal Mission Picker

        /// <summary>
        /// Picks a mission based on map, bot personality, and randomness.
        /// Pooled, never allocates, bulletproof, overlay/event safe.
        /// </summary>
        private static BotMissionController.MissionType PickMission(BotOwner bot)
        {
            float loot = 1f, fight = 1f, quest = 1f;

            try
            {
                string map = GameWorldHandler.TryGetValidMapName();
                switch (map)
                {
                    case "factory4_day":
                    case "factory4_night": fight += 1.6f; break;
                    case "woods": loot += 1.4f; break;
                    case "bigmap": quest += 0.8f; fight += 0.2f; break;
                    case "interchange": loot += 1.2f; break;
                    case "rezervbase": fight += 1.1f; loot += 0.3f; break;
                    case "lighthouse": quest += 1.1f; loot += 0.8f; break;
                    case "shoreline": quest += 1.3f; loot += 0.7f; break;
                    case "tarkovstreets": fight += 1.4f; loot += 0.4f; break;
                    case "laboratory": fight += 2.2f; break;
                    case "sandbox":
                    case "sandbox_high":
                    case "groundzero": loot += 1.1f; break;
                    default: loot += 0.6f; break;
                }

                if (BotRegistry.TryGet(bot.ProfileId, out var profile))
                {
                    loot += profile.Caution;
                    quest += profile.Caution * 0.5f;
                    fight += profile.AggressionLevel * 1.3f;
                    if (profile.IsFrenzied) fight += 1.4f;
                    if (profile.IsFearful) loot += 1.2f;
                    if (profile.IsCamper) quest += 0.9f;
                }
            }
            catch { }

            float total = loot + fight + quest;
            float roll = UnityEngine.Random.value * total;

            if (roll < loot)
                return BotMissionController.MissionType.Loot;
            if (roll < loot + fight)
                return BotMissionController.MissionType.Fight;
            return BotMissionController.MissionType.Quest;
        }

        #endregion
    }
}
