// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System.Collections.Generic;
    using AIRefactored.AI.Missions;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Assigns and caches squad mission types per GroupId for squad-coordinated routing and objectives.
    /// Dynamically weighted based on map type, squad composition, and bot personality.
    /// </summary>
    public static class GroupMissionCoordinator
    {
        private static readonly Dictionary<string, BotMissionController.MissionType> AssignedMissions = new Dictionary<string, BotMissionController.MissionType>(32);

        /// <summary>
        /// Forces a specific mission type for the given group ID.
        /// </summary>
        public static void ForceMissionForGroup(string groupId, BotMissionController.MissionType mission)
        {
            if (!string.IsNullOrEmpty(groupId))
            {
                AssignedMissions[groupId] = mission;
            }
        }

        /// <summary>
        /// Gets the mission type for the bot's group. Returns a weighted choice if not yet assigned.
        /// </summary>
        public static BotMissionController.MissionType GetMissionForGroup(BotOwner bot)
        {
            if (bot == null || bot.IsDead)
            {
                return BotMissionController.MissionType.Loot;
            }

            Player player = bot.GetPlayer;
            if (player == null || !player.IsAI || player.Profile == null || player.Profile.Info == null)
            {
                return BotMissionController.MissionType.Loot;
            }

            string groupId = player.Profile.Info.GroupId;
            if (string.IsNullOrEmpty(groupId))
            {
                return PickMission(bot);
            }

            BotMissionController.MissionType result;
            if (!AssignedMissions.TryGetValue(groupId, out result))
            {
                result = PickMission(bot);
                AssignedMissions[groupId] = result;
            }

            return result;
        }

        /// <summary>
        /// Registers the bot's group if not already present.
        /// </summary>
        public static void RegisterFromBot(BotOwner bot)
        {
            if (bot == null || bot.IsDead)
            {
                return;
            }

            Player player = bot.GetPlayer;
            if (player == null || !player.IsAI || player.Profile == null || player.Profile.Info == null)
            {
                return;
            }

            string groupId = player.Profile.Info.GroupId;
            if (!string.IsNullOrEmpty(groupId) && !AssignedMissions.ContainsKey(groupId))
            {
                AssignedMissions[groupId] = PickMission(bot);
            }
        }

        /// <summary>
        /// Clears all cached mission assignments.
        /// </summary>
        public static void Reset()
        {
            AssignedMissions.Clear();
        }

        private static BotMissionController.MissionType PickMission(BotOwner bot)
        {
            float loot = 1f;
            float fight = 1f;
            float quest = 1f;

            string map = GameWorldHandler.TryGetValidMapName();
            switch (map)
            {
                case "factory4_day":
                case "factory4_night":
                    fight += 1.5f;
                    break;
                case "woods":
                    loot += 1.5f;
                    break;
                case "bigmap":
                    quest += 0.75f;
                    fight += 0.25f;
                    break;
                case "interchange":
                    loot += 1.2f;
                    break;
                case "rezervbase":
                    fight += 1f;
                    loot += 0.4f;
                    break;
                case "lighthouse":
                    quest += 1.2f;
                    loot += 1f;
                    break;
                case "shoreline":
                    quest += 1.4f;
                    loot += 0.6f;
                    break;
                case "tarkovstreets":
                    fight += 1.3f;
                    loot += 0.5f;
                    break;
                case "laboratory":
                    fight += 2f;
                    break;
                case "sandbox":
                case "sandbox_high":
                case "groundzero":
                    loot += 1f;
                    break;
                default:
                    loot += 0.5f;
                    break;
            }

            BotPersonalityProfile personality;
            if (BotRegistry.TryGet(bot.ProfileId, out personality))
            {
                loot += personality.Caution;
                quest += personality.Caution * 0.5f;
                fight += personality.AggressionLevel * 1.2f;

                if (personality.IsFrenzied)
                {
                    fight += 1.5f;
                }

                if (personality.IsFearful)
                {
                    loot += 1f;
                }

                if (personality.IsCamper)
                {
                    quest += 0.75f;
                }
            }

            float total = loot + fight + quest;
            float roll = UnityEngine.Random.value * total;

            if (roll < loot)
            {
                return BotMissionController.MissionType.Loot;
            }

            if (roll < loot + fight)
            {
                return BotMissionController.MissionType.Fight;
            }

            return BotMissionController.MissionType.Quest;
        }
    }
}
