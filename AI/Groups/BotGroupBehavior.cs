// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Maintains passive squad cohesion when idle or patrolling:
    /// • Repels bots that are too close
    /// • Follows furthest idle mate if too far
    /// • Adds subtle jitter to mimic organic movement
    /// </summary>
    public sealed class BotGroupBehavior
    {
        #region Constants

        private const float CohesionWeight = 1.0f;
        private const float JitterAmount = 0.1f;
        private const float MaxSpacing = 7.5f;
        private const float MinSpacing = 2.25f;
        private const float RepulseStrength = 1.25f;
        private const float SpacingTolerance = 0.3f;

        private static readonly float MinSpacingSqr = MinSpacing * MinSpacing;
        private static readonly float MaxSpacingSqr = MaxSpacing * MaxSpacing;

        #endregion

        #region Fields

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private BotsGroup? _group;
        private Vector3? _lastMoveTarget;

        #endregion

        #region Properties

        /// <summary>
        /// Gets optional group sync logic for fallback and intel sharing.
        /// </summary>
        public BotGroupSyncCoordinator? GroupSync { get; private set; }

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the bot's group behavior logic.
        /// </summary>
        /// <param name="componentCache">The bot's component cache.</param>
        public void Initialize(BotComponentCache componentCache)
        {
            this._cache = componentCache ?? throw new ArgumentNullException(nameof(componentCache));
            this._bot = componentCache.Bot ?? throw new ArgumentNullException(nameof(componentCache.Bot));
            this._group = this._bot.BotsGroup;

            if (this._bot != null)
            {
                this.GroupSync = new BotGroupSyncCoordinator();
                this.GroupSync.Initialize(this._bot);
                this.GroupSync.InjectLocalCache(componentCache);
            }
        }

        /// <summary>
        /// Ticks the group cohesion system each frame.
        /// Handles repulsion, attraction, and subtle movement jitter.
        /// </summary>
        /// <param name="deltaTime">Delta time since last frame.</param>
        public void Tick(float deltaTime)
        {
            if (!this.IsEligible())
            {
                return;
            }

            if (this._bot == null || this._group == null || this._bot.Memory?.GoalEnemy != null)
            {
                return;
            }

            Vector3 myPos = this._bot.Position;
            Vector3 repulsion = Vector3.zero;
            Vector3? furthestTarget = null;
            float maxDistSqr = MinSpacingSqr;

            int count = this._group.MembersCount;
            for (int i = 0; i < count; i++)
            {
                BotOwner? mate = this._group.Member(i);
                if (mate == null || mate == this._bot || mate.IsDead)
                {
                    continue;
                }

                Vector3 offset = mate.Position - myPos;
                float distSqr = offset.sqrMagnitude;

                if (distSqr < MinSpacingSqr)
                {
                    float push = MinSpacing - Mathf.Sqrt(distSqr);
                    repulsion += (-offset.normalized) * push;
                }
                else if (distSqr > MaxSpacingSqr && distSqr > maxDistSqr && mate.Memory?.GoalEnemy == null)
                {
                    maxDistSqr = distSqr;
                    furthestTarget = mate.Position;
                }
            }

            if (repulsion.sqrMagnitude > 0.01f)
            {
                Vector3 repelTarget = myPos + repulsion.normalized * RepulseStrength;
                this.IssueMove(repelTarget);
                return;
            }

            if (furthestTarget.HasValue)
            {
                Vector3 dir = (furthestTarget.Value - myPos).normalized;
                Vector3 followTarget = myPos + dir * MaxSpacing;
                this.IssueMove(followTarget);
            }
        }

        #endregion

        #region Private Methods

        private bool IsEligible()
        {
            return this._bot != null &&
                   this._group != null &&
                   !this._bot.IsDead &&
                   this._bot.GetPlayer != null &&
                   this._bot.GetPlayer.IsAI;
        }

        private void IssueMove(Vector3 rawTarget)
        {
            if (this._bot == null)
            {
                return;
            }

            Vector3 jittered = rawTarget + UnityEngine.Random.insideUnitSphere * JitterAmount;
            jittered.y = rawTarget.y;

            if (!this._lastMoveTarget.HasValue || Vector3.Distance(this._lastMoveTarget.Value, jittered) > SpacingTolerance)
            {
                BotMovementHelper.SmoothMoveTo(this._bot, jittered, false);
                this._lastMoveTarget = jittered;
            }
        }

        #endregion
    }
}
