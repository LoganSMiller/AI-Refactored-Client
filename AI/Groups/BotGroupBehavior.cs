// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Maintains passive squad cohesion when idle or patrolling:
    /// • Repels bots that are too close
    /// • Follows furthest idle mate if too far
    /// • Adds subtle jitter to mimic organic movement
    /// </summary>
    public sealed class BotGroupBehavior
    {
        #region Constants

        private const float CohesionWeight = 1.0f;
        private const float JitterAmount = 0.1f;
        private const float MaxSpacing = 7.5f;
        private const float MinSpacing = 2.25f;
        private const float RepulseStrength = 1.25f;
        private const float SpacingTolerance = 0.3f;

        private static readonly float MinSpacingSqr = MinSpacing * MinSpacing;
        private static readonly float MaxSpacingSqr = MaxSpacing * MaxSpacing;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotsGroup _group;
        private Vector3 _lastMoveTarget;
        private bool _hasLastTarget;

        #endregion

        #region Properties

        public BotGroupSyncCoordinator GroupSync { get; private set; }

        #endregion

        #region Public Methods

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null)
            {
                throw new ArgumentNullException("componentCache");
            }

            BotOwner bot = componentCache.Bot;
            if (bot == null)
            {
                throw new ArgumentException("[BotGroupBehavior] Bot reference is null.");
            }

            this._cache = componentCache;
            this._bot = bot;
            this._group = bot.BotsGroup;

            this.GroupSync = new BotGroupSyncCoordinator();
            this.GroupSync.Initialize(bot);
            this.GroupSync.InjectLocalCache(componentCache);
        }

        public void Tick(float deltaTime)
        {
            if (!IsEligible())
            {
                return;
            }

            if (this._bot.Memory.GoalEnemy != null)
            {
                return;
            }

            Vector3 myPos = this._bot.Position;
            Vector3 repulsion = Vector3.zero;
            Vector3 furthest = Vector3.zero;
            float maxDistSqr = MinSpacingSqr;
            bool hasFurthest = false;

            int count = this._group.MembersCount;
            for (int i = 0; i < count; i++)
            {
                BotOwner mate = this._group.Member(i);
                if (mate == null || mate == this._bot || mate.IsDead || mate.Memory == null)
                {
                    continue;
                }

                Vector3 offset = mate.Position - myPos;
                float distSqr = offset.sqrMagnitude;

                if (distSqr < MinSpacingSqr)
                {
                    float push = MinSpacing - Mathf.Sqrt(distSqr);
                    repulsion += -offset.normalized * push;
                }
                else if (distSqr > MaxSpacingSqr && distSqr > maxDistSqr && mate.Memory.GoalEnemy == null)
                {
                    maxDistSqr = distSqr;
                    furthest = mate.Position;
                    hasFurthest = true;
                }
            }

            if (repulsion.sqrMagnitude > 0.01f)
            {
                Vector3 repelTarget = myPos + repulsion.normalized * RepulseStrength;
                IssueMove(repelTarget);
                return;
            }

            if (hasFurthest)
            {
                Vector3 direction = furthest - myPos;
                if (direction.sqrMagnitude > 0.001f)
                {
                    Vector3 normalized = direction.normalized;
                    Vector3 followTarget = myPos + normalized * MaxSpacing;
                    IssueMove(followTarget);
                }
            }
        }

        #endregion

        #region Private Methods

        private bool IsEligible()
        {
            if (this._bot == null || this._group == null || this._bot.IsDead)
            {
                return false;
            }

            Player player = this._bot.GetPlayer;
            if (player == null || !player.IsAI)
            {
                return false;
            }

            return true;
        }

        private void IssueMove(Vector3 rawTarget)
        {
            Vector3 jittered = rawTarget + UnityEngine.Random.insideUnitSphere * JitterAmount;
            jittered.y = rawTarget.y;

            if (!this._hasLastTarget)
            {
                this._lastMoveTarget = jittered;
                this._hasLastTarget = true;
                BotMovementHelper.SmoothMoveTo(this._bot, jittered, false);
                return;
            }

            float distance = Vector3.Distance(this._lastMoveTarget, jittered);
            if (distance > SpacingTolerance)
            {
                this._lastMoveTarget = jittered;
                BotMovementHelper.SmoothMoveTo(this._bot, jittered, false);
            }
        }

        #endregion
    }
}
