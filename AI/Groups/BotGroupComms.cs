// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls squad VO communication: fallback shouts, frag calls, suppression alerts, and injury.
    /// Uses cooldowns, proximity checks, and chance modifiers to sound natural.
    /// </summary>
    public sealed class BotGroupComms
    {
        #region Constants

        private const float AllyRadius = 12f;
        private const float VoiceCooldown = 4.5f;
        private static readonly float AllyRadiusSq = AllyRadius * AllyRadius;

        #endregion

        #region Fields

        private readonly BotComponentCache _cache;
        private float _nextVoiceTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets a value indicating whether this bot is muted from triggering voice lines.
        /// Used by healing and suppression logic.
        /// </summary>
        public bool IsMuted { get; set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotGroupComms"/> class.
        /// </summary>
        /// <param name="cache">The bot's component cache.</param>
        public BotGroupComms(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Explicitly triggers a voice line immediately.
        /// </summary>
        /// <param name="phrase">The voice phrase to say.</param>
        public void Say(EPhraseTrigger phrase)
        {
            if (!this.IsMuted && this.IsEligible())
            {
                this._cache.Bot?.BotTalk?.TrySay(phrase);
            }
        }

        /// <summary>
        /// Says a fallback alert ("Get back!") with 50% chance.
        /// </summary>
        public void SayFallback()
        {
            this.TriggerVoice(EPhraseTrigger.GetBack, 0.5f);
        }

        /// <summary>
        /// Says a "Frag Out!" grenade callout, 80% chance if squad nearby.
        /// </summary>
        public void SayFragOut()
        {
            this.TriggerVoice(EPhraseTrigger.OnEnemyGrenade, this.HasNearbyAlly() ? 0.8f : 0f);
        }

        /// <summary>
        /// Says an injury reaction ("I'm hit!") with 70% chance.
        /// </summary>
        public void SayHit()
        {
            this.TriggerVoice(EPhraseTrigger.OnBeingHurt, 0.7f);
        }

        /// <summary>
        /// Says a suppression alert ("Suppress them!") with 60% chance.
        /// </summary>
        public void SaySuppression()
        {
            this.TriggerVoice(EPhraseTrigger.Suppress, 0.6f);
        }

        #endregion

        #region Internal Logic

        private bool IsEligible()
        {
            BotOwner? bot = this._cache.Bot;
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.IsDead &&
                   bot.BotTalk != null;
        }

        private bool HasNearbyAlly()
        {
            BotOwner? bot = this._cache.Bot;
            if (bot == null)
            {
                return false;
            }

            string? groupId = bot.Profile?.Info?.GroupId;
            if (string.IsNullOrEmpty(groupId))
            {
                return false;
            }

            Vector3 myPos = bot.Position;

            foreach (BotComponentCache otherCache in BotCacheUtility.AllActiveBots())
            {
                if (otherCache == null || otherCache == this._cache)
                {
                    continue;
                }

                BotOwner? mate = otherCache.Bot;
                if (mate == null || mate.IsDead)
                {
                    continue;
                }

                string? mateGroup = mate.Profile?.Info?.GroupId;
                if (!string.IsNullOrEmpty(mateGroup) &&
                    mateGroup == groupId &&
                    (mate.Position - myPos).sqrMagnitude <= AllyRadiusSq)
                {
                    return true;
                }
            }

            return false;
        }

        private void TriggerVoice(EPhraseTrigger phrase, float chance = 1f)
        {
            if (this.IsMuted || !this.IsEligible())
            {
                return;
            }

            float now = Time.time;
            if (now < this._nextVoiceTime)
            {
                return;
            }

            if (chance < 1f && UnityEngine.Random.value > chance)
            {
                return;
            }

            this._nextVoiceTime = now + (VoiceCooldown * UnityEngine.Random.Range(0.8f, 1.2f));
            this._cache.Bot?.BotTalk?.TrySay(phrase);
        }

        #endregion
    }
}
