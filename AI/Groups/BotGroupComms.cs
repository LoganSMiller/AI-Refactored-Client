// <auto-generated>
//   AI-Refactored: BotGroupComms.cs (Beyond Diamond, BotBrain Edition)
//   Full squad comms, anti-echo, and context logic driven by BotBrain only.
//   Bulletproof error isolation; never disables group, only locally mutes on error.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles human-realistic squad communication: fallback shouts, frags, suppression, looting, squad requests.
    /// All cooldowns, proximity, anti-echo, and eligibility are enforced via BotBrain tick only.
    /// No logic disables the group; errors only ever mute locally. Multiplayer/headless safe.
    /// </summary>
    public sealed class BotGroupComms
    {
        #region Constants

        private const float AllyRadius = 12.0f;
        private const float VoiceCooldown = 4.5f;
        private const float GroupEchoCooldown = 3.2f;
        private static readonly float AllyRadiusSqr = AllyRadius * AllyRadius;

        #endregion

        #region Fields

        private readonly BotComponentCache _cache;
        private readonly BotOwner _bot;
        private float _nextVoiceTime;
        private float _nextGroupCommsAllowed;
        private static string _lastCommsPhrase = "";
        private static float _lastCommsTime = -99f;

        #endregion

        #region Properties

        public bool IsMuted { get; set; }

        #endregion

        #region Constructor

        public BotGroupComms(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                IsMuted = true;
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            IsMuted = false;
            _nextVoiceTime = 0f;
            _nextGroupCommsAllowed = 0f;
        }

        #endregion

        #region BotBrain Tick Integration

        /// <summary>
        /// No self-tick; all anti-echo, phrase resets, or group cooldowns must be advanced externally.
        /// Optionally call this from BotBrain for periodic comms cleanup.
        /// </summary>
        public void Tick(float deltaTime)
        {
            // Optional: Periodic reset of static echo/phrase if desired for group safety.
            if (Time.time - _lastCommsTime > 9.0f)
                _lastCommsPhrase = "";
        }

        #endregion

        #region Public API

        public void Say(EPhraseTrigger phrase)
        {
            if (!IsEligible()) return;
            TryTriggerVoice(phrase, 1.0f, false);
        }

        public void SayFallback() => TryTriggerVoice(EPhraseTrigger.GetBack, 0.53f, true);

        public void SayFragOut() => TryTriggerVoice(EPhraseTrigger.OnEnemyGrenade, HasNearbyAlly() ? 0.78f : 0.0f, true);

        public void SayHit() => TryTriggerVoice(EPhraseTrigger.OnBeingHurt, UnityEngine.Random.Range(0.62f, 0.84f), true);

        public void SaySuppression() => TryTriggerVoice(EPhraseTrigger.Suppress, 0.68f, true);

        // --- LOOT & SQUAD PHRASES ---

        public void SayLootRequest() => TryTriggerVoice(EPhraseTrigger.GoLoot, 0.95f, true);

        public void SayScanArea() => TryTriggerVoice(EPhraseTrigger.Look, 0.88f, true);

        public void SayLootMove() => TryTriggerVoice(EPhraseTrigger.OnPosition, 0.84f, true);

        public void SayLootOpen() => TryTriggerVoice(EPhraseTrigger.OnLoot, 0.8f, true);

        public void SayLootSearch() => TryTriggerVoice(EPhraseTrigger.LootGeneric, 0.72f, true);

        public void SayLootTake() => TryTriggerVoice(EPhraseTrigger.LootContainer, 0.85f, true);

        public void SayLootDone() => TryTriggerVoice(EPhraseTrigger.GoodWork, 0.67f, true);

        public void SayLootGiveUp() => TryTriggerVoice(EPhraseTrigger.LootNothing, 0.82f, true);

        // --- Group loot arbitration logic hooks (expandable for full squad AI) ---

        public bool TryRequestLootClaim(string profileId)
        {
            if (Time.time < _nextGroupCommsAllowed)
                return false;
            _nextGroupCommsAllowed = Time.time + GroupEchoCooldown;
            return true;
        }

        public void RegisterLootTaken(string lootId) { /* Reserved for full squad registry. */ }

        public bool IsGroupLooting() { return false; }

        #endregion

        #region Internal Logic

        private bool IsEligible()
        {
            return !IsMuted &&
                   _bot != null &&
                   _bot.BotTalk != null &&
                   _bot.GetPlayer != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer.IsAI &&
                   !FikaHeadlessDetector.IsHeadless;
        }

        private void TryTriggerVoice(EPhraseTrigger phrase, float chance, bool groupComms)
        {
            if (!IsEligible()) return;

            float now = Time.time;
            if (now < _nextVoiceTime) return;

            // Anti-group-echo: prevent same phrase spam squad-wide.
            if (groupComms && _lastCommsPhrase == phrase.ToString() && now - _lastCommsTime < GroupEchoCooldown)
                return;

            if (chance < 1f && UnityEngine.Random.value > chance)
                return;

            _nextVoiceTime = now + (VoiceCooldown * UnityEngine.Random.Range(0.85f, 1.17f));
            try
            {
                _bot.BotTalk.TrySay(phrase);
                if (groupComms)
                {
                    _lastCommsPhrase = phrase.ToString();
                    _lastCommsTime = now;
                }
            }
            catch { IsMuted = true; }
        }

        private bool HasNearbyAlly()
        {
            if (_bot?.Profile?.Info == null)
                return false;

            string groupId = _bot.Profile.Info.GroupId;
            if (string.IsNullOrEmpty(groupId))
                return false;

            Vector3 myPos = _bot.Position;
            foreach (BotComponentCache other in BotCacheUtility.AllActiveBots())
            {
                if (ReferenceEquals(other, _cache) || other?.Bot?.Profile?.Info == null || other.Bot.IsDead)
                    continue;
                if (!groupId.Equals(other.Bot.Profile.Info.GroupId, StringComparison.Ordinal))
                    continue;
                Vector3 delta = other.Bot.Position - myPos;
                if (delta.sqrMagnitude <= AllyRadiusSqr)
                    return true;
            }
            return false;
        }

        #endregion
    }
}
