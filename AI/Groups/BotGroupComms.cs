// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All squad comms logic is strictly human-like: organic cadence, real proximity checks, context-aware. No global fallback ever.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using System.Linq;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls squad VO communication: fallback shouts, frag calls, suppression alerts, and injury.
    /// Uses cooldowns, proximity checks, and chance modifiers to sound natural.
    /// Bulletproof: All failures are isolated and only mute comms for this bot, never break AIRefactored.
    /// </summary>
    public sealed class BotGroupComms
    {
        #region Constants

        private const float AllyRadius = 12.0f;
        private const float VoiceCooldown = 4.5f;
        private static readonly float AllyRadiusSqr = AllyRadius * AllyRadius;

        #endregion

        #region Fields

        private readonly BotComponentCache _cache;
        private readonly BotOwner _bot;
        private float _nextVoiceTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets whether this bot is muted (cannot issue group VO lines).
        /// </summary>
        public bool IsMuted { get; set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Constructs the BotGroupComms component for a given bot cache.
        /// </summary>
        /// <param name="cache">The bot's component cache.</param>
        public BotGroupComms(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                IsMuted = true;
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            IsMuted = false;
            _nextVoiceTime = 0f;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Attempts to say a VO line for the given phrase, if eligible.
        /// </summary>
        /// <param name="phrase">The VO phrase to say.</param>
        public void Say(EPhraseTrigger phrase)
        {
            if (IsMuted)
                return;

            if (!IsEligible())
            {
                IsMuted = true;
                return;
            }

            TryTriggerVoice(phrase, 1.0f);
        }

        /// <summary>
        /// Triggers a fallback voice line (e.g. "Get back!").
        /// </summary>
        public void SayFallback()
        {
            TryTriggerVoice(EPhraseTrigger.GetBack, 0.53f);
        }

        /// <summary>
        /// Triggers a grenade warning if an ally is nearby.
        /// </summary>
        public void SayFragOut()
        {
            float chance = HasNearbyAlly() ? 0.78f : 0.0f;
            TryTriggerVoice(EPhraseTrigger.OnEnemyGrenade, chance);
        }

        /// <summary>
        /// Triggers a hit reaction VO line.
        /// </summary>
        public void SayHit()
        {
            TryTriggerVoice(EPhraseTrigger.OnBeingHurt, UnityEngine.Random.Range(0.62f, 0.84f));
        }

        /// <summary>
        /// Triggers a suppression VO line.
        /// </summary>
        public void SaySuppression()
        {
            TryTriggerVoice(EPhraseTrigger.Suppress, 0.68f);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks if the bot is eligible to issue VO lines (not dead, not headless, has required components).
        /// </summary>
        private bool IsEligible()
        {
            return _bot != null
                   && !_bot.IsDead
                   && _bot.GetPlayer != null
                   && _bot.GetPlayer.IsAI
                   && _bot.BotTalk != null
                   && !FikaHeadlessDetector.IsHeadless;
        }

        /// <summary>
        /// Attempts to play a voice line with a cooldown and chance check.
        /// </summary>
        /// <param name="phrase">The phrase trigger.</param>
        /// <param name="chance">Chance between 0 and 1 to play the line.</param>
        private void TryTriggerVoice(EPhraseTrigger phrase, float chance)
        {
            if (IsMuted || _bot == null || _bot.BotTalk == null)
                return;

            float now = Time.time;
            if (now < _nextVoiceTime)
                return;

            if (chance < 1.0f && UnityEngine.Random.value > chance)
                return;

            _nextVoiceTime = now + (VoiceCooldown * UnityEngine.Random.Range(0.85f, 1.17f));

            try
            {
                _bot.BotTalk.TrySay(phrase);
            }
            catch
            {
                IsMuted = true;
            }
        }

        /// <summary>
        /// Returns true if another alive ally with the same groupId is nearby.
        /// </summary>
        private bool HasNearbyAlly()
        {
            if (_bot == null || _bot.Profile == null || _bot.Profile.Info == null)
                return false;

            string groupId = _bot.Profile.Info.GroupId;
            if (string.IsNullOrEmpty(groupId))
                return false;

            Vector3 myPos = _bot.Position;

            foreach (BotComponentCache other in BotCacheUtility.AllActiveBots())
            {
                if (ReferenceEquals(other, _cache) || other.Bot == null || other.Bot.IsDead)
                    continue;

                Profile profile = other.Bot.Profile;
                if (profile == null || profile.Info == null)
                    continue;

                if (!groupId.Equals(profile.Info.GroupId, StringComparison.Ordinal))
                    continue;

                Vector3 delta = other.Bot.Position - myPos;
                if (delta.sqrMagnitude <= AllyRadiusSqr)
                    return true;
            }

            return false;
        }

        #endregion
    }
}
