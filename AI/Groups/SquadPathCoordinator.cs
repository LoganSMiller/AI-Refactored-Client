// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls squad-based movement offsets to prevent clumping and collisions.
    /// Dynamically spaces bots based on squad size and formation pattern.
    /// </summary>
    public sealed class SquadPathCoordinator
    {
        #region Constants

        private const float BaseSpacing = 2.25f;
        private const float MaxSpacing = 6.5f;
        private const float MinSpacing = 1.25f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotsGroup _group;
        private Vector3 _cachedOffset = Vector3.zero;
        private int _lastGroupSize = -1;
        private bool _offsetInitialized;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the squad path coordinator for the given bot cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            BotOwner bot = cache.Bot;
            BotsGroup group = bot.BotsGroup;

            if (bot == null || group == null || bot.IsDead)
            {
                return;
            }

            this._bot = bot;
            this._group = group;
            this._offsetInitialized = false;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies squad offset to the shared destination.
        /// </summary>
        public Vector3 ApplyOffsetTo(Vector3 sharedDestination)
        {
            return sharedDestination + this.GetCurrentOffset();
        }

        /// <summary>
        /// Returns cached or recalculated offset for this bot.
        /// </summary>
        public Vector3 GetCurrentOffset()
        {
            if (this._bot == null || this._group == null)
            {
                return Vector3.zero;
            }

            int currentSize = this._group.MembersCount;

            if (!this._offsetInitialized || currentSize != this._lastGroupSize)
            {
                this._cachedOffset = this.ComputeOffset();
                this._offsetInitialized = true;
                this._lastGroupSize = currentSize;
            }

            return this._cachedOffset;
        }

        #endregion

        #region Private Methods

        private Vector3 ComputeOffset()
        {
            if (this._group == null || this._group.MembersCount < 2 || this._bot == null || this._bot.IsDead)
            {
                return Vector3.zero;
            }

            int index = GetBotIndexInGroup(this._bot, this._group);
            if (index < 0)
            {
                return Vector3.zero;
            }

            string profileId = this._bot.ProfileId;
            if (profileId.Length == 0)
            {
                return Vector3.zero;
            }

            int squadSize = this._group.MembersCount;
            int seed = unchecked(profileId.GetHashCode() ^ squadSize);
            Random.InitState(seed);

            float spacing = Mathf.Clamp(BaseSpacing + Random.Range(-0.4f, 0.4f), MinSpacing, MaxSpacing);
            float angleStep = 360f / squadSize;
            float angle = index * angleStep + Random.Range(-8f, 8f);
            float rad = angle * Mathf.Deg2Rad;

            return new Vector3(Mathf.Cos(rad), 0f, Mathf.Sin(rad)) * spacing;
        }

        private static int GetBotIndexInGroup(BotOwner bot, BotsGroup group)
        {
            string profileId = bot.ProfileId;
            if (profileId.Length == 0)
            {
                return -1;
            }

            int count = group.MembersCount;
            for (int i = 0; i < count; i++)
            {
                BotOwner member = group.Member(i);
                if (member != null && !member.IsDead && member.ProfileId == profileId)
                {
                    return i;
                }
            }

            return -1;
        }

        #endregion
    }
}
