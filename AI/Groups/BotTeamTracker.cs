// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System.Collections.Generic;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks and manages squads of bots by GroupId for tactical queries and squad-level behaviors.
    /// Used by fallback, VO coordination, and dynamic routing systems.
    /// </summary>
    public static class BotTeamTracker
    {
        #region Fields

        private static readonly Dictionary<string, List<BotOwner>> Groups = new Dictionary<string, List<BotOwner>>(32);
        private static readonly List<BotOwner> TempBuffer = new List<BotOwner>(8);

        #endregion

        #region Public API

        public static void Clear()
        {
            Groups.Clear();
        }

        public static Dictionary<string, List<BotOwner>> GetAllGroups()
        {
            Dictionary<string, List<BotOwner>> copy = new Dictionary<string, List<BotOwner>>(Groups.Count);

            foreach (KeyValuePair<string, List<BotOwner>> pair in Groups)
            {
                copy[pair.Key] = new List<BotOwner>(pair.Value);
            }

            return copy;
        }

        public static List<BotOwner> GetGroup(string groupId)
        {
            TempBuffer.Clear();

            if (!string.IsNullOrEmpty(groupId) && Groups.TryGetValue(groupId, out List<BotOwner> members))
            {
                for (int i = 0; i < members.Count; i++)
                {
                    BotOwner bot = members[i];
                    if (bot != null && !bot.IsDead)
                    {
                        Player player = bot.GetPlayer;
                        if (player != null && player.IsAI)
                        {
                            TempBuffer.Add(bot);
                        }
                    }
                }
            }

            return new List<BotOwner>(TempBuffer);
        }

        public static void PrintGroups()
        {
            foreach (KeyValuePair<string, List<BotOwner>> entry in Groups)
            {
                Debug.Log("[BotTeamTracker] Group '" + entry.Key + "': " + entry.Value.Count + " member(s)");
            }
        }

        public static void Register(string groupId, BotOwner bot)
        {
            if (string.IsNullOrEmpty(groupId) || bot == null || bot.IsDead)
            {
                return;
            }

            Player player = bot.GetPlayer;
            if (player == null || !player.IsAI)
            {
                return;
            }

            List<BotOwner> list;
            if (!Groups.TryGetValue(groupId, out list))
            {
                list = new List<BotOwner>(4);
                Groups[groupId] = list;
            }

            if (!list.Contains(bot))
            {
                list.Add(bot);
            }
        }

        public static void RegisterFromBot(BotOwner bot)
        {
            if (bot == null || bot.IsDead)
            {
                return;
            }

            Player player = bot.GetPlayer;
            if (player == null)
            {
                return;
            }

            Profile profile = player.Profile;
            if (profile == null || profile.Info == null)
            {
                return;
            }

            string groupId = profile.Info.GroupId;
            if (!string.IsNullOrEmpty(groupId))
            {
                Register(groupId, bot);
            }
        }

        public static void Unregister(BotOwner bot)
        {
            if (bot == null)
            {
                return;
            }

            string groupToRemove = null;

            foreach (KeyValuePair<string, List<BotOwner>> kvp in Groups)
            {
                List<BotOwner> list = kvp.Value;
                if (list.Remove(bot))
                {
                    if (list.Count == 0)
                    {
                        groupToRemove = kvp.Key;
                    }

                    break;
                }
            }

            if (!string.IsNullOrEmpty(groupToRemove))
            {
                Groups.Remove(groupToRemove);
            }
        }

        #endregion
    }
}
