// <auto-generated>
//   AI-Refactored: BotTeamLogic.cs (Ultimate Realism – Squad Tactical Coordinator Edition, June 2025)
//   Realistic squad-level behavior: fallback, enemy comms, mission sync, regrouping, async isolation.
//   Bulletproof: All errors isolated, no coroutine use, BotBrain-integrated, headless/client safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;
    using static AIRefactored.AI.Missions.BotMissionController;
    using Random = UnityEngine.Random;

    /// <summary>
    /// Squad-level tactical coordinator for fallback, enemy sync, regrouping, and mission broadcasts.
    /// Driven by BotBrain. All errors are bulletproofed and all async logic is self-contained.
    /// </summary>
    public sealed class BotTeamLogic
    {
        #region Constants

        private const float RegroupJitterRadius = 1.5f;
        private const float RegroupThresholdSqr = 6.25f;
        private const float MoveCooldown = 0.9f;
        private const float MinMoveDeltaSqr = 0.22f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly Dictionary<BotOwner, CombatStateMachine> _combatMap = new Dictionary<BotOwner, CombatStateMachine>(8);
        private readonly List<BotOwner> _teammates = new List<BotOwner>(8);

        // Movement anti-spam
        private Vector3 _lastMoveTarget = Vector3.zero;
        private float _lastMoveTime = -1000f;

        #endregion

        #region Constructor

        public BotTeamLogic(BotOwner bot)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
                throw new ArgumentException("[BotTeamLogic] Invalid bot owner.");
            _bot = bot;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Shares an enemy with all squadmates (delayed, async, bulletproof).
        /// </summary>
        public static void AddEnemy(BotOwner bot, IPlayer target)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || target == null || bot.BotsGroup == null)
                    return;

                Player resolved = EFTPlayerUtil.ResolvePlayerById(target.ProfileId);
                if (!EFTPlayerUtil.IsValid(resolved))
                    return;

                IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(resolved);
                for (int i = 0; i < bot.BotsGroup.MembersCount; i++)
                {
                    BotOwner mate = bot.BotsGroup.Member(i);
                    if (EFTPlayerUtil.IsValidBotOwner(mate) && mate != bot)
                    {
                        float delay = Random.Range(0.07f, 0.27f);
                        _ = TriggerDelayedRegisterEnemy(mate, safe, delay);
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// Broadcasts a squad mission (voice) to all squadmates (async, no spam, safe).
        /// </summary>
        public static void BroadcastMissionType(BotOwner bot, MissionType mission)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || bot.BotsGroup == null)
                    return;

                for (int i = 0; i < bot.BotsGroup.MembersCount; i++)
                {
                    BotOwner mate = bot.BotsGroup.Member(i);
                    if (EFTPlayerUtil.IsValidBotOwner(mate) && mate != bot && mate.BotTalk != null)
                    {
                        float delay = Random.Range(0.13f, 0.37f);
                        _ = Task.Run(async () =>
                        {
                            try
                            {
                                await Task.Delay((int)(delay * 1000f));
                                if (Random.value < 0.72f)
                                    mate.BotTalk.TrySay(EPhraseTrigger.Cooperation);
                            }
                            catch { }
                        });
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// Broadcasts fallback/retreat to all squadmates (async, bulletproof).
        /// </summary>
        public void BroadcastFallback(Vector3 retreatPoint)
        {
            float now = Time.time;
            foreach (var kv in _combatMap)
            {
                BotOwner mate = kv.Key;
                CombatStateMachine fsm = kv.Value;

                if (EFTPlayerUtil.IsValidBotOwner(mate) && mate != _bot && fsm != null)
                {
                    float delay = Random.Range(0.11f, 0.29f);
                    _ = TriggerDelayedFallback(fsm, retreatPoint, now, delay);
                }
            }
        }

        /// <summary>
        /// Shares an enemy (target) with all teammates (async, bulletproof).
        /// </summary>
        public void ShareTarget(IPlayer enemy)
        {
            try
            {
                if (enemy == null || string.IsNullOrEmpty(enemy.ProfileId))
                    return;

                Player resolved = EFTPlayerUtil.ResolvePlayerById(enemy.ProfileId);
                if (!EFTPlayerUtil.IsValid(resolved))
                    return;

                IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(resolved);
                for (int i = 0; i < _teammates.Count; i++)
                {
                    BotOwner mate = _teammates[i];
                    if (EFTPlayerUtil.IsValidBotOwner(mate))
                    {
                        float delay = Random.Range(0.07f, 0.23f);
                        _ = TriggerDelayedRegisterEnemy(mate, safe, delay);
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// Regroups squadmates toward the squad center, NavMesh/one-shot, anti-spam.
        /// </summary>
        public void CoordinateMovement()
        {
            try
            {
                if (_bot == null || _bot.IsDead || _teammates.Count == 0)
                    return;

                Vector3 center = Vector3.zero;
                int count = 0;

                for (int i = 0; i < _teammates.Count; i++)
                {
                    BotOwner mate = _teammates[i];
                    if (EFTPlayerUtil.IsValidBotOwner(mate))
                    {
                        center += mate.Position;
                        count++;
                    }
                }

                if (count == 0)
                    return;

                center /= count;
                Vector3 jitter = UnityEngine.Random.insideUnitSphere * RegroupJitterRadius;
                jitter.y = 0f;

                Vector3 target = center + jitter;
                float now = Time.time;

                // One-shot movement: only issue if sufficiently different and cooldown passed
                if ((target - _lastMoveTarget).sqrMagnitude > MinMoveDeltaSqr && now - _lastMoveTime > MoveCooldown)
                {
                    if (BotNavHelper.TryGetNavMeshSafePosition(target, _bot.Position, out Vector3 navSafe))
                    {
                        Vector3 drifted = BotMovementHelper.ApplyMicroDrift(navSafe, _bot.ProfileId, Time.frameCount,
                            BotRegistry.GetOrGenerate(_bot.ProfileId, PersonalityType.Balanced, _bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault));
                        BotMovementHelper.SmoothMoveToSafe(_bot, drifted, slow: true, cohesion: 1f);

                        _lastMoveTarget = drifted;
                        _lastMoveTime = now;
                    }
                }
            }
            catch { }
        }

        /// <summary>
        /// Wires squadmate combat FSM for coordinated events.
        /// </summary>
        public void InjectCombatState(BotOwner mate, CombatStateMachine fsm)
        {
            if (EFTPlayerUtil.IsValidBotOwner(mate) && fsm != null && mate != _bot && !_combatMap.ContainsKey(mate))
                _combatMap[mate] = fsm;
        }

        /// <summary>
        /// Assigns all teammates for use in comms and regroup logic.
        /// </summary>
        public void SetTeammates(List<BotOwner> allBots)
        {
            _teammates.Clear();
            try
            {
                var selfProfile = _bot.GetPlayer?.Profile?.Info;
                if (selfProfile == null) return;

                string groupId = selfProfile.GroupId;
                if (string.IsNullOrEmpty(groupId)) return;

                for (int i = 0; i < allBots.Count; i++)
                {
                    BotOwner other = allBots[i];
                    if (EFTPlayerUtil.IsValidBotOwner(other) &&
                        other != _bot &&
                        other.GetPlayer?.Profile?.Info?.GroupId == groupId)
                    {
                        _teammates.Add(other);
                    }
                }
            }
            catch { }
        }

        #endregion

        #region Internals

        private static async Task TriggerDelayedRegisterEnemy(BotOwner receiver, IPlayer enemy, float delay)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(receiver) || enemy == null)
                return;

            try
            {
                await Task.Delay((int)(delay * 1000f));
                ForceRegisterEnemy(receiver, enemy);
            }
            catch { }
        }

        private static async Task TriggerDelayedFallback(CombatStateMachine fsm, Vector3 point, float now, float delay)
        {
            if (fsm == null) return;
            try
            {
                await Task.Delay((int)(delay * 1000f));
                fsm.TriggerFallback(point, now);
            }
            catch { }
        }

        private static void ForceRegisterEnemy(BotOwner receiver, IPlayer enemy)
        {
            try
            {
                if (receiver.BotsGroup != null && !receiver.BotsGroup.IsEnemy(enemy))
                    receiver.BotsGroup.AddEnemy(enemy, EBotEnemyCause.zryachiyLogic);

                if (!receiver.EnemiesController.EnemyInfos.ContainsKey(enemy))
                {
                    var settings = new BotSettingsClass((Player)enemy, receiver.BotsGroup, EBotEnemyCause.zryachiyLogic);
                    receiver.Memory?.AddEnemy(enemy, settings, false);
                }
            }
            catch { }
        }

        #endregion
    }
}
