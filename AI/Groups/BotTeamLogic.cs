// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;
    using static AIRefactored.AI.Missions.BotMissionController;
    using Random = UnityEngine.Random;

    /// <summary>
    /// Coordinates squad-level tactical behavior including fallback broadcast, enemy sharing, and regrouping.
    /// </summary>
    public sealed class BotTeamLogic
    {
        #region Constants

        private const float RegroupJitterRadius = 1.5f;
        private const float RegroupThreshold = 2.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly Dictionary<BotOwner, CombatStateMachine> _combatMap = new Dictionary<BotOwner, CombatStateMachine>(8);
        private readonly List<BotOwner> _teammates = new List<BotOwner>(8);

        #endregion

        #region Constructor

        public BotTeamLogic(BotOwner bot)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
            {
                throw new ArgumentException("Invalid or non-AI bot owner.");
            }

            _bot = bot;
        }

        #endregion

        #region Public Methods

        public static void AddEnemy(BotOwner bot, IPlayer target)
        {
            if (bot == null || target == null || bot.IsDead || bot.Memory == null || bot.BotsGroup == null)
            {
                return;
            }

            Player resolved = EFTPlayerUtil.ResolvePlayerById(target.ProfileId);
            if (!EFTPlayerUtil.IsValid(resolved))
            {
                return;
            }

            IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(resolved);
            int count = bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner mate = bot.BotsGroup.Member(i);
                if (mate != null && mate != bot && !mate.IsDead && mate.Memory != null)
                {
                    ForceRegisterEnemy(mate, safe);
                }
            }
        }

        public static void BroadcastMissionType(BotOwner bot, MissionType mission)
        {
            if (bot == null || bot.IsDead || FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            BotsGroup group = bot.BotsGroup;
            if (group == null)
            {
                return;
            }

            int count = group.MembersCount;
            for (int i = 0; i < count; i++)
            {
                BotOwner mate = group.Member(i);
                if (mate != null && mate != bot && !mate.IsDead && mate.BotTalk != null)
                {
                    mate.BotTalk.TrySay(EPhraseTrigger.Cooperation);
                }
            }
        }

        public void BroadcastFallback(Vector3 retreatPoint)
        {
            foreach (KeyValuePair<BotOwner, CombatStateMachine> pair in _combatMap)
            {
                BotOwner mate = pair.Key;
                CombatStateMachine fsm = pair.Value;

                if (mate != null && !mate.IsDead && mate != _bot)
                {
                    TriggerDelayedFallback(fsm, retreatPoint);
                }
            }
        }

        public void CoordinateMovement()
        {
            if (_bot.IsDead || _teammates.Count == 0)
            {
                return;
            }

            Vector3 center = Vector3.zero;
            int count = 0;

            for (int i = 0; i < _teammates.Count; i++)
            {
                BotOwner mate = _teammates[i];
                if (mate != null && !mate.IsDead)
                {
                    center += mate.Position;
                    count++;
                }
            }

            if (count == 0)
            {
                return;
            }

            center /= count;
            Vector3 jitter = Random.insideUnitSphere * RegroupJitterRadius;
            jitter.y = 0f;

            Vector3 target = center + jitter;
            float distSqr = (_bot.Position - target).sqrMagnitude;

            if (distSqr > RegroupThreshold * RegroupThreshold)
            {
                BotMovementHelper.SmoothMoveTo(_bot, target, false);
            }
        }

        public void InjectCombatState(BotOwner mate, CombatStateMachine fsm)
        {
            if (mate != null && fsm != null && mate != _bot && !_combatMap.ContainsKey(mate))
            {
                _combatMap.Add(mate, fsm);
            }
        }

        public void SetTeammates(List<BotOwner> allBots)
        {
            _teammates.Clear();

            Player player = _bot.GetPlayer;
            if (player == null || player.Profile == null || player.Profile.Info == null)
            {
                return;
            }

            string groupId = player.Profile.Info.GroupId;
            if (string.IsNullOrEmpty(groupId))
            {
                return;
            }

            for (int i = 0; i < allBots.Count; i++)
            {
                BotOwner other = allBots[i];
                if (other != null && other != _bot && !other.IsDead)
                {
                    Player otherPlayer = other.GetPlayer;
                    if (otherPlayer != null &&
                        otherPlayer.Profile != null &&
                        otherPlayer.Profile.Info != null &&
                        otherPlayer.Profile.Info.GroupId == groupId)
                    {
                        _teammates.Add(other);
                    }
                }
            }
        }

        public void ShareTarget(IPlayer enemy)
        {
            if (enemy == null)
            {
                return;
            }

            string profileId = enemy.ProfileId;
            if (string.IsNullOrEmpty(profileId))
            {
                return;
            }

            Player resolved = EFTPlayerUtil.ResolvePlayerById(profileId);
            if (!EFTPlayerUtil.IsValid(resolved))
            {
                return;
            }

            IPlayer safe = EFTPlayerUtil.AsSafeIPlayer(resolved);

            for (int i = 0; i < _teammates.Count; i++)
            {
                BotOwner mate = _teammates[i];
                if (mate != null && !mate.IsDead)
                {
                    ForceRegisterEnemy(mate, safe);
                }
            }
        }

        #endregion

        #region Internal Helpers

        private static void ForceRegisterEnemy(BotOwner receiver, IPlayer enemy)
        {
            if (receiver.BotsGroup != null && !receiver.BotsGroup.IsEnemy(enemy))
            {
                receiver.BotsGroup.AddEnemy(enemy, EBotEnemyCause.zryachiyLogic);
            }

            if (!receiver.EnemiesController.EnemyInfos.ContainsKey(enemy))
            {
                var settings = new BotSettingsClass((Player)enemy, receiver.BotsGroup, EBotEnemyCause.zryachiyLogic);
                receiver.Memory.AddEnemy(enemy, settings, false);
            }
        }

        private static void TriggerDelayedFallback(CombatStateMachine fsm, Vector3 point)
        {
            Task.Run(async () =>
            {
                try
                {
                    await Task.Delay(Random.Range(150, 400));
                    fsm.TriggerFallback(point);
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError("[BotTeamLogic] Error in fallback delay: " + ex.Message);
                }
            });
        }

        #endregion
    }
}
