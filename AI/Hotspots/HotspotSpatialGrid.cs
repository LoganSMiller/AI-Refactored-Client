// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Uniform grid-based spatial index for fast hotspot lookups in small or flat maps.
    /// Used as a fallback when quadtree is unnecessary or too sparse.
    /// </summary>
    public class HotspotSpatialGrid
    {
        private readonly float _cellSize;

        private readonly Dictionary<Vector2Int, List<HotspotRegistry.Hotspot>> _grid =
            new Dictionary<Vector2Int, List<HotspotRegistry.Hotspot>>(128);

        /// <summary>
        /// Initializes a new instance of the <see cref="HotspotSpatialGrid"/> class.
        /// </summary>
        /// <param name="cellSize">Minimum 1f recommended. Determines lookup resolution.</param>
        public HotspotSpatialGrid(float cellSize = 10f)
        {
            this._cellSize = Mathf.Max(1f, cellSize);
        }

        /// <summary>
        /// Inserts a hotspot into the spatial index.
        /// </summary>
        /// <param name="hotspot">Hotspot to insert.</param>
        public void Insert(HotspotRegistry.Hotspot hotspot)
        {
            Vector2Int cell = this.WorldToCell(hotspot.Position);

            if (!this._grid.TryGetValue(cell, out List<HotspotRegistry.Hotspot>? list))
            {
                list = new List<HotspotRegistry.Hotspot>(4);
                this._grid[cell] = list;
            }

            list.Add(hotspot);
        }

        /// <summary>
        /// Returns all hotspots within radius of a given world position.
        /// </summary>
        /// <param name="worldPos">World-space origin for the query.</param>
        /// <param name="radius">Radius in meters.</param>
        /// <param name="filter">Optional predicate to restrict results.</param>
        /// <returns>List of nearby hotspots.</returns>
        public List<HotspotRegistry.Hotspot> Query(
            Vector3 worldPos,
            float radius,
            Predicate<HotspotRegistry.Hotspot>? filter = null)
        {
            List<HotspotRegistry.Hotspot> results = new List<HotspotRegistry.Hotspot>(16);
            float radiusSq = radius * radius;

            Vector2Int center = this.WorldToCell(worldPos);
            int cellRadius = Mathf.CeilToInt(radius / this._cellSize);

            for (int dx = -cellRadius; dx <= cellRadius; dx++)
            {
                for (int dz = -cellRadius; dz <= cellRadius; dz++)
                {
                    Vector2Int check = new Vector2Int(center.x + dx, center.y + dz);

                    if (this._grid.TryGetValue(check, out List<HotspotRegistry.Hotspot>? list))
                    {
                        for (int i = 0; i < list.Count; i++)
                        {
                            HotspotRegistry.Hotspot h = list[i];
                            if ((h.Position - worldPos).sqrMagnitude <= radiusSq &&
                                (filter == null || filter(h)))
                            {
                                results.Add(h);
                            }
                        }
                    }
                }
            }

            return results;
        }

        private Vector2Int WorldToCell(Vector3 worldPos)
        {
            int x = Mathf.FloorToInt(worldPos.x / this._cellSize);
            int z = Mathf.FloorToInt(worldPos.z / this._cellSize);
            return new Vector2Int(x, z);
        }
    }
}
