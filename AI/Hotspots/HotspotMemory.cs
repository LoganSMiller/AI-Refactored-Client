// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Tracks recently visited hotspot positions on a per-map basis.
    /// Prevents bots from repeatedly targeting the same tactical zones.
    /// </summary>
    internal static class HotspotMemory
    {
        #region Fields

        /// <summary>
        /// Structure: mapId → (position → lastVisitTime).
        /// </summary>
        private static readonly Dictionary<string, Dictionary<Vector3, float>> VisitedMap = new Dictionary<string, Dictionary<Vector3, float>>(8);

        private const float DefaultVisitLifetime = float.MaxValue;

        #endregion

        #region Public API

        /// <summary>
        /// Clears all stored visited hotspots across all maps.
        /// Should be called on raid or map unload.
        /// </summary>
        public static void Clear()
        {
            VisitedMap.Clear();
        }

        /// <summary>
        /// Returns 1 if this hotspot was ever visited; otherwise returns 0.
        /// </summary>
        /// <param name="mapId">The current map identifier.</param>
        /// <param name="position">The hotspot position.</param>
        public static float GetVisitCount(string mapId, Vector3 position)
        {
            return WasVisitedWithin(mapId, position, DefaultVisitLifetime) ? 1f : 0f;
        }

        /// <summary>
        /// Marks a hotspot as visited at current Time.time.
        /// </summary>
        /// <param name="mapId">Current map name.</param>
        /// <param name="position">Hotspot location.</param>
        public static void MarkVisited(string mapId, Vector3 position)
        {
            if (mapId.Length == 0)
            {
                return;
            }

            Dictionary<Vector3, float> mapVisits;
            if (!VisitedMap.TryGetValue(mapId, out mapVisits))
            {
                mapVisits = new Dictionary<Vector3, float>(32);
                VisitedMap[mapId] = mapVisits;
            }

            mapVisits[position] = Time.time;
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Checks if a hotspot was visited within the last given number of seconds.
        /// </summary>
        /// <param name="mapId">Current map ID.</param>
        /// <param name="position">Hotspot position.</param>
        /// <param name="cooldown">Cooldown window in seconds.</param>
        private static bool WasVisitedWithin(string mapId, Vector3 position, float cooldown)
        {
            Dictionary<Vector3, float> mapVisits;
            if (!VisitedMap.TryGetValue(mapId, out mapVisits))
            {
                return false;
            }

            float visitTime;
            if (!mapVisits.TryGetValue(position, out visitTime))
            {
                return false;
            }

            return Time.time - visitTime < cooldown;
        }

        #endregion
    }
}
