// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Spatial quadtree for hotspot lookup acceleration.
    /// Supports efficient spatial queries to reduce search time for hotspot scanning.
    /// </summary>
    public class HotspotQuadtree
    {
        private const int MaxDepth = 6;
        private const int MaxPerNode = 8;

        private readonly Node _root;

        /// <summary>
        /// Initializes a new instance of the <see cref="HotspotQuadtree"/> class with a world center and size.
        /// </summary>
        /// <param name="center">2D center of the quadtree region.</param>
        /// <param name="size">World-space length/width of the square region.</param>
        public HotspotQuadtree(Vector2 center, float size)
        {
            float half = size * 0.5f;
            Rect bounds = new Rect(center.x - half, center.y - half, size, size);
            this._root = new Node(bounds, 0);
        }

        /// <summary>
        /// Inserts a hotspot into the spatial quadtree.
        /// </summary>
        /// <param name="hotspot">Hotspot to insert.</param>
        public void Insert(HotspotRegistry.Hotspot hotspot)
        {
            if (hotspot == null)
            {
                return;
            }

            this.Insert(this._root, hotspot);
        }

        /// <summary>
        /// Returns all hotspots within a given world-space radius of a point.
        /// </summary>
        /// <param name="worldPosition">3D position to search around.</param>
        /// <param name="radius">Radius of interest.</param>
        /// <param name="filter">Optional filter predicate.</param>
        /// <returns>List of matching hotspots.</returns>
        public List<HotspotRegistry.Hotspot> Query(Vector3 worldPosition, float radius, Predicate<HotspotRegistry.Hotspot>? filter = null)
        {
            List<HotspotRegistry.Hotspot> result = new List<HotspotRegistry.Hotspot>(16);
            float radiusSq = radius * radius;
            this.Query(this._root, worldPosition, radiusSq, result, filter);
            return result;
        }

        private void Insert(Node node, HotspotRegistry.Hotspot hotspot)
        {
            Vector2 pos2D = new Vector2(hotspot.Position.x, hotspot.Position.z);

            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.Points.Add(hotspot);

                if (node.Points.Count > MaxPerNode && node.Depth < MaxDepth)
                {
                    this.Subdivide(node);

                    if (node.Children.Length > 0)
                    {
                        foreach (HotspotRegistry.Hotspot point in node.Points)
                        {
                            for (int j = 0; j < 4; j++)
                            {
                                this.Insert(node.Children[j], point);
                            }
                        }

                        node.Points.Clear();
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    this.Insert(node.Children[i], hotspot);
                }
            }
        }

        private void Query(Node node, Vector3 worldPosition, float radiusSq, List<HotspotRegistry.Hotspot> result, Predicate<HotspotRegistry.Hotspot>? filter)
        {
            Vector2 pos2D = new Vector2(worldPosition.x, worldPosition.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect queryRect = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(queryRect))
            {
                return;
            }

            if (node.IsLeaf)
            {
                foreach (HotspotRegistry.Hotspot h in node.Points)
                {
                    if ((h.Position - worldPosition).sqrMagnitude <= radiusSq &&
                        (filter == null || filter(h)))
                    {
                        result.Add(h);
                    }
                }
            }
            else
            {
                for (int i = 0; i < node.Children.Length; i++)
                {
                    this.Query(node.Children[i], worldPosition, radiusSq, result, filter);
                }
            }
        }

        private void Subdivide(Node node)
        {
            Node[] children = new Node[4];

            float halfW = node.Bounds.width * 0.5f;
            float halfH = node.Bounds.height * 0.5f;
            float x = node.Bounds.x;
            float y = node.Bounds.y;
            int d = node.Depth + 1;

            children[0] = new Node(new Rect(x, y, halfW, halfH), d);                   // Bottom Left
            children[1] = new Node(new Rect(x + halfW, y, halfW, halfH), d);           // Bottom Right
            children[2] = new Node(new Rect(x, y + halfH, halfW, halfH), d);           // Top Left
            children[3] = new Node(new Rect(x + halfW, y + halfH, halfW, halfH), d);   // Top Right

            node.SetChildren(children);
        }

        /// <summary>
        /// Internal quadtree node used for spatial partitioning.
        /// </summary>
        private sealed class Node
        {
            public Node(Rect bounds, int depth)
            {
                this.Bounds = bounds;
                this.Depth = depth;
                this.Points = new List<HotspotRegistry.Hotspot>(8);
                this.Children = Array.Empty<Node>();
            }

            public Rect Bounds { get; }

            public int Depth { get; }

            public List<HotspotRegistry.Hotspot> Points { get; }

            public Node[] Children { get; private set; }

            public bool IsLeaf => this.Children.Length == 0;

            public void SetChildren(Node[] children)
            {
                this.Children = children ?? Array.Empty<Node>();
            }
        }
    }
}
