// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;

    /// <summary>
    /// Spatial quadtree for hotspot lookup acceleration.
    /// Supports efficient spatial queries to reduce search time for hotspot scanning.
    /// </summary>
    public sealed class HotspotQuadtree
    {
        #region Constants

        private const int MaxDepth = 6;
        private const int MaxPerNode = 8;

        #endregion

        #region Fields

        private readonly Node _root;

        #endregion

        #region Constructor

        public HotspotQuadtree(Vector2 center, float size)
        {
            float half = size * 0.5f;
            Rect bounds = new Rect(center.x - half, center.y - half, size, size);
            _root = new Node(bounds, 0);
        }

        #endregion

        #region Public API

        /// <summary>
        /// Inserts a hotspot into the quadtree.
        /// </summary>
        public void Insert(HotspotRegistry.Hotspot hotspot)
        {
            if (hotspot == null)
            {
                return;
            }

            Insert(_root, hotspot);
        }

        /// <summary>
        /// Queries all hotspots within the radius of a 3D world position.
        /// Uses pooled result list which must be returned by caller.
        /// </summary>
        public List<HotspotRegistry.Hotspot> Query(Vector3 position, float radius, Predicate<HotspotRegistry.Hotspot> filter)
        {
            // Rent a list of HotspotRegistry.Hotspot using the pool.
            List<HotspotRegistry.Hotspot> results = TempListPool.Rent<HotspotRegistry.Hotspot>();

            float radiusSq = radius * radius;
            Query(_root, position, radiusSq, results, filter);

            return results;
        }

        #endregion

        #region Internal Logic

        private void Insert(Node node, HotspotRegistry.Hotspot hotspot)
        {
            Vector2 pos2D = new Vector2(hotspot.Position.x, hotspot.Position.z);
            if (!node.Bounds.Contains(pos2D))
            {
                return;
            }

            if (node.IsLeaf)
            {
                node.Points.Add(hotspot);

                if (node.Points.Count > MaxPerNode && node.Depth < MaxDepth)
                {
                    Subdivide(node);

                    List<HotspotRegistry.Hotspot> existing = node.Points;
                    for (int i = 0; i < existing.Count; i++)
                    {
                        HotspotRegistry.Hotspot h = existing[i];
                        for (int j = 0; j < 4; j++)
                        {
                            Insert(node.Children[j], h);
                        }
                    }

                    node.Points.Clear();
                }

                return;
            }

            for (int i = 0; i < node.Children.Length; i++)
            {
                Insert(node.Children[i], hotspot);
            }
        }

        private void Query(Node node, Vector3 position, float radiusSq, List<HotspotRegistry.Hotspot> results, Predicate<HotspotRegistry.Hotspot> filter)
        {
            Vector2 pos2D = new Vector2(position.x, position.z);
            float radius = Mathf.Sqrt(radiusSq);
            Rect queryBounds = new Rect(pos2D.x - radius, pos2D.y - radius, radius * 2f, radius * 2f);

            if (!node.Bounds.Overlaps(queryBounds))
            {
                return;
            }

            if (node.IsLeaf)
            {
                for (int i = 0; i < node.Points.Count; i++)
                {
                    HotspotRegistry.Hotspot h = node.Points[i];
                    Vector3 delta = h.Position - position;
                    if (delta.sqrMagnitude <= radiusSq && (filter == null || filter(h)))
                    {
                        results.Add(h);
                    }
                }

                return;
            }

            for (int i = 0; i < node.Children.Length; i++)
            {
                Query(node.Children[i], position, radiusSq, results, filter);
            }
        }

        private void Subdivide(Node node)
        {
            float halfW = node.Bounds.width * 0.5f;
            float halfH = node.Bounds.height * 0.5f;
            float x = node.Bounds.x;
            float y = node.Bounds.y;
            int depth = node.Depth + 1;

            node.SetChildren(new[]
            {
                new Node(new Rect(x, y, halfW, halfH), depth),
                new Node(new Rect(x + halfW, y, halfW, halfH), depth),
                new Node(new Rect(x, y + halfH, halfW, halfH), depth),
                new Node(new Rect(x + halfW, y + halfH, halfW, halfH), depth)
            });
        }

        #endregion

        #region Node Class

        private sealed class Node
        {
            public readonly Rect Bounds;
            public readonly int Depth;
            public readonly List<HotspotRegistry.Hotspot> Points;
            public Node[] Children;

            private static readonly Node[] EmptyArray = new Node[0];

            public Node(Rect bounds, int depth)
            {
                Bounds = bounds;
                Depth = depth;
                Points = new List<HotspotRegistry.Hotspot>(8);
                Children = EmptyArray;
            }

            public bool IsLeaf => Children.Length == 0;

            public void SetChildren(Node[] children)
            {
                Children = children != null ? children : EmptyArray;
            }
        }

        #endregion
    }
}
