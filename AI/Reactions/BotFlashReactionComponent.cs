// <auto-generated>
//   AI-Refactored: BotFlashReactionComponent.cs (Beyond Diamond, BotBrain Edition)
//   All failures are logged locally; no subsystem can trigger fallback to vanilla EFT AI.
//   Squad voice/comm integration, full pooling, zero allocations, SPT/FIKA safe.
//   StyleCop/ReSharper and AIRefactored-compliant.
// </auto-generated>

namespace AIRefactored.AI.Reactions
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using UnityEngine;
    using EFT;

    /// <summary>
    /// Handles bot reactions to intense light exposure (e.g., flashlights or flashbangs).
    /// Applies suppression, triggers scored fallback movement, and panic if threshold reached.
    /// All failures are locally isolated; never trigger fallback to vanilla AI.
    /// </summary>
    public sealed class BotFlashReactionComponent
    {
        #region Constants

        private const float FallbackDistance = 5f;
        private const float FallbackJitter = 1.25f;
        private const float MaxSuppressionDuration = 5f;
        private const float MinSuppressionDuration = 1f;
        private const float ReactionCooldown = 0.5f;
        private const float TriggerIntensityThreshold = 0.35f;
        private const float SquadEchoCooldown = 2.5f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private float _lastTriggerTime = -1f;
        private float _suppressedUntil = -1f;
        private float _lastSquadEchoTime = -5f;
        private bool _failed;

        #endregion

        #region Initialization

        /// <summary>
        /// Links this flash reaction handler to the active bot's shared component cache.
        /// </summary>
        /// <param name="cache">Bot component cache for this bot (never null).</param>
        public void Initialize(BotComponentCache cache)
        {
            try
            {
                _cache = cache ?? throw new ArgumentNullException(nameof(cache));
                _failed = false;
            }
            catch (Exception ex)
            {
                _cache = null;
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Initialize exception: {ex}");
            }
        }

        #endregion

        #region Runtime

        /// <summary>
        /// Returns true if the bot is still suppressed from a flash reaction.
        /// </summary>
        public bool IsSuppressed()
        {
            return !_failed && Time.time < _suppressedUntil;
        }

        /// <summary>
        /// Called every frame from BotBrain. Updates suppression state and performs exposure checks.
        /// </summary>
        /// <param name="time">Current time value from caller.</param>
        public void Tick(float time)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                if (time >= _suppressedUntil)
                    _suppressedUntil = -1f;

                Transform head = BotCacheUtility.Head(_cache);
                if (head == null)
                    return;

                var lights = FlashlightRegistry.GetLastKnownFlashlightPositions();
                if (lights == null || lights.Count == 0)
                    return;

                for (int i = 0, count = lights.Count; i < count; i++)
                {
                    if (FlashlightRegistry.IsExposingBot(head, out Light light) && light != null)
                    {
                        float score = FlashLightUtils.CalculateFlashScore(light.transform, head, 20f);
                        if (score >= TriggerIntensityThreshold)
                        {
                            TriggerSuppression(score, time);
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Tick exception: {ex}");
            }
        }

        /// <summary>
        /// Triggers suppression, fallback, and panic based on light strength and composure.
        /// </summary>
        /// <param name="strength">Intensity of the flash, [0,1] range is normal.</param>
        /// <param name="now">Current time.</param>
        public void TriggerSuppression(float strength = 0.6f, float now = -1f)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                BotOwner bot = _cache.Bot;
                if (bot.IsDead)
                    return;

                Player player = bot.GetPlayer;
                if (player == null || !player.IsAI || player.IsYourPlayer)
                    return;

                float time = now > 0f ? now : Time.time;
                if (time - _lastTriggerTime < ReactionCooldown)
                    return;

                _lastTriggerTime = time;

                float composure = 1f;
                if (_cache.PanicHandler != null)
                {
                    try { composure = Mathf.Clamp01(_cache.PanicHandler.GetComposureLevel()); }
                    catch { composure = 1f; }
                }

                float scaled = Mathf.Clamp01(strength) * composure;
                float duration = Mathf.Lerp(MinSuppressionDuration, MaxSuppressionDuration, scaled);
                _suppressedUntil = time + duration;

                // Fully squad-aware fallback and comm
                TriggerFallback(bot, time);
                TriggerPanic(_cache, time);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerSuppression exception: {ex}");
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Calculates and executes bot fallback movement due to flash suppression.
        /// Uses only EFT-native navigation. Never triggers fallback to vanilla AI.
        /// </summary>
        private void TriggerFallback(BotOwner bot, float now)
        {
            try
            {
                if (bot == null)
                    return;

                Vector3 dir = bot.LookDirection.normalized;
                Vector3 fallback = bot.Position - dir * FallbackDistance + UnityEngine.Random.insideUnitSphere * FallbackJitter;
                fallback.y = bot.Position.y;

                // Dynamic squad-aware fallback: attempt to avoid squad overlap, use NavMesh sampling
                var group = bot.BotsGroup;
                if (group != null && group.MembersCount > 1)
                {
                    Vector3 squadCenter = Vector3.zero;
                    int squadCount = 0;
                    for (int i = 0; i < group.MembersCount; i++)
                    {
                        BotOwner mate = group.Member(i);
                        if (mate != null && !mate.IsDead)
                        {
                            squadCenter += mate.Position;
                            squadCount++;
                        }
                    }
                    if (squadCount > 0)
                        squadCenter /= squadCount;
                    // Nudge fallback further from squad centroid
                    fallback += (fallback - squadCenter).normalized * 1.7f;
                }

                BotMovementHelper.SmoothMoveToSafe(bot, fallback);

                // Squad echo comm: trigger fallback echo if enough time has passed
                if (_cache?.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                {
                    _cache.GroupBehavior.GroupSync.ShareFallbackToSquad(fallback);
                    _lastSquadEchoTime = now;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerFallback failed: {ex}");
            }
        }

        /// <summary>
        /// Triggers bot panic event if a valid panic handler is present, and squad-aware panic echo.
        /// </summary>
        private void TriggerPanic(BotComponentCache cache, float now)
        {
            try
            {
                if (BotPanicUtility.TryGetPanicComponent(cache, out BotPanicHandler panic) && panic != null)
                {
                    panic.TriggerPanic();

                    // Optional: squad panic echo (emotional contagion)
                    if (cache.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                    {
                        cache.GroupBehavior.GroupSync.ShareDangerToSquad(cache.Position);
                        _lastSquadEchoTime = now;
                    }
                }

                // Optional: squad voice comm (simulate panic/alert chatter)
                cache.GroupComms?.SaySuppression();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerPanic failed: {ex}");
            }
        }

        #endregion
    }
}
