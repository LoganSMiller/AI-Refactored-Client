// <auto-generated>
//   AI-Refactored: BotFlashReactionComponent.cs (Ultra-Platinum++ Beyond Diamond, Arbitration/Event Overlay, June 2025)
//   SYSTEMATICALLY MANAGED. Anti-teleport, anti-skate: event/overlay-only, pooled, squad/headless safe. Never disables, never allocs in hot path.
//   No tick/coroutine movement. All moves are intent/overlay/cooldown only, never raw vector or transform. SPT/FIKA/headless/client parity.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Reactions
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using UnityEngine;
    using EFT;

    /// <summary>
    /// Handles bot reaction to intense light (flashbangs/flashlights) via overlays only.
    /// No per-tick/coroutine movement. All movement is intent/overlay-driven, pooled, and NavMesh-sampled.
    /// Bulletproof: never disables, never teleports/skates, always deduped. Squad-echo, panic, suppression.
    /// </summary>
    public sealed class BotFlashReactionComponent
    {
        #region Constants

        private const float FallbackDistance = 5.0f;
        private const float FallbackJitter = 1.27f;
        private const float MaxSuppressionDuration = 5.2f;
        private const float MinSuppressionDuration = 1.05f;
        private const float ReactionCooldown = 0.52f;
        private const float TriggerIntensityThreshold = 0.33f;
        private const float SquadEchoCooldown = 2.5f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private float _lastTriggerTime = -1f;
        private float _suppressedUntil = -1f;
        private float _lastSquadEchoTime = -6f;
        private bool _failed;

        #endregion

        #region Initialization

        /// <summary>
        /// Attach and initialize this flash reaction component (pooled).
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            try
            {
                _cache = cache ?? throw new ArgumentNullException(nameof(cache));
                _failed = false;
                _lastTriggerTime = -1f;
                _suppressedUntil = -1f;
                _lastSquadEchoTime = -6f;
            }
            catch (Exception ex)
            {
                _cache = null;
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Initialize exception: {ex}");
            }
        }

        #endregion

        #region Runtime

        public bool IsSuppressed()
        {
            return !_failed && Time.time < _suppressedUntil;
        }

        /// <summary>
        /// Overlay/event-only tick from BotBrain. No per-frame movement or disables. Pooled, deduped.
        /// </summary>
        public void Tick(float time)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                if (time >= _suppressedUntil)
                    _suppressedUntil = -1f;

                Transform head = BotCacheUtility.Head(_cache);
                if (head == null) return;

                var lights = FlashlightRegistry.GetLastKnownFlashlightPositions();
                if (lights == null || lights.Count == 0) return;

                for (int i = 0; i < lights.Count; i++)
                {
                    Vector3 lightPos = lights[i];
                    Vector3 eyePos = head.position + Vector3.up * 0.22f;
                    Vector3 toBot = eyePos - lightPos;
                    if (toBot.sqrMagnitude > 784f) continue; // >28m
                    float angle = Vector3.Angle(-head.forward, toBot);
                    if (angle > 35f) continue;

                    if (Physics.Raycast(lightPos, toBot.normalized, out RaycastHit hit, toBot.magnitude + 0.1f, AIRefactoredLayerMasks.LineOfSightMask))
                    {
                        if (ReferenceEquals(hit.transform, head) || ReferenceEquals(hit.collider.transform, head))
                        {
                            TriggerSuppression(1.0f, time);
                            return;
                        }
                    }
                    else if (toBot.magnitude < 4.6f && angle < 16.7f)
                    {
                        TriggerSuppression(0.85f, time);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Tick exception: {ex}");
            }
        }

        /// <summary>
        /// Triggers suppression/fallback/panic overlays (event only, never disables or teleports).
        /// </summary>
        public void TriggerSuppression(float strength = 0.6f, float now = -1f)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                BotOwner bot = _cache.Bot;
                if (bot.IsDead) return;
                Player player = bot.GetPlayer;
                if (player == null || !player.IsAI || player.IsYourPlayer) return;

                float time = now > 0f ? now : Time.time;
                if (time - _lastTriggerTime < ReactionCooldown) return;
                _lastTriggerTime = time;

                float composure = 1f;
                if (_cache.PanicHandler != null)
                {
                    try { composure = Mathf.Clamp01(_cache.PanicHandler.GetComposureLevel()); } catch { }
                }

                float scaled = Mathf.Clamp01(strength) * composure;
                float duration = Mathf.Lerp(MinSuppressionDuration, MaxSuppressionDuration, scaled);
                _suppressedUntil = time + duration;

                TriggerFallback(bot, time, scaled);
                TriggerPanic(_cache, time);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerSuppression exception: {ex}");
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Issues one fallback intent, overlay/event/cooldown only, always NavMesh-sampled, never disables/teleports.
        /// </summary>
        private void TriggerFallback(BotOwner bot, float now, float scale)
        {
            try
            {
                if (bot == null) return;

                Vector3 dir = bot.LookDirection.sqrMagnitude > 0.01f ? bot.LookDirection.normalized : bot.Transform.forward;
                Vector3 fallbackIntent = bot.Position - dir * (FallbackDistance + UnityEngine.Random.Range(-FallbackJitter, FallbackJitter));
                fallbackIntent.y = bot.Position.y;

                // Squad-aware fallback offset
                var group = bot.BotsGroup;
                if (group != null && group.MembersCount > 1)
                {
                    Vector3 squadCenter = Vector3.zero;
                    int squadCount = 0;
                    for (int i = 0; i < group.MembersCount; i++)
                    {
                        BotOwner mate = group.Member(i);
                        if (mate != null && !mate.IsDead)
                        {
                            squadCenter += mate.Position;
                            squadCount++;
                        }
                    }
                    if (squadCount > 0)
                        squadCenter /= squadCount;

                    Vector3 squadOffset = (fallbackIntent - squadCenter).normalized * (1.65f + UnityEngine.Random.Range(-0.3f, 0.33f));
                    fallbackIntent += squadOffset;
                }

                BotMovementHelper.SmoothMoveToSafe(bot, fallbackIntent, slow: true);

                // Squad echo (overlay/event/cooldown)
                if (_cache?.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                {
                    _cache.GroupBehavior.GroupSync.ShareFallbackToSquad(fallbackIntent, now);
                    _lastSquadEchoTime = now;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerFallback failed: {ex}");
            }
        }

        /// <summary>
        /// Panic overlay (event only). Uses BotPanicUtility.TryGet for maximum safety.
        /// </summary>
        private void TriggerPanic(BotComponentCache cache, float now)
        {
            try
            {
                if (BotPanicUtility.TryGet(cache, out BotPanicHandler panic) && panic != null)
                {
                    panic.TriggerPanic();

                    if (cache.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                    {
                        cache.GroupBehavior.GroupSync.ShareDangerToSquad(cache.Position, now);
                        _lastSquadEchoTime = now;
                    }
                }

                cache.GroupComms?.SaySuppression();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerPanic failed: {ex}");
            }
        }

        #endregion
    }
}
