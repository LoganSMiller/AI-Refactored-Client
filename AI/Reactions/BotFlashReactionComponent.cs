// <auto-generated>
//   AI-Refactored: BotFlashReactionComponent.cs (Beyond Diamond, Movement/Event-Only AIRefactored Compliant, June 2025)
//   No tick/coroutine movement, never disables or falls back. All moves are event/intent/cooldown, pooled and overlay-only.
//   SPT/FIKA/headless/client parity. Squad comms, panic, suppression fully integrated. No allocations or state leaks.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Reactions
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using UnityEngine;
    using EFT;

    /// <summary>
    /// Handles bot reactions to intense light exposure (flashlights, flashbangs).
    /// Only overlays suppression, fallback, panic. Never tick-moves, disables, or teleports.
    /// </summary>
    public sealed class BotFlashReactionComponent
    {
        #region Constants

        private const float FallbackDistance = 5f;
        private const float FallbackJitter = 1.25f;
        private const float MaxSuppressionDuration = 5f;
        private const float MinSuppressionDuration = 1f;
        private const float ReactionCooldown = 0.5f;
        private const float TriggerIntensityThreshold = 0.35f;
        private const float SquadEchoCooldown = 2.5f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private float _lastTriggerTime = -1f;
        private float _suppressedUntil = -1f;
        private float _lastSquadEchoTime = -5f;
        private bool _failed;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache cache)
        {
            try
            {
                _cache = cache ?? throw new ArgumentNullException(nameof(cache));
                _failed = false;
            }
            catch (Exception ex)
            {
                _cache = null;
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Initialize exception: {ex}");
            }
        }

        #endregion

        #region Runtime

        public bool IsSuppressed()
        {
            return !_failed && Time.time < _suppressedUntil;
        }

        /// <summary>
        /// Called by BotBrain. Only overlays suppression. Never moves the bot per-frame.
        /// </summary>
        public void Tick(float time)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                if (time >= _suppressedUntil)
                    _suppressedUntil = -1f;

                Transform head = BotCacheUtility.Head(_cache);
                if (head == null)
                    return;

                var lights = FlashlightRegistry.GetLastKnownFlashlightPositions();
                if (lights == null || lights.Count == 0)
                    return;

                foreach (Vector3 lightPos in lights)
                {
                    Vector3 eyePos = head.position + Vector3.up * 0.22f;
                    Vector3 toBot = eyePos - lightPos;
                    if (toBot.sqrMagnitude > 784f) continue; // >28m
                    float angle = Vector3.Angle(-head.forward, toBot);
                    if (angle > 35f) continue;

                    if (Physics.Raycast(lightPos, toBot.normalized, out RaycastHit hit, toBot.magnitude + 0.1f, AIRefactoredLayerMasks.LineOfSightMask))
                    {
                        if (ReferenceEquals(hit.transform, head) || ReferenceEquals(hit.collider.transform, head))
                        {
                            TriggerSuppression(1f, time);
                            return;
                        }
                    }
                    else if (toBot.magnitude < 4.5f && angle < 17f)
                    {
                        TriggerSuppression(0.85f, time);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] Tick exception: {ex}");
            }
        }

        /// <summary>
        /// Triggers bot suppression and fallback/echo as a one-shot event.
        /// </summary>
        public void TriggerSuppression(float strength = 0.6f, float now = -1f)
        {
            if (_failed || _cache == null || _cache.Bot == null)
                return;

            try
            {
                BotOwner bot = _cache.Bot;
                if (bot.IsDead) return;
                Player player = bot.GetPlayer;
                if (player == null || !player.IsAI || player.IsYourPlayer) return;

                float time = now > 0f ? now : Time.time;
                if (time - _lastTriggerTime < ReactionCooldown) return;
                _lastTriggerTime = time;

                float composure = 1f;
                if (_cache.PanicHandler != null)
                {
                    try { composure = Mathf.Clamp01(_cache.PanicHandler.GetComposureLevel()); }
                    catch { composure = 1f; }
                }

                float scaled = Mathf.Clamp01(strength) * composure;
                float duration = Mathf.Lerp(MinSuppressionDuration, MaxSuppressionDuration, scaled);
                _suppressedUntil = time + duration;

                TriggerFallback(bot, time);
                TriggerPanic(_cache, time);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerSuppression exception: {ex}");
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Issues a *single* fallback move (intent-only), squad-safe, always using SmoothMoveToSafe.
        /// </summary>
        private void TriggerFallback(BotOwner bot, float now)
        {
            try
            {
                if (bot == null) return;

                Vector3 dir = bot.LookDirection.sqrMagnitude > 0.01f ? bot.LookDirection.normalized : bot.Transform.forward;
                Vector3 fallback = bot.Position - dir * FallbackDistance + UnityEngine.Random.insideUnitSphere * FallbackJitter;
                fallback.y = bot.Position.y;

                var group = bot.BotsGroup;
                if (group != null && group.MembersCount > 1)
                {
                    Vector3 squadCenter = Vector3.zero;
                    int squadCount = 0;
                    for (int i = 0; i < group.MembersCount; i++)
                    {
                        BotOwner mate = group.Member(i);
                        if (mate != null && !mate.IsDead)
                        {
                            squadCenter += mate.Position;
                            squadCount++;
                        }
                    }
                    if (squadCount > 0)
                        squadCenter /= squadCount;
                    fallback += (fallback - squadCenter).normalized * 1.7f;
                }

                // Movement overlay: always use cooldown-checked, event-only move
                if (BotMovementHelper.ShouldMove(bot, fallback))
                    BotMovementHelper.SmoothMoveToSafe(bot, fallback, slow: true);

                if (_cache?.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                {
                    _cache.GroupBehavior.GroupSync.ShareFallbackToSquad(fallback, now);
                    _lastSquadEchoTime = now;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerFallback failed: {ex}");
            }
        }

        /// <summary>
        /// Panic overlay (event-only). Never disables or blocks bot, never tick logic.
        /// </summary>
        private void TriggerPanic(BotComponentCache cache, float now)
        {
            try
            {
                if (BotPanicUtility.TryGetPanicComponent(cache, out BotPanicHandler panic) && panic != null)
                {
                    panic.TriggerPanic();

                    if (cache.GroupBehavior?.GroupSync != null && now - _lastSquadEchoTime > SquadEchoCooldown)
                    {
                        cache.GroupBehavior.GroupSync.ShareDangerToSquad(cache.Position, now);
                        _lastSquadEchoTime = now;
                    }
                }

                cache.GroupComms?.SaySuppression();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotFlashReactionComponent] TriggerPanic failed: {ex}");
            }
        }

        #endregion
    }
}
