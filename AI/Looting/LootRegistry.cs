// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Centralized registry for all lootables in the scene.
    /// Bots query this instead of using expensive GetComponent calls.
    /// Tracks timestamp metadata for prioritization and pruning.
    /// </summary>
    public static class LootRegistry
    {
        #region Internal Structs

        private struct TrackedContainer
        {
            public LootableContainer Container;
            public Transform Transform;
            public float LastSeenTime;
        }

        private struct TrackedItem
        {
            public LootItem Item;
            public Transform Transform;
            public float LastSeenTime;
        }

        #endregion

        #region Buffers

        private static readonly List<TrackedContainer> ContainerBuffer = new List<TrackedContainer>(32);
        private static readonly List<TrackedItem> ItemBuffer = new List<TrackedItem>(64);
        private static readonly List<LootableContainer> ContainerResultBuffer = new List<LootableContainer>(32);
        private static readonly List<LootItem> ItemResultBuffer = new List<LootItem>(64);

        #endregion

        #region State

        private static readonly Dictionary<LootableContainer, TrackedContainer> Containers = new Dictionary<LootableContainer, TrackedContainer>(64);
        private static readonly Dictionary<LootItem, TrackedItem> Items = new Dictionary<LootItem, TrackedItem>(128);
        private static readonly HashSet<int> WatchedInstanceIds = new HashSet<int>();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        public static void Initialize()
        {
            Clear();
            LootRuntimeWatcher.Reset();
            Logger.LogDebug("[LootRegistry] Initialized loot tracking system.");
        }

        public static void Clear()
        {
            Containers.Clear();
            Items.Clear();
            WatchedInstanceIds.Clear();
            ContainerBuffer.Clear();
            ItemBuffer.Clear();
            ContainerResultBuffer.Clear();
            ItemResultBuffer.Clear();
        }

        public static List<LootableContainer> GetAllContainers()
        {
            ContainerResultBuffer.Clear();

            foreach (var kv in Containers)
            {
                if (kv.Key != null)
                {
                    ContainerResultBuffer.Add(kv.Key);
                }
            }

            return ContainerResultBuffer;
        }

        public static List<LootItem> GetAllItems()
        {
            ItemResultBuffer.Clear();

            foreach (var kv in Items)
            {
                if (kv.Key != null)
                {
                    ItemResultBuffer.Add(kv.Key);
                }
            }

            return ItemResultBuffer;
        }

        public static List<LootableContainer> GetNearbyContainers(Vector3 origin, float radius)
        {
            ContainerResultBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (var kv in Containers)
            {
                Transform tf = kv.Value.Transform;
                if (tf == null)
                {
                    continue;
                }

                Vector3 pos = tf.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    ContainerResultBuffer.Add(kv.Value.Container);
                }
            }

            return ContainerResultBuffer;
        }

        public static List<LootItem> GetNearbyItems(Vector3 origin, float radius)
        {
            ItemResultBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (var kv in Items)
            {
                Transform tf = kv.Value.Transform;
                if (tf == null)
                {
                    continue;
                }

                Vector3 pos = tf.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    ItemResultBuffer.Add(kv.Value.Item);
                }
            }

            return ItemResultBuffer;
        }

        public static void RegisterContainer(LootableContainer container)
        {
            if (container == null || container.transform == null)
            {
                return;
            }

            Containers[container] = new TrackedContainer
            {
                Container = container,
                Transform = container.transform,
                LastSeenTime = Time.time
            };

            InjectWatcherIfNeeded(container.gameObject);
        }

        public static void RegisterItem(LootItem item)
        {
            if (item == null || item.transform == null)
            {
                return;
            }

            Items[item] = new TrackedItem
            {
                Item = item,
                Transform = item.transform,
                LastSeenTime = Time.time
            };

            InjectWatcherIfNeeded(item.gameObject);
        }

        public static bool TryGetContainerByName(string name, out LootableContainer found)
        {
            found = null;
            if (string.IsNullOrEmpty(name))
            {
                return false;
            }

            foreach (var kv in Containers)
            {
                if (kv.Key != null && string.Equals(kv.Key.name, name, StringComparison.OrdinalIgnoreCase))
                {
                    found = kv.Key;
                    return true;
                }
            }

            return false;
        }

        public static bool TryGetItemByName(string name, out LootItem found)
        {
            found = null;
            if (string.IsNullOrEmpty(name))
            {
                return false;
            }

            foreach (var kv in Items)
            {
                if (kv.Key != null && string.Equals(kv.Key.name, name, StringComparison.OrdinalIgnoreCase))
                {
                    found = kv.Key;
                    return true;
                }
            }

            return false;
        }

        public static bool TryGetLastSeenTime(LootableContainer container, out float time)
        {
            TrackedContainer tracked;
            if (container != null && Containers.TryGetValue(container, out tracked))
            {
                time = tracked.LastSeenTime;
                return true;
            }

            time = 0f;
            return false;
        }

        public static bool TryGetLastSeenTime(LootItem item, out float time)
        {
            TrackedItem tracked;
            if (item != null && Items.TryGetValue(item, out tracked))
            {
                time = tracked.LastSeenTime;
                return true;
            }

            time = 0f;
            return false;
        }

        public static void PruneStale(float olderThanSeconds)
        {
            float cutoff = Time.time - olderThanSeconds;

            Containers.RemoveWhere(pair => pair.Value.LastSeenTime < cutoff);
            Items.RemoveWhere(pair => pair.Value.LastSeenTime < cutoff);
        }

        #endregion

        #region Internal Logic

        private static void InjectWatcherIfNeeded(GameObject go)
        {
            if (go == null)
            {
                return;
            }

            int id = go.GetInstanceID();
            if (WatchedInstanceIds.Contains(id))
            {
                return;
            }

            WatchedInstanceIds.Add(id);
            LootRuntimeWatcher.Register(go);
        }

        #endregion
    }

    internal static class DictionaryRemoveWhereExtensions
    {
        public static void RemoveWhere<TKey, TValue>(this Dictionary<TKey, TValue> dict, Func<KeyValuePair<TKey, TValue>, bool> predicate)
        {
            if (dict == null || predicate == null)
            {
                return;
            }

            List<TKey> toRemove = new List<TKey>();
            foreach (KeyValuePair<TKey, TValue> kv in dict)
            {
                if (predicate(kv))
                {
                    toRemove.Add(kv.Key);
                }
            }

            for (int i = 0; i < toRemove.Count; i++)
            {
                dict.Remove(toRemove[i]);
            }
        }
    }
}
