// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Centralized registry for all lootables in the scene.
    /// Bots query this instead of using expensive GetComponent calls.
    /// Injects runtime watchers where needed for dynamic state tracking.
    /// </summary>
    public static class LootRegistry
    {
        #region Buffers

        private static readonly List<LootableContainer> _containerBuffer = new List<LootableContainer>(32);
        private static readonly List<LootItem> _itemBuffer = new List<LootItem>(64);

        #endregion

        #region State

        private static readonly HashSet<LootableContainer> _containers = new HashSet<LootableContainer>();
        private static readonly HashSet<LootItem> _items = new HashSet<LootItem>();
        private static readonly HashSet<GameObject> _watchedObjects = new HashSet<GameObject>();


        #endregion

        #region Public API

        public static List<LootableContainer> GetAllContainers()
        {
            return new List<LootableContainer>(_containers);
        }

        public static List<LootItem> GetAllItems()
        {
            return new List<LootItem>(_items);
        }

        public static void Clear()
        {
            _containers.Clear();
            _items.Clear();
            _watchedObjects.Clear();
            _containerBuffer.Clear();
            _itemBuffer.Clear();
        }

        public static List<LootableContainer> GetNearbyContainers(Vector3 origin, float radius)
        {
            _containerBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (LootableContainer container in _containers)
            {
                if (container == null || container.transform == null)
                {
                    continue;
                }

                Vector3 pos = container.transform.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    _containerBuffer.Add(container);
                }
            }

            return new List<LootableContainer>(_containerBuffer);
        }

        public static List<LootItem> GetNearbyItems(Vector3 origin, float radius)
        {
            _itemBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (LootItem item in _items)
            {
                if (item == null || item.transform == null)
                {
                    continue;
                }

                Vector3 pos = item.transform.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    _itemBuffer.Add(item);
                }
            }

            return new List<LootItem>(_itemBuffer);
        }

        public static void RegisterContainer(LootableContainer? container)
        {
            if (container == null || _containers.Contains(container))
            {
                return;
            }

            _containers.Add(container);
            InjectWatcherIfNeeded(container.gameObject);
        }

        public static void RegisterItem(LootItem? item)
        {
            if (item == null || _items.Contains(item))
            {
                return;
            }

            _items.Add(item);
            InjectWatcherIfNeeded(item.gameObject);
        }

        public static bool TryGetContainerByName(string? name, out LootableContainer? found)
        {
            found = null;

            if (string.IsNullOrEmpty(name))
            {
                return false;
            }

            foreach (LootableContainer container in _containers)
            {
                if (container != null && container.name != null &&
                    container.name.Equals(name, StringComparison.OrdinalIgnoreCase))
                {
                    found = container;
                    return true;
                }
            }

            return false;
        }

        public static bool TryGetItemByName(string? name, out LootItem? found)
        {
            found = null;

            if (string.IsNullOrEmpty(name))
            {
                return false;
            }

            foreach (LootItem item in _items)
            {
                if (item != null && item.name != null &&
                    item.name.Equals(name, StringComparison.OrdinalIgnoreCase))
                {
                    found = item;
                    return true;
                }
            }

            return false;
        }

        #endregion

        #region Internal Logic

        private static void InjectWatcherIfNeeded(GameObject? go)
        {
            if (go == null || _watchedObjects.Contains(go))
            {
                return;
            }

            go.AddComponent<LootRuntimeWatcher>();
            _watchedObjects.Add(go);
        }

        #endregion
    }
}
