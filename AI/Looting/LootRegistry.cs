// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Centralized registry for all lootables in the scene.
    /// Bots query this instead of using expensive GetComponent calls.
    /// Injects runtime watchers where needed for dynamic state tracking.
    /// </summary>
    public static class LootRegistry
    {
        private static readonly List<LootableContainer> ContainerBuffer = new List<LootableContainer>(32);
        private static readonly HashSet<LootableContainer> Containers = new HashSet<LootableContainer>(128);

        private static readonly List<LootItem> ItemBuffer = new List<LootItem>(64);
        private static readonly HashSet<LootItem> Items = new HashSet<LootItem>(256);

        private static readonly HashSet<GameObject> WatchedObjects = new HashSet<GameObject>(256);

        /// <summary>
        /// Gets a copy of all known lootable containers.
        /// </summary>
        public static List<LootableContainer> GetAllContainers()
        {
            return new List<LootableContainer>(Containers);
        }

        /// <summary>
        /// Gets a copy of all known lootable loose items.
        /// </summary>
        public static List<LootItem> GetAllItems()
        {
            return new List<LootItem>(Items);
        }

        /// <summary>
        /// Clears all container, item, and watcher references.
        /// </summary>
        public static void Clear()
        {
            Containers.Clear();
            Items.Clear();
            WatchedObjects.Clear();
            ContainerBuffer.Clear();
            ItemBuffer.Clear();
        }

        /// <summary>
        /// Returns all lootable containers within a radius of a position.
        /// </summary>
        public static List<LootableContainer> GetNearbyContainers(Vector3 origin, float radius)
        {
            ContainerBuffer.Clear();
            float radiusSq = radius * radius;

            foreach (LootableContainer container in Containers)
            {
                if (container == null)
                {
                    continue;
                }

                float distSq = (container.transform.position - origin).sqrMagnitude;
                if (distSq <= radiusSq)
                {
                    ContainerBuffer.Add(container);
                }
            }

            return new List<LootableContainer>(ContainerBuffer);
        }

        /// <summary>
        /// Returns all loose loot items within a radius of a position.
        /// </summary>
        public static List<LootItem> GetNearbyItems(Vector3 origin, float radius)
        {
            ItemBuffer.Clear();
            float radiusSq = radius * radius;

            foreach (LootItem item in Items)
            {
                if (item == null)
                {
                    continue;
                }

                float distSq = (item.transform.position - origin).sqrMagnitude;
                if (distSq <= radiusSq)
                {
                    ItemBuffer.Add(item);
                }
            }

            return new List<LootItem>(ItemBuffer);
        }

        /// <summary>
        /// Adds a new lootable container to the registry and injects runtime tracking.
        /// </summary>
        public static void RegisterContainer(LootableContainer? container)
        {
            if (container == null)
            {
                return;
            }

            if (!Containers.Add(container))
            {
                return;
            }

            InjectWatcherIfNeeded(container.gameObject);
        }

        /// <summary>
        /// Adds a loose loot item to the registry and injects runtime tracking.
        /// </summary>
        public static void RegisterItem(LootItem? item)
        {
            if (item == null)
            {
                return;
            }

            if (!Items.Add(item))
            {
                return;
            }

            InjectWatcherIfNeeded(item.gameObject);
        }

        /// <summary>
        /// Tries to find a registered container by name.
        /// </summary>
        public static bool TryGetContainerByName(string name, out LootableContainer? found)
        {
            foreach (LootableContainer container in Containers)
            {
                if (container != null && container.name.Equals(name, StringComparison.OrdinalIgnoreCase))
                {
                    found = container;
                    return true;
                }
            }

            found = null;
            return false;
        }

        /// <summary>
        /// Tries to find a registered loot item by name.
        /// </summary>
        public static bool TryGetItemByName(string name, out LootItem? found)
        {
            foreach (LootItem item in Items)
            {
                if (item != null && item.name.Equals(name, StringComparison.OrdinalIgnoreCase))
                {
                    found = item;
                    return true;
                }
            }

            found = null;
            return false;
        }

        private static void InjectWatcherIfNeeded(GameObject? go)
        {
            if (go == null || WatchedObjects.Contains(go))
            {
                return;
            }

            go.AddComponent<LootRuntimeWatcher>();
            WatchedObjects.Add(go);
        }
    }
}
