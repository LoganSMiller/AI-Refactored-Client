// <auto-generated>
//   AI-Refactored: LootRegistry.cs (Supreme Arbitration+++ Max Expansion, Max Realism, June 2025)
//   Registers, tracks, and manages all loot containers, loose world items, and corpses for AI and overlay/event/teardown use. Bulletproof, pooled, timestamped, overlay-safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Global registry for all lootable containers, loose world items, and corpse containers.
    /// Pooled, timestamped, bulletproof, overlay/event/teardown/squad safe. 
    /// Full support for priority/freshness, overlay/event/fallback arbitration, squad contest logic, diagnostics, and teardown.
    /// </summary>
    public static class LootRegistry
    {
        #region Structs

        private struct TrackedContainer
        {
            public LootableContainer Container;
            public Transform Transform;
            public float RegisteredTime;
            public float LastSeenTime;
        }

        private struct TrackedItem
        {
            public LootItem Item;
            public Transform Transform;
            public float RegisteredTime;
            public float LastSeenTime;
        }

        #endregion

        #region Fields

        private static readonly Dictionary<LootableContainer, TrackedContainer> Containers = new Dictionary<LootableContainer, TrackedContainer>(256);
        private static readonly Dictionary<LootItem, TrackedItem> Items = new Dictionary<LootItem, TrackedItem>(512);
        private static readonly HashSet<int> WatchedInstanceIds = new HashSet<int>();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Initialization

        public static void Initialize()
        {
            try
            {
                Clear();
                LootRuntimeWatcher.Reset();
                Logger.LogDebug("[LootRegistry] ✅ Initialized loot tracking.");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] Initialize() failed: {ex}");
            }
        }

        public static void Clear()
        {
            try
            {
                Containers.Clear();
                Items.Clear();
                WatchedInstanceIds.Clear();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] Clear() failed: {ex}");
            }
        }

        #endregion

        #region Registration

        public static void RegisterContainer(LootableContainer container)
        {
            try
            {
                if (container == null || container.transform == null)
                    return;
                float now = Time.time;
                if (Containers.TryGetValue(container, out var tracked))
                {
                    tracked.LastSeenTime = now;
                    Containers[container] = tracked;
                }
                else
                {
                    Containers[container] = new TrackedContainer
                    {
                        Container = container,
                        Transform = container.transform,
                        RegisteredTime = now,
                        LastSeenTime = now
                    };
                }
                InjectWatcher(container.gameObject);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] RegisterContainer() failed: {ex}");
            }
        }

        public static void RegisterItem(LootItem item)
        {
            try
            {
                if (item == null || item.transform == null)
                    return;
                float now = Time.time;
                if (Items.TryGetValue(item, out var tracked))
                {
                    tracked.LastSeenTime = now;
                    Items[item] = tracked;
                }
                else
                {
                    Items[item] = new TrackedItem
                    {
                        Item = item,
                        Transform = item.transform,
                        RegisteredTime = now,
                        LastSeenTime = now
                    };
                }
                InjectWatcher(item.gameObject);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] RegisterItem() failed: {ex}");
            }
        }

        #endregion

        #region Query APIs

        public static List<LootableContainer> GetAllContainers()
        {
            var list = TempListPool.Rent<LootableContainer>();
            try
            {
                foreach (var kv in Containers)
                    if (kv.Key != null)
                        list.Add(kv.Key);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] GetAllContainers() failed: {ex}");
            }
            return list;
        }

        public static List<LootItem> GetAllItems()
        {
            var list = TempListPool.Rent<LootItem>();
            try
            {
                foreach (var kv in Items)
                    if (kv.Key != null)
                        list.Add(kv.Key);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] GetAllItems() failed: {ex}");
            }
            return list;
        }

        public static List<LootableContainer> GetNearbyContainers(Vector3 origin, float radius)
        {
            var list = TempListPool.Rent<LootableContainer>();
            float r2 = radius * radius;
            try
            {
                foreach (var kv in Containers)
                {
                    Transform tf = kv.Value.Transform;
                    if (tf != null && (tf.position - origin).sqrMagnitude <= r2)
                        list.Add(kv.Key);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] GetNearbyContainers() failed: {ex}");
            }
            return list;
        }

        public static List<LootItem> GetNearbyItems(Vector3 origin, float radius)
        {
            var list = TempListPool.Rent<LootItem>();
            float r2 = radius * radius;
            try
            {
                foreach (var kv in Items)
                {
                    Transform tf = kv.Value.Transform;
                    if (tf != null && (tf.position - origin).sqrMagnitude <= r2)
                        list.Add(kv.Key);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] GetNearbyItems() failed: {ex}");
            }
            return list;
        }

        /// <summary>
        /// Returns a pooled list of containers/items prioritized by recency (freshest first).
        /// </summary>
        public static List<LootableContainer> GetFreshestContainers(int max = 10)
        {
            var temp = TempListPool.Rent<KeyValuePair<LootableContainer, TrackedContainer>>(Containers.Count);
            foreach (var kv in Containers)
                if (kv.Key != null) temp.Add(kv);
            temp.Sort((a, b) => b.Value.LastSeenTime.CompareTo(a.Value.LastSeenTime));
            var list = TempListPool.Rent<LootableContainer>(Mathf.Min(max, temp.Count));
            for (int i = 0; i < temp.Count && list.Count < max; i++)
                list.Add(temp[i].Key);
            TempListPool.Return(temp);
            return list;
        }

        public static List<LootItem> GetFreshestItems(int max = 14)
        {
            var temp = TempListPool.Rent<KeyValuePair<LootItem, TrackedItem>>(Items.Count);
            foreach (var kv in Items)
                if (kv.Key != null) temp.Add(kv);
            temp.Sort((a, b) => b.Value.LastSeenTime.CompareTo(a.Value.LastSeenTime));
            var list = TempListPool.Rent<LootItem>(Mathf.Min(max, temp.Count));
            for (int i = 0; i < temp.Count && list.Count < max; i++)
                list.Add(temp[i].Key);
            TempListPool.Return(temp);
            return list;
        }

        #endregion

        #region Lookup/Meta APIs

        public static bool TryGetContainerByName(string name, out LootableContainer container)
        {
            container = null;
            try
            {
                if (string.IsNullOrWhiteSpace(name))
                    return false;

                foreach (var kv in Containers)
                {
                    if (kv.Key != null && kv.Key.name.Equals(name.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        container = kv.Key;
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetContainerByName() failed: {ex}");
            }
            return false;
        }

        public static bool TryGetItemByName(string name, out LootItem item)
        {
            item = null;
            try
            {
                if (string.IsNullOrWhiteSpace(name))
                    return false;

                foreach (var kv in Items)
                {
                    if (kv.Key != null && kv.Key.name.Equals(name.Trim(), StringComparison.OrdinalIgnoreCase))
                    {
                        item = kv.Key;
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetItemByName() failed: {ex}");
            }
            return false;
        }

        public static bool TryGetLastSeenTime(LootableContainer container, out float time)
        {
            time = 0f;
            try
            {
                return container != null &&
                       Containers.TryGetValue(container, out var tracked) &&
                       (time = tracked.LastSeenTime) >= 0f;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetLastSeenTime(container) failed: {ex}");
                return false;
            }
        }

        public static bool TryGetLastSeenTime(LootItem item, out float time)
        {
            time = 0f;
            try
            {
                return item != null &&
                       Items.TryGetValue(item, out var tracked) &&
                       (time = tracked.LastSeenTime) >= 0f;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetLastSeenTime(item) failed: {ex}");
                return false;
            }
        }

        public static bool TryGetRegisteredTime(LootableContainer container, out float time)
        {
            time = 0f;
            try
            {
                return container != null &&
                       Containers.TryGetValue(container, out var tracked) &&
                       (time = tracked.RegisteredTime) >= 0f;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetRegisteredTime(container) failed: {ex}");
                return false;
            }
        }

        public static bool TryGetRegisteredTime(LootItem item, out float time)
        {
            time = 0f;
            try
            {
                return item != null &&
                       Items.TryGetValue(item, out var tracked) &&
                       (time = tracked.RegisteredTime) >= 0f;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] TryGetRegisteredTime(item) failed: {ex}");
                return false;
            }
        }

        #endregion

        #region Removal / Pruning

        public static void PruneStale(float olderThanSeconds)
        {
            float cutoff = Time.time - olderThanSeconds;
            RemoveWhere(Containers, kv => kv.Value.LastSeenTime < cutoff);
            RemoveWhere(Items, kv => kv.Value.LastSeenTime < cutoff);
        }

        private static void RemoveWhere<TKey, TValue>(Dictionary<TKey, TValue> dict, Func<KeyValuePair<TKey, TValue>, bool> predicate)
        {
            var toRemove = TempListPool.Rent<TKey>();
            try
            {
                foreach (var kv in dict)
                    if (predicate(kv))
                        toRemove.Add(kv.Key);
                for (int i = 0; i < toRemove.Count; i++)
                    dict.Remove(toRemove[i]);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] RemoveWhere() failed: {ex}");
            }
            finally
            {
                TempListPool.Return(toRemove);
            }
        }

        /// <summary>
        /// Removes a container, item, or by instance id (for despawn or overlay removal). Bulletproof.
        /// </summary>
        public static void RemoveContainer(LootableContainer container)
        {
            try { if (container != null) Containers.Remove(container); } catch { }
        }

        public static void RemoveItem(LootItem item)
        {
            try { if (item != null) Items.Remove(item); } catch { }
        }

        public static void RemoveByInstanceId(int instanceId)
        {
            try
            {
                foreach (var kv in Containers)
                {
                    if (kv.Key != null && kv.Key.gameObject.GetInstanceID() == instanceId)
                    { Containers.Remove(kv.Key); break; }
                }
                foreach (var kv in Items)
                {
                    if (kv.Key != null && kv.Key.gameObject.GetInstanceID() == instanceId)
                    { Items.Remove(kv.Key); break; }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] RemoveByInstanceId() failed: {ex}");
            }
        }

        private static void InjectWatcher(GameObject go)
        {
            try
            {
                if (go == null)
                    return;
                int id = go.GetInstanceID();
                if (WatchedInstanceIds.Add(id))
                {
                    LootRuntimeWatcher.Register(go);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] InjectWatcher() failed: {ex}");
            }
        }

        #endregion

        #region Diagnostics

        /// <summary>
        /// Audit: logs loot registry state for debugging. Bulletproof.
        /// </summary>
        public static void Audit()
        {
            try
            {
                int containers = Containers.Count;
                int items = Items.Count;
                int nullContainers = 0, nullItems = 0;
                foreach (var kv in Containers) if (kv.Key == null) nullContainers++;
                foreach (var kv in Items) if (kv.Key == null) nullItems++;
                Logger.LogInfo($"[LootRegistry] Audit: Containers={containers}, Items={items}, NullContainers={nullContainers}, NullItems={nullItems}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[LootRegistry] Audit() failed: {ex}");
            }
        }

        #endregion
    }
}
