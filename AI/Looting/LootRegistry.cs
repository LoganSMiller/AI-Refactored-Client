// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Centralized registry for all lootables in the scene.
    /// Bots query this instead of using expensive GetComponent calls.
    /// Tracks timestamp metadata for prioritization and pruning.
    /// </summary>
    public static class LootRegistry
    {
        #region Internal Structs

        private struct TrackedContainer
        {
            public LootableContainer Container;
            public Transform Transform;
            public float LastSeenTime;
        }

        private struct TrackedItem
        {
            public LootItem Item;
            public Transform Transform;
            public float LastSeenTime;
        }

        #endregion

        #region Buffers

        private static readonly List<TrackedContainer> _containerBuffer = new List<TrackedContainer>(32);
        private static readonly List<TrackedItem> _itemBuffer = new List<TrackedItem>(64);
        private static readonly List<LootableContainer> _containerResultBuffer = new List<LootableContainer>(32);
        private static readonly List<LootItem> _itemResultBuffer = new List<LootItem>(64);

        #endregion

        #region State

        private static readonly Dictionary<LootableContainer, TrackedContainer> _containers = new Dictionary<LootableContainer, TrackedContainer>(64);
        private static readonly Dictionary<LootItem, TrackedItem> _items = new Dictionary<LootItem, TrackedItem>(128);
        private static readonly HashSet<GameObject> _watchedObjects = new HashSet<GameObject>();

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Public API

        public static List<LootableContainer> GetAllContainers()
        {
            _containerResultBuffer.Clear();
            foreach (var kv in _containers)
            {
                if (kv.Key != null)
                    _containerResultBuffer.Add(kv.Key);
            }

            return _containerResultBuffer;
        }

        public static List<LootItem> GetAllItems()
        {
            _itemResultBuffer.Clear();
            foreach (var kv in _items)
            {
                if (kv.Key != null)
                    _itemResultBuffer.Add(kv.Key);
            }

            return _itemResultBuffer;
        }

        public static void Clear()
        {
            _containers.Clear();
            _items.Clear();
            _watchedObjects.Clear();
            _containerBuffer.Clear();
            _itemBuffer.Clear();
            _containerResultBuffer.Clear();
            _itemResultBuffer.Clear();
        }

        public static List<LootableContainer> GetNearbyContainers(Vector3 origin, float radius)
        {
            _containerResultBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (var tracked in _containers.Values)
            {
                if (tracked.Transform == null)
                    continue;

                Vector3 pos = tracked.Transform.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    _containerResultBuffer.Add(tracked.Container);
                }
            }

            return _containerResultBuffer;
        }

        public static List<LootItem> GetNearbyItems(Vector3 origin, float radius)
        {
            _itemResultBuffer.Clear();
            float radiusSqr = radius * radius;

            foreach (var tracked in _items.Values)
            {
                if (tracked.Transform == null)
                    continue;

                Vector3 pos = tracked.Transform.position;
                if ((pos - origin).sqrMagnitude <= radiusSqr)
                {
                    _itemResultBuffer.Add(tracked.Item);
                }
            }

            return _itemResultBuffer;
        }

        public static void RegisterContainer(LootableContainer? container)
        {
            if (container == null || container.transform == null)
                return;

            var tracked = new TrackedContainer
            {
                Container = container,
                Transform = container.transform,
                LastSeenTime = Time.time
            };

            _containers[container] = tracked;
            InjectWatcherIfNeeded(container.gameObject);
        }

        public static void RegisterItem(LootItem? item)
        {
            if (item == null || item.transform == null)
                return;

            var tracked = new TrackedItem
            {
                Item = item,
                Transform = item.transform,
                LastSeenTime = Time.time
            };

            _items[item] = tracked;
            InjectWatcherIfNeeded(item.gameObject);
        }

        public static bool TryGetContainerByName(string? name, out LootableContainer? found)
        {
            found = null;
            if (string.IsNullOrEmpty(name))
                return false;

            foreach (var kv in _containers)
            {
                if (string.Equals(kv.Key?.name, name, StringComparison.OrdinalIgnoreCase))
                {
                    found = kv.Key;
                    return true;
                }
            }

            return false;
        }

        public static bool TryGetItemByName(string? name, out LootItem? found)
        {
            found = null;
            if (string.IsNullOrEmpty(name))
                return false;

            foreach (var kv in _items)
            {
                if (string.Equals(kv.Key?.name, name, StringComparison.OrdinalIgnoreCase))
                {
                    found = kv.Key;
                    return true;
                }
            }

            return false;
        }

        public static float? GetLastSeenTime(LootableContainer? container)
        {
            if (container != null && _containers.TryGetValue(container, out var tracked))
            {
                return tracked.LastSeenTime;
            }

            return null;
        }

        public static float? GetLastSeenTime(LootItem? item)
        {
            if (item != null && _items.TryGetValue(item, out var tracked))
            {
                return tracked.LastSeenTime;
            }

            return null;
        }

        public static void PruneStale(float olderThanSeconds)
        {
            float cutoff = Time.time - olderThanSeconds;

            _containers.RemoveWhere(pair => pair.Value.LastSeenTime < cutoff);
            _items.RemoveWhere(pair => pair.Value.LastSeenTime < cutoff);
        }

        #endregion

        #region Internal Logic

        private static void InjectWatcherIfNeeded(GameObject? go)
        {
            if (go == null || _watchedObjects.Contains(go))
                return;

            _watchedObjects.Add(go);
            LootRuntimeWatcher.Register(go);
            Logger.LogDebug("[LootRegistry] Registered static loot watcher for: " + go.name);
        }

        #endregion
    }

    internal static class DictionaryRemoveWhereExtensions
    {
        public static void RemoveWhere<TKey, TValue>(this Dictionary<TKey, TValue> dict, Func<KeyValuePair<TKey, TValue>, bool> predicate)
        {
            var toRemove = new List<TKey>();

            foreach (var kv in dict)
            {
                if (predicate(kv))
                {
                    toRemove.Add(kv.Key);
                }
            }

            for (int i = 0; i < toRemove.Count; i++)
            {
                dict.Remove(toRemove[i]);
            }
        }
    }
}
