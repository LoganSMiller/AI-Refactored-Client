// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System.Collections.Generic;
    using EFT;
    using EFT.Interactive;

    /// <summary>
    /// Caches LootableContainer references for dead player bodies to avoid expensive runtime lookups.
    /// Safe for repeated reads by AI loot systems.
    /// </summary>
    public static class DeadBodyContainerCache
    {
        /// <summary>
        /// Internal dictionary mapping profile IDs to lootable corpse containers.
        /// </summary>
        private static readonly Dictionary<string, LootableContainer> Containers = new Dictionary<string, LootableContainer>(64);

        /// <summary>
        /// Clears the cache of all dead body container references.
        /// </summary>
        public static void Clear()
        {
            Containers.Clear();
        }

        /// <summary>
        /// Returns true if the specified profile ID has a registered corpse container.
        /// </summary>
        /// <param name="profileId">The bot's profile ID.</param>
        /// <returns>True if a corpse container is cached for the given profile ID.</returns>
        public static bool Contains(string? profileId)
        {
            if (profileId == null)
            {
                return false;
            }

            string trimmedId = profileId.Trim();
            if (string.IsNullOrWhiteSpace(trimmedId))
            {
                return false;
            }

            return Containers.ContainsKey(trimmedId);
        }

        /// <summary>
        /// Attempts to retrieve a corpse loot container by profile ID.
        /// </summary>
        /// <param name="profileId">The bot's profile ID.</param>
        /// <returns>The associated lootable container, or null if not found.</returns>
        public static LootableContainer? Get(string? profileId)
        {
            if (profileId == null)
            {
                return null;
            }

            string trimmedId = profileId.Trim();
            if (string.IsNullOrWhiteSpace(trimmedId))
            {
                return null;
            }

            return Containers.TryGetValue(trimmedId, out LootableContainer? container) ? container : null;
        }

        /// <summary>
        /// Registers a lootable corpse container using the given player's profile ID.
        /// </summary>
        /// <param name="player">The player who died.</param>
        /// <param name="container">The corpse's lootable container.</param>
        public static void Register(Player? player, LootableContainer? container)
        {
            if (player == null || container == null)
            {
                return;
            }

            string? rawId = player.ProfileId;
            if (rawId == null)
            {
                return;
            }

            string profileId = rawId.Trim();
            if (string.IsNullOrEmpty(profileId) || Containers.ContainsKey(profileId))
            {
                return;
            }

            Containers[profileId] = container;
        }
    }
}
