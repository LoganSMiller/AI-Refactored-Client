// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System.Collections.Generic;
    using EFT;
    using EFT.Interactive;

    /// <summary>
    /// Caches LootableContainer references for dead player bodies to avoid expensive runtime lookups.
    /// Safe for repeated reads by AI loot systems.
    /// </summary>
    public static class DeadBodyContainerCache
    {
        #region Fields

        private static readonly Dictionary<string, LootableContainer> Containers = new Dictionary<string, LootableContainer>(64);

        #endregion

        #region Public API

        /// <summary>
        /// Clears all cached corpse containers.
        /// </summary>
        public static void Clear()
        {
            Containers.Clear();
        }

        /// <summary>
        /// Returns true if a corpse container is registered for the given profile ID.
        /// </summary>
        /// <param name="profileId">The profile ID of the dead player.</param>
        /// <returns>True if cached.</returns>
        public static bool Contains(string? profileId)
        {
            return TryGetValidKey(profileId, out string key) && Containers.ContainsKey(key);
        }

        /// <summary>
        /// Gets the registered corpse container for a given profile ID.
        /// </summary>
        /// <param name="profileId">The profile ID of the dead player.</param>
        /// <returns>The loot container if found; otherwise null.</returns>
        public static LootableContainer? Get(string? profileId)
        {
            if (!TryGetValidKey(profileId, out string key))
            {
                return null;
            }

            Containers.TryGetValue(key, out LootableContainer? result);
            return result;
        }

        /// <summary>
        /// Registers a dead player's loot container.
        /// </summary>
        /// <param name="player">The dead player.</param>
        /// <param name="container">Their associated lootable container.</param>
        public static void Register(Player? player, LootableContainer? container)
        {
            if (player == null || container == null || !TryGetValidKey(player.ProfileId, out string key))
            {
                return;
            }

            if (!Containers.ContainsKey(key))
            {
                Containers.Add(key, container);
            }
        }

        #endregion

        #region Helpers

        private static bool TryGetValidKey(string? profileId, out string key)
        {
            if (profileId == null)
            {
                key = string.Empty;
                return false;
            }

            key = profileId.Trim();
            return key.Length > 0;
        }

        #endregion
    }
}
