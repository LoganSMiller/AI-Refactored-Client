// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Makes dynamic decisions about whether a bot should loot.
    /// Considers mission context, recent threats, tactical memory, and loot value.
    /// </summary>
    public sealed class BotLootDecisionSystem
    {
        #region Constants

        private const float MaxLootDistance = 22f;
        private const float HighValueThreshold = 25000f;
        private const float CooldownTime = 14f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private BotOwner _bot;
        private float _nextLootTime;
        private readonly HashSet<string> _recentLooted = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the loot decision system with bot context.
        /// </summary>
        /// <param name="cache">The bot's component cache.</param>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentNullException(nameof(cache), "[BotLootDecisionSystem] Initialization failed: cache or bot is null.");
            }

            _cache = cache;
            _bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines if the bot should loot right now based on situational awareness.
        /// </summary>
        public bool ShouldLootNow()
        {
            if (_bot.IsDead || Time.time < _nextLootTime)
            {
                return false;
            }

            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            if (_bot.Memory != null && _bot.Memory.GoalEnemy != null)
            {
                return false;
            }

            if (_bot.EnemiesController != null && _bot.EnemiesController.EnemyInfos.Count > 0)
            {
                return false;
            }

            return _cache.LootScanner != null && _cache.LootScanner.TotalLootValue >= HighValueThreshold;
        }

        /// <summary>
        /// Returns the best loot destination within tactical range, or Vector3.zero if none found.
        /// </summary>
        public Vector3 GetLootDestination()
        {
            if (_cache.LootScanner == null)
            {
                return Vector3.zero;
            }

            float bestValue = 0f;
            Vector3 bestPoint = _bot.Position;

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer container = containers[i];
                if (container == null || !container.enabled || container.transform == null)
                {
                    continue;
                }

                float dist = Vector3.Distance(_bot.Position, container.transform.position);
                if (dist > MaxLootDistance)
                {
                    continue;
                }

                float value = EstimateValue(container);
                if (value > bestValue)
                {
                    bestValue = value;
                    bestPoint = container.transform.position;
                }
            }

            return bestValue > 0f ? bestPoint : Vector3.zero;
        }

        /// <summary>
        /// Marks the loot spot as visited and triggers local cooldown.
        /// </summary>
        /// <param name="lootId">The ID of the loot container.</param>
        public void MarkLooted(string lootId)
        {
            if (string.IsNullOrWhiteSpace(lootId))
            {
                return;
            }

            _recentLooted.Add(lootId.Trim());
            _nextLootTime = Time.time + CooldownTime;
        }

        /// <summary>
        /// Checks if a loot point was recently looted by this bot.
        /// </summary>
        /// <param name="lootId">The loot identifier to check.</param>
        public bool WasRecentlyLooted(string lootId)
        {
            if (string.IsNullOrWhiteSpace(lootId))
            {
                return false;
            }

            return _recentLooted.Contains(lootId.Trim());
        }

        #endregion

        #region Internal Helpers

        private static float EstimateValue(LootableContainer container)
        {
            if (container.ItemOwner == null || container.ItemOwner.RootItem == null)
            {
                return 0f;
            }

            float value = 0f;
            List<Item> items = new List<Item>(container.ItemOwner.RootItem.GetAllItems());
            for (int i = 0; i < items.Count; i++)
            {
                Item item = items[i];
                if (item != null && item.Template != null && item.Template.CreditsPrice > 0f)
                {
                    value += item.Template.CreditsPrice;
                }
            }

            return value;
        }

        #endregion
    }
}
