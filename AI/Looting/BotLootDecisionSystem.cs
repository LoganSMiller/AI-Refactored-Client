// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Makes dynamic decisions about whether a bot should loot.
    /// Considers mission context, recent threats, tactical memory, and loot value.
    /// </summary>
    public sealed class BotLootDecisionSystem
    {
        #region Constants

        private const float MaxLootDistance = 22f;
        private const float HighValueThreshold = 25000f;
        private const float CooldownTime = 14f;

        #endregion

        #region Fields

        private BotComponentCache? _cache;
        private BotOwner? _bot;
        private float _nextLootTime;
        private readonly HashSet<string> _recentLooted = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the loot decision system with bot context.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._bot = cache.Bot ?? throw new ArgumentNullException(nameof(cache.Bot));
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines if the bot should loot right now based on situational awareness.
        /// </summary>
        public bool ShouldLootNow()
        {
            if (this._cache == null || this._bot == null || this._bot.IsDead)
            {
                return false;
            }

            if (Time.time < this._nextLootTime)
            {
                return false;
            }

            if (this._cache.PanicHandler?.IsPanicking == true)
            {
                return false;
            }

            if (this._bot.Memory?.GoalEnemy != null || this._bot.EnemiesController?.EnemyInfos.Count > 0)
            {
                return false;
            }

            return this._cache.LootScanner != null && this._cache.LootScanner.TotalLootValue >= HighValueThreshold;
        }

        /// <summary>
        /// Returns the best loot destination within tactical range, or Vector3.zero if none found.
        /// </summary>
        public Vector3 GetLootDestination()
        {
            if (this._bot == null || this._cache?.LootScanner == null)
            {
                return Vector3.zero;
            }

            float bestValue = 0f;
            Vector3 bestPoint = this._bot.Position;

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer c = containers[i];
                if (c == null || !c.enabled || c.transform == null)
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, c.transform.position);
                if (dist > MaxLootDistance)
                {
                    continue;
                }

                float value = EstimateValue(c);
                if (value > bestValue)
                {
                    bestValue = value;
                    bestPoint = c.transform.position;
                }
            }

            return bestValue > 0f ? bestPoint : Vector3.zero;
        }

        /// <summary>
        /// Marks the loot spot as visited and triggers local cooldown.
        /// </summary>
        public void MarkLooted(string? lootId)
        {
            if (lootId == null)
            {
                return;
            }

            string trimmed = lootId.Trim();
            if (trimmed.Length == 0)
            {
                return;
            }

            this._recentLooted.Add(trimmed);
            this._nextLootTime = Time.time + CooldownTime;
        }

        /// <summary>
        /// Checks if a loot point was recently looted by this bot.
        /// </summary>
        public bool WasRecentlyLooted(string? lootId)
        {
            if (lootId == null)
            {
                return false;
            }

            string trimmed = lootId.Trim();
            if (trimmed.Length == 0)
            {
                return false;
            }

            return this._recentLooted.Contains(trimmed);
        }

        #endregion

        #region Internal Helpers

        private static float EstimateValue(LootableContainer container)
        {
            if (container.ItemOwner?.RootItem == null)
            {
                return 0f;
            }

            float value = 0f;
            List<Item> items = new List<Item>(container.ItemOwner.RootItem.GetAllItems());
            for (int i = 0; i < items.Count; i++)
            {
                Item item = items[i];
                if (item?.Template?.CreditsPrice > 0)
                {
                    value += item.Template.CreditsPrice;
                }
            }

            return value;
        }

        #endregion
    }
}
