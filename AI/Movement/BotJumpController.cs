// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles dynamic jump behavior for bots.
    /// Detects jumpable obstacles and vaults forward using physics and nav mesh probes.
    /// </summary>
    public sealed class BotJumpController
    {
        #region Constants

        private const float JumpCheckDistance = 1.1f;
        private const float JumpCooldown = 1.25f;
        private const float MaxJumpHeight = 1.2f;
        private const float MinJumpHeight = 0.3f;
        private const float ObstacleCheckRadius = 0.4f;
        private const float SafeFallHeight = 2.2f;
        private const float VaultForwardOffset = 0.75f;
        private const float JumpVelocityMultiplier = 1.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _context;

        private float _lastJumpTime;
        private bool _hasRecentlyJumped;

        #endregion

        #region Constructor

        public BotJumpController(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                throw new ArgumentException("BotJumpController: bot or cache is null.");
            }

            Player player = bot.GetPlayer;
            if (player == null || player.MovementContext == null)
            {
                throw new InvalidOperationException("[BotJumpController] MovementContext is missing.");
            }

            _bot = bot;
            _cache = cache;
            _context = player.MovementContext;
        }

        #endregion

        #region Public Methods

        public void Tick(float deltaTime)
        {
            if (!IsJumpAllowed())
            {
                return;
            }

            if (TryFindJumpTarget(out Vector3 target))
            {
                ExecuteJump(target, deltaTime);
            }
        }

        #endregion

        #region Internal Logic

        private bool IsJumpAllowed()
        {
            float now = Time.time;

            if (_hasRecentlyJumped && now - _lastJumpTime < JumpCooldown)
            {
                return false;
            }

            if (!_context.IsGrounded || _context.IsInPronePose)
            {
                return false;
            }

            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            _hasRecentlyJumped = false;
            return true;
        }

        private void ExecuteJump(Vector3 landingPoint, float deltaTime)
        {
            _context.OnJump();
            _lastJumpTime = Time.time;
            _hasRecentlyJumped = true;

            Vector3 velocity = (landingPoint - _context.TransformPosition).normalized * JumpVelocityMultiplier;
            _context.ApplyMotion(velocity, deltaTime);
        }

        private bool TryFindJumpTarget(out Vector3 target)
        {
            target = Vector3.zero;

            Vector3 origin = _context.PlayerColliderCenter + Vector3.up * 0.25f;
            Vector3 forward = _context.TransformForwardVector;

            if (!Physics.SphereCast(origin, ObstacleCheckRadius, forward, out RaycastHit obstacleHit, JumpCheckDistance, AIRefactoredLayerMasks.ObstacleRayMask))
            {
                return false;
            }

            Bounds bounds = obstacleHit.collider.bounds;
            float height = bounds.max.y - _context.TransformPosition.y;

            if (height < MinJumpHeight || height > MaxJumpHeight)
            {
                return false;
            }

            Vector3 vaultProbe = bounds.max + (forward * VaultForwardOffset);

            if (!Physics.Raycast(vaultProbe, Vector3.down, out RaycastHit landing, 2.5f, AIRefactoredLayerMasks.JumpRayMask))
            {
                return false;
            }

            float fallHeight = _context.TransformPosition.y - landing.point.y;
            if (fallHeight > SafeFallHeight)
            {
                return false;
            }

            target = landing.point;
            return true;
        }

        #endregion
    }
}
