// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
//   Bulletproof: All failures are locally isolated; never disables itself, never triggers fallback AI.
//   Realism Pass: Human-like jump anticipation, variable delay, and error-prone motion. 
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles dynamic jump behavior for bots.
    /// Detects jumpable obstacles and vaults forward using physics and nav mesh probes.
    /// All failures are locally isolated; cannot break or cascade into other systems.
    /// </summary>
    public sealed class BotJumpController
    {
        #region Constants

        private const float JumpCheckDistance = 1.1f;
        private const float JumpCooldown = 1.25f;
        private const float MaxJumpHeight = 1.2f;
        private const float MinJumpHeight = 0.3f;
        private const float ObstacleCheckRadius = 0.4f;
        private const float SafeFallHeight = 2.2f;
        private const float VaultForwardOffset = 0.75f;
        private const float JumpVelocityMultiplier = 1.5f;
        private const float HumanJumpDelayMin = 0.09f;
        private const float HumanJumpDelayMax = 0.22f;
        private const float HumanMistakeChance = 0.075f; // ~7.5% bots chicken out of jump

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _context;

        private float _lastJumpTime;
        private bool _hasRecentlyJumped;
        private float _nextAllowedJumpTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Creates a new jump controller for a bot.
        /// </summary>
        public BotJumpController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
                throw new ArgumentException("[BotJumpController] Invalid bot or cache.");

            MovementContext context = bot.GetPlayer?.MovementContext;
            if (context == null)
                throw new InvalidOperationException("[BotJumpController] Missing MovementContext.");

            _bot = bot;
            _cache = cache;
            _context = context;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Called every tick to evaluate and trigger jump logic.
        /// </summary>
        public void Tick(float deltaTime)
        {
            try
            {
                if (!IsJumpAllowed())
                    return;

                // Human hesitation: random delay between jump opportunities
                float now = Time.time;
                if (now < _nextAllowedJumpTime)
                    return;

                Vector3[] temp = TempVector3Pool.Rent(1);
                try
                {
                    if (TryFindJumpTarget(out temp[0]))
                    {
                        // Human: small chance to bail and not jump
                        if (UnityEngine.Random.value < HumanMistakeChance)
                        {
                            _nextAllowedJumpTime = now + UnityEngine.Random.Range(0.22f, 0.39f); // Hesitate longer after chickening out
                            return;
                        }

                        // Human: add small anticipation delay
                        float anticipation = UnityEngine.Random.Range(HumanJumpDelayMin, HumanJumpDelayMax);
                        _nextAllowedJumpTime = now + JumpCooldown + anticipation;
                        ExecuteJump(temp[0], deltaTime);
                    }
                }
                finally
                {
                    TempVector3Pool.Return(temp);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotJumpController] Tick failed: {ex}");
            }
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Returns true if a jump is currently allowed.
        /// </summary>
        private bool IsJumpAllowed()
        {
            try
            {
                float now = Time.time;

                if (_hasRecentlyJumped && now - _lastJumpTime < JumpCooldown)
                    return false;

                if (_context == null || !_context.IsGrounded || _context.IsInPronePose)
                    return false;

                if (_cache != null && _cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
                    return false;

                if (_bot.IsDead || _bot.Memory == null || _bot.Memory.GoalEnemy != null)
                    return false;

                _hasRecentlyJumped = false;
                return true;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotJumpController] IsJumpAllowed failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Applies jump force and sets jump state.
        /// </summary>
        private void ExecuteJump(Vector3 target, float deltaTime)
        {
            try
            {
                if (_context == null)
                    return;

                _context.OnJump();
                _lastJumpTime = Time.time;
                _hasRecentlyJumped = true;

                Vector3 direction = (target - _context.TransformPosition).normalized;
                if (direction.sqrMagnitude < 0.01f)
                    return;

                Vector3 velocity = direction * JumpVelocityMultiplier;
                _context.ApplyMotion(velocity, deltaTime);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotJumpController] ExecuteJump failed: {ex}");
            }
        }

        /// <summary>
        /// Finds a valid jump/vault target in front of the bot.
        /// </summary>
        private bool TryFindJumpTarget(out Vector3 target)
        {
            target = Vector3.zero;
            try
            {
                if (_context == null)
                    return false;

                Vector3 origin = _context.PlayerColliderCenter + Vector3.up * 0.25f;
                Vector3 forward = _context.TransformForwardVector;

                RaycastHit[] hits = TempRaycastHitPool.Rent(1);
                try
                {
                    if (!Physics.SphereCast(origin, ObstacleCheckRadius, forward, out hits[0], JumpCheckDistance, AIRefactoredLayerMasks.ObstacleRayMask))
                        return false;

                    Bounds[] boundsArray = TempBoundsPool.Rent(1);
                    try
                    {
                        boundsArray[0] = hits[0].collider.bounds;
                        float height = boundsArray[0].max.y - _context.TransformPosition.y;

                        if (height < MinJumpHeight || height > MaxJumpHeight)
                            return false;

                        Vector3 vaultPoint = boundsArray[0].max + (forward * VaultForwardOffset);

                        RaycastHit[] landHits = TempRaycastHitPool.Rent(1);
                        try
                        {
                            if (!Physics.Raycast(vaultPoint, Vector3.down, out landHits[0], 2.5f, AIRefactoredLayerMasks.JumpRayMask))
                                return false;

                            float fallHeight = Mathf.Abs(_context.TransformPosition.y - landHits[0].point.y);
                            if (fallHeight > SafeFallHeight)
                                return false;

                            target = landHits[0].point;
                            return true;
                        }
                        finally
                        {
                            TempRaycastHitPool.Return(landHits);
                        }
                    }
                    finally
                    {
                        TempBoundsPool.Return(boundsArray);
                    }
                }
                finally
                {
                    TempRaycastHitPool.Return(hits);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotJumpController] TryFindJumpTarget failed: {ex}");
            }

            return false;
        }

        #endregion
    }
}
