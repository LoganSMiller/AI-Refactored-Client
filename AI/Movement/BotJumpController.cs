// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles dynamic jumping behavior for bots.
    /// Detects jumpable obstacles, triggers safe vaults,
    /// </summary>
    public sealed class BotJumpController
    {
        private const float JumpCheckDistance = 1.1f;
        private const float JumpCooldown = 1.25f;
        private const float MaxJumpHeight = 1.2f;
        private const float MinJumpHeight = 0.3f;
        private const float ObstacleCheckRadius = 0.4f;
        private const float SafeFallHeight = 2.2f;
        private const float VaultForwardOffset = 0.75f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _context;

        private bool _hasRecentlyJumped;
        private float _lastJumpTime;

        /// <summary>
        /// Initializes a new instance of the <see cref="BotJumpController"/> class.
        /// </summary>
        /// <param name="bot">BotOwner reference.</param>
        /// <param name="cache">BotComponentCache reference.</param>
        public BotJumpController(BotOwner bot, BotComponentCache cache)
        {
            this._bot = bot ?? throw new ArgumentNullException(nameof(bot));
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
            this._context = this._bot.GetPlayer?.MovementContext
                            ?? throw new InvalidOperationException("Missing MovementContext.");
        }

        /// <summary>
        /// Evaluates whether a jump is needed, and triggers it if safe and appropriate.
        /// </summary>
        /// <param name="deltaTime">Delta time from the frame update.</param>
        public void Tick(float deltaTime)
        {
            if (!this.IsJumpAllowed())
            {
                return;
            }

            Vector3 target;
            if (this.TryFindJumpTarget(out target))
            {
                this.ExecuteJump(target);
            }
        }

        private bool IsJumpAllowed()
        {
            if (this._hasRecentlyJumped && Time.time - this._lastJumpTime < JumpCooldown)
            {
                return false;
            }

            if (!this._context.IsGrounded || this._context.IsInPronePose)
            {
                return false;
            }

            if (this._cache.PanicHandler?.IsPanicking == true)
            {
                return false;
            }

            return true;
        }

        private void ExecuteJump(Vector3 landingPosition)
        {
            this._context.OnJump();
            this._lastJumpTime = Time.time;
            this._hasRecentlyJumped = true;

            Vector3 delta = landingPosition - this._context.TransformPosition;
            this._context.ApplyMotion(delta, 0.25f);
        }

        private bool TryFindJumpTarget(out Vector3 target)
        {
            target = Vector3.zero;

            Vector3 origin = this._context.PlayerColliderCenter + Vector3.up * 0.25f;
            Vector3 direction = this._context.TransformForwardVector;

            RaycastHit hit;
            if (!Physics.SphereCast(origin, ObstacleCheckRadius, direction, out hit, JumpCheckDistance))
            {
                return false;
            }

            if (hit.collider == null)
            {
                return false;
            }

            Bounds bounds = hit.collider.bounds;
            float heightDelta = bounds.max.y - this._context.TransformPosition.y;

            if (heightDelta < MinJumpHeight || heightDelta > MaxJumpHeight)
            {
                return false;
            }

            Vector3 probePoint = bounds.max + direction * VaultForwardOffset;

            RaycastHit landing;
            if (!Physics.Raycast(probePoint, Vector3.down, out landing, 2.5f))
            {
                return false;
            }

            float fallDelta = this._context.TransformPosition.y - landing.point.y;
            if (fallDelta > SafeFallHeight)
            {
                return false;
            }

            target = landing.point;
            return true;
        }
    }
}
