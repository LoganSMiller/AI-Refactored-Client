// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles dynamic jumping behavior for bots.
    /// Detects jumpable obstacles and triggers safe vaults when needed.
    /// </summary>
    public sealed class BotJumpController
    {
        #region Constants

        private const float JumpCheckDistance = 1.1f;
        private const float JumpCooldown = 1.25f;
        private const float MaxJumpHeight = 1.2f;
        private const float MinJumpHeight = 0.3f;
        private const float ObstacleCheckRadius = 0.4f;
        private const float SafeFallHeight = 2.2f;
        private const float VaultForwardOffset = 0.75f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _context;

        private bool _hasRecentlyJumped;
        private float _lastJumpTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotJumpController"/> class.
        /// </summary>
        /// <param name="bot">The bot owner.</param>
        /// <param name="cache">The component cache.</param>
        public BotJumpController(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            if (bot.GetPlayer?.MovementContext == null)
            {
                throw new InvalidOperationException("Bot is missing MovementContext.");
            }

            this._bot = bot;
            this._cache = cache;
            this._context = bot.GetPlayer.MovementContext;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Called each frame to evaluate and potentially trigger jump behavior.
        /// </summary>
        /// <param name="deltaTime">Frame delta time.</param>
        public void Tick(float deltaTime)
        {
            if (!this.IsJumpAllowed())
            {
                return;
            }

            Vector3 target;
            if (this.TryFindJumpTarget(out target))
            {
                this.ExecuteJump(target);
            }
        }

        #endregion

        #region Jump Logic

        private bool IsJumpAllowed()
        {
            if (this._hasRecentlyJumped && Time.time - this._lastJumpTime < JumpCooldown)
            {
                return false;
            }

            if (!this._context.IsGrounded || this._context.IsInPronePose)
            {
                return false;
            }

            if (this._cache.PanicHandler != null && this._cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            return true;
        }

        private void ExecuteJump(Vector3 landingPosition)
        {
            this._context.OnJump();
            this._lastJumpTime = Time.time;
            this._hasRecentlyJumped = true;

            Vector3 delta = landingPosition - this._context.TransformPosition;
            this._context.ApplyMotion(delta, 0.25f);
        }

        private bool TryFindJumpTarget(out Vector3 target)
        {
            target = Vector3.zero;

            Vector3 origin = this._context.PlayerColliderCenter + Vector3.up * 0.25f;
            Vector3 direction = this._context.TransformForwardVector;

            RaycastHit obstacle;
            if (!Physics.SphereCast(
                origin,
                ObstacleCheckRadius,
                direction,
                out obstacle,
                JumpCheckDistance,
                AIRefactoredLayerMasks.ObstacleRayMask))
            {
                return false;
            }

            if (obstacle.collider == null)
            {
                return false;
            }

            Bounds bounds = obstacle.collider.bounds;
            float heightDelta = bounds.max.y - this._context.TransformPosition.y;

            if (heightDelta < MinJumpHeight || heightDelta > MaxJumpHeight)
            {
                return false;
            }

            Vector3 vaultProbe = bounds.max + direction * VaultForwardOffset;

            RaycastHit landing;
            if (!Physics.Raycast(
                vaultProbe,
                Vector3.down,
                out landing,
                2.5f,
                AIRefactoredLayerMasks.JumpRayMask))
            {
                return false;
            }

            float fallDelta = this._context.TransformPosition.y - landing.point.y;
            if (fallDelta > SafeFallHeight)
            {
                return false;
            }

            target = landing.point;
            return true;
        }

        #endregion
    }
}
