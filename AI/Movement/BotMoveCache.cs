// <auto-generated>
//   AI-Refactored: BotMoveCache.cs (Overlay/Event, Deduped, Ultimate Realism Edition – June 2025)
//   Caches bot movement targets/timing. Hardened for zero spam, zero oscillation, zero micro-move. Min move=0.25m^2, cooldown=1.5s.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using UnityEngine;

    /// <summary>
    /// Tracks last movement target/time for intent-only, deduped movement.
    /// Prevents move spam, oscillation, and invalid move requests.
    /// </summary>
    public sealed class BotMoveCache
    {
        private const float MoveCooldown = 1.5f;      // Minimum time between moves
        private const float MinMoveDeltaSqr = 0.25f;  // Minimum squared distance between move targets

        /// <summary>
        /// Last worldspace target this bot was issued for movement.
        /// </summary>
        public Vector3 LastIssuedTarget { get; set; } = Vector3.zero;

        /// <summary>
        /// Last world time at which a move was issued.
        /// </summary>
        public float LastMoveTime { get; set; } = -1000f;

        /// <summary>
        /// Resets all cached movement state (for reuse/pooling/new raid).
        /// </summary>
        public void Reset()
        {
            LastIssuedTarget = Vector3.zero;
            LastMoveTime = -1000f;
        }

        /// <summary>
        /// Returns true if a move was issued within the cooldown period (default: 1.5s).
        /// </summary>
        public bool HasRecentMove(float now, float threshold = MoveCooldown)
        {
            return (now - LastMoveTime) <= threshold;
        }

        /// <summary>
        /// Returns true if the candidate move target is significantly different from the previous (default: 0.25m^2).
        /// </summary>
        public bool IsNewTarget(Vector3 candidate, float minDeltaSqr = MinMoveDeltaSqr)
        {
            return (candidate - LastIssuedTarget).sqrMagnitude > minDeltaSqr;
        }

        /// <summary>
        /// Returns true if both the time and position deltas are satisfied for a new move.
        /// Move can be issued if it's either a new target OR cooldown elapsed.
        /// </summary>
        public bool CanIssueMove(Vector3 candidate, float now, float minDeltaSqr = MinMoveDeltaSqr, float cooldown = MoveCooldown)
        {
            return !HasRecentMove(now, cooldown) || IsNewTarget(candidate, minDeltaSqr);
        }
    }
}
