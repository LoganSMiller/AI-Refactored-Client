// <auto-generated>
//   AI-Refactored: BotCornerScanner.cs (Ultra-Platinum++ Overlay/Event Edition – June 2025)
//   Overlay/event-driven corner scanning—NO PAUSE or anticipation overlays.
//   Only pose/lean overlays, never teleports, never disables, NavMesh-validated, multiplayer/headless-safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Handles squad/pose/lean-aware scanning at corners and edges.
    /// NO pauses, anticipation, or movement halts—only pose/lean overlays.
    /// Overlay/event-driven only. No tick-move, teleport, or disables. Ticked only by BotBrain.
    /// </summary>
    public sealed class BotCornerScanner
    {
        #region Constants

        private const float BaseWallCheckDistance = 1.5f;
        private const float EdgeCheckDistance = 1.18f;
        private const float EdgeRaySpacing = 0.26f;
        private const float MinFallHeight = 2.15f;
        private const float PrepCrouchTime = 0.75f;
        private const float WallAngleThreshold = 0.69f;
        private const float WallCheckHeight = 1.43f;
        private const float NavSampleTolerance = 0.67f;
        private const float SquadSpacing = 1.4f;
        private const float SquadScanDelay = 0.19f;
        private const float MaxScanAngle = 15.0f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Log = Plugin.LoggerInstance;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotPersonalityProfile _profile;

        private float _prepCrouchUntil;
        private float _lastSquadScan;
        private bool _isLeaning;
        private bool _isCrouching;
        private bool _isInitialized;

        private float _scanTargetYaw;
        private float _scanStartTime;
        private bool _scanInProgress;

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the scanner with required bot and cache references.
        /// </summary>
        public void Initialize(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Transform == null)
                return;

            var profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null)
                return;

            _bot = bot;
            _cache = cache;
            _profile = profile;
            _isInitialized = true;
        }

        /// <summary>
        /// Ticked only by BotBrain. Orchestrates overlay-only scanning, pose, lean logic—no pause.
        /// </summary>
        public void Tick(float time)
        {
            try
            {
                if (!_isInitialized || _bot == null || _cache == null || _profile == null)
                    return;
                if (_bot.IsDead || _bot.Mover == null || _bot.Transform == null)
                    return;
                if (_cache.Tilt == null || _cache.PoseController == null)
                    return;
                if (_bot.Memory?.GoalEnemy != null)
                {
                    ResetLean(time);
                    return;
                }
                if (time < _prepCrouchUntil)
                    return;

                HandleSquadSpacing(time);

                // Edge detection: Anticipate before edge/fall (NO PAUSE)
                if (IsApproachingEdge())
                {
                    // Can set overlay, or trigger caution pose, but DO NOT PAUSE
                }

                if (TryCornerPeekWithCrouch(time))
                    return;

                if (!_scanInProgress)
                    StartIdleScan(time);
                else
                    UpdateIdleScan(time);

                ResetLean(time);
            }
            catch (Exception ex)
            {
                Log.LogError("[BotCornerScanner] Tick failed: " + ex);
            }
        }

        #endregion

        #region Overlay/Scan Logic

        /// <summary>
        /// Handles squadmate spacing overlay—NO PAUSE.
        /// </summary>
        private void HandleSquadSpacing(float time)
        {
            if (_bot?.BotsGroup == null || _bot.BotsGroup.MembersCount <= 1)
                return;

            if (time - _lastSquadScan < SquadScanDelay)
                return;

            Vector3 myPos = _bot.Position;
            for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
            {
                var mate = _bot.BotsGroup.Member(i);
                if (mate == null || mate == _bot || mate.IsDead)
                    continue;

                if ((mate.Position - myPos).sqrMagnitude < SquadSpacing * SquadSpacing)
                {
                    _lastSquadScan = time;
                    // Overlay only: possible to signal visual or lean/crouch, never pause.
                    return;
                }
            }
        }

        /// <summary>
        /// Returns true if a drop/edge is detected ahead (NavMesh-safe).
        /// </summary>
        private bool IsApproachingEdge()
        {
            Vector3 origin = _bot.Position + Vector3.up * 0.2f;
            Vector3 forward = _bot.Transform.forward;
            Vector3 right = _bot.Transform.right;
            int rays = Mathf.CeilToInt((EdgeCheckDistance * 2f) / EdgeRaySpacing);

            for (int i = 0; i < rays; i++)
            {
                float offset = (i - (rays * 0.5f)) * EdgeRaySpacing;
                Vector3 rayOrigin = origin + (right * offset) + (forward * EdgeCheckDistance);
                Vector3 down = Vector3.down;

                // Check if there's a ground below within the minimum fall height
                if (!Physics.Raycast(rayOrigin, down, MinFallHeight, AIRefactoredLayerMasks.NavObstacleMask))
                {
                    Vector3 navCheckPoint = rayOrigin + down * MinFallHeight;
                    if (!NavMesh.SamplePosition(navCheckPoint, out NavMeshHit hit, 1.0f, NavMesh.AllAreas) || hit.distance > NavSampleTolerance)
                    {
                        if (UnityEngine.Random.value > 0.85f)
                            continue;
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// Attempts corner peek (lean or crouch) if a wall is detected on either side.
        /// </summary>
        private bool TryCornerPeekWithCrouch(float time)
        {
            Vector3 origin = _bot.Position + Vector3.up * WallCheckHeight;
            Vector3 right = _bot.Transform.right;
            Vector3 left = -right;
            float dist = BaseWallCheckDistance + ((1f - _profile.Caution) * 0.5f);

            if (CheckWall(origin, left, dist))
                return TriggerLeanOrCrouch(BotTiltType.left, time);
            if (CheckWall(origin, right, dist))
                return TriggerLeanOrCrouch(BotTiltType.right, time);

            return false;
        }

        /// <summary>
        /// Checks if a wall is detected in the specified direction.
        /// </summary>
        private bool CheckWall(Vector3 origin, Vector3 dir, float dist)
        {
            if (!Physics.Raycast(origin, dir, out RaycastHit hit, dist, AIRefactoredLayerMasks.CoverRayMask))
                return false;
            return Vector3.Dot(hit.normal, dir) < WallAngleThreshold;
        }

        /// <summary>
        /// Triggers lean or crouch overlay—NO PAUSE.
        /// </summary>
        private bool TriggerLeanOrCrouch(BotTiltType side, float time)
        {
            if (_profile.Caution > 0.52f && !_isCrouching && AttemptCrouch(time))
            {
                _isCrouching = true;
                return true;
            }

            if (!_isLeaning && _cache?.Tilt != null)
            {
                _cache.Tilt.Set(side);
                _isLeaning = true;
            }

            return true;
        }

        /// <summary>
        /// Attempts to set crouch pose overlay.
        /// </summary>
        private bool AttemptCrouch(float time)
        {
            if (_cache?.PoseController != null && _cache.PoseController.GetPoseLevel() > 30f)
            {
                _cache.PoseController.SetCrouch();
                _prepCrouchUntil = time + PrepCrouchTime;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Initiates idle scan overlay with randomized yaw (NO pause).
        /// </summary>
        private void StartIdleScan(float time)
        {
            _scanTargetYaw = UnityEngine.Random.Range(-MaxScanAngle, MaxScanAngle);
            _scanStartTime = time;
            _scanInProgress = true;
        }

        /// <summary>
        /// Updates idle scan—NO pause at end.
        /// </summary>
        private void UpdateIdleScan(float time)
        {
            _scanInProgress = false;
        }

        /// <summary>
        /// Resets lean/crouch/scan state overlays (never disables, never tick-moves).
        /// </summary>
        private void ResetLean(float time)
        {
            try
            {
                if (_cache?.Tilt != null && _cache.Tilt._coreTilt)
                {
                    _cache.Tilt.tiltOff = time - 1f;
                    _cache.Tilt.ManualUpdate();
                }
            }
            catch { }

            _isLeaning = false;
            _isCrouching = false;
            _scanInProgress = false;
        }

        #endregion
    }
}
