// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Scans for corners and ledges to trigger tactical lean and movement pauses.
    /// Aggressive bots peek faster and lean sooner. Defensive bots avoid ledges and corners.
    /// </summary>
    public sealed class BotCornerScanner
    {
        private const float BasePauseDuration = 0.4f;
        private const float BaseWallCheckDistance = 1.5f;
        private const float EdgeCheckDistance = 1.25f;
        private const float EdgeRaySpacing = 0.25f;
        private const float MinFallHeight = 2.2f;
        private const float PrepCrouchTime = 0.75f;
        private const float WallAngleThreshold = 0.7f;
        private const float WallCheckHeight = 1.5f;

        private static readonly LayerMask _coverCheckMask = LayerMask.GetMask(
            "HighPolyCollider",
            "Terrain",
            "LowPolyCollider",
            "DoorLowPolyCollider");

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private BotPersonalityProfile? _profile;
        private float _pauseUntil;
        private float _prepCrouchUntil;

        /// <summary>
        /// Initializes the corner scanner with a bot's component cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            this._cache = cache;
            this._bot = cache.Bot ?? throw new InvalidOperationException("Bot is null in cache.");
            this._profile = cache.AIRefactoredBotOwner?.PersonalityProfile
                            ?? throw new InvalidOperationException("Missing personality profile.");
        }

        /// <summary>
        /// Called every frame to update the scanner's behavior.
        /// </summary>
        public void Tick(float time)
        {
            if (!this.IsEligible(time))
            {
                return;
            }

            if (this.IsApproachingEdge())
            {
                this._cache?.Tilt?.Stop();
                this.PauseMovement(time);
                return;
            }

            if (this.TryCornerPeekWithCrouch(time))
            {
                return;
            }

            this.ResetLean(time);
        }

        private bool AttemptCrouch(float time)
        {
            if (this._cache != null && this._cache.PoseController != null && this._cache.PoseController.GetPoseLevel() > 30f)
            {
                this._cache.PoseController.SetCrouch();
                this._prepCrouchUntil = time + PrepCrouchTime;
                return true;
            }

            return false;
        }

        private bool CheckWall(Vector3 origin, Vector3 direction, float distance)
        {
            RaycastHit hit;
            if (Physics.Raycast(origin, direction, out hit, distance, _coverCheckMask))
            {
                return Vector3.Dot(hit.normal, direction) < WallAngleThreshold;
            }

            return false;
        }

        private bool IsApproachingEdge()
        {
            if (this._bot == null)
            {
                return false;
            }

            Vector3 start = this._bot.Position + Vector3.up * 0.2f;
            Vector3 forward = this._bot.Transform.forward;
            Vector3 right = this._bot.Transform.right;
            int rayCount = Mathf.CeilToInt(EdgeRaySpacing * 2f / EdgeRaySpacing) + 1;

            for (int i = 0; i < rayCount; i++)
            {
                float offset = (i - (rayCount - 1) / 2f) * EdgeRaySpacing;
                Vector3 origin = start + right * offset + forward * EdgeCheckDistance;

                if (!Physics.Raycast(origin, Vector3.down, MinFallHeight, _coverCheckMask))
                {
                    NavMeshHit navHit;
                    if (!NavMesh.SamplePosition(origin + Vector3.down * MinFallHeight, out navHit, 1.0f, NavMesh.AllAreas))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private bool IsEligible(float time)
        {
            return this._bot != null
                   && !this._bot.IsDead
                   && this._bot.Mover != null
                   && time >= this._pauseUntil
                   && time >= this._prepCrouchUntil
                   && this._bot.Memory?.GoalEnemy == null;
        }

        private void PauseMovement(float time)
        {
            if (this._bot == null || this._profile == null)
            {
                return;
            }

            float duration = BasePauseDuration * Mathf.Clamp(0.5f + this._profile.Caution, 0.4f, 2.0f);
            this._bot.Mover?.MovementPause(duration);
            this._pauseUntil = time + duration;
        }

        private void ResetLean(float time)
        {
            if (this._cache != null && this._cache.Tilt != null && this._cache.Tilt._coreTilt)
            {
                this._cache.Tilt.tiltOff = time - 1f;
                this._cache.Tilt.ManualUpdate();
            }
        }

        private void TriggerLean(BotTiltType side, float time)
        {
            if (this._cache?.Tilt != null)
            {
                this._cache.Tilt.Set(side);
                this.PauseMovement(time);
            }
        }

        private bool TryCornerPeekWithCrouch(float time)
        {
            if (this._bot == null || this._profile == null)
            {
                return false;
            }

            Vector3 origin = this._bot.Position + Vector3.up * WallCheckHeight;
            Vector3 right = this._bot.Transform.right;
            Vector3 left = -right;
            float scanDistance = BaseWallCheckDistance + (1f - this._profile.Caution) * 0.5f;

            if (this.CheckWall(origin, left, scanDistance))
            {
                if (this.AttemptCrouch(time))
                {
                    return true;
                }

                this.TriggerLean(BotTiltType.left, time);
                return true;
            }

            if (this.CheckWall(origin, right, scanDistance))
            {
                if (this.AttemptCrouch(time))
                {
                    return true;
                }

                this.TriggerLean(BotTiltType.right, time);
                return true;
            }

            return false;
        }
    }
}
