// <auto-generated>
//   AI-Refactored: BotCornerScanner.cs (Ultimate Realism – Beyond Diamond Edition)
//   Bulletproof, centralized-tick, squad-aware, micro-randomized, and fully humanized edge/corner scanning.
//   All anticipation, hesitation, and edge-logic is personality, squad, and memory-aware. No teleport, no fallback disables.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Provides ultra-realistic, human-like edge/corner scanning for bots.
    /// All anticipation, micro-hesitation, and squad/context logic is personality and error-aware.
    /// No subsystem disables or fallback triggers. Multiplayer/headless safe.
    /// </summary>
    public sealed class BotCornerScanner
    {
        #region Constants

        private const float BasePauseDuration = 0.41f;
        private const float BaseWallCheckDistance = 1.5f;
        private const float EdgeCheckDistance = 1.18f;
        private const float EdgeRaySpacing = 0.26f;
        private const float MinFallHeight = 2.15f;
        private const float PrepCrouchTime = 0.75f;
        private const float WallAngleThreshold = 0.69f;
        private const float WallCheckHeight = 1.43f;
        private const float NavSampleTolerance = 0.67f;
        private const float MinPauseJitter = 0.11f;
        private const float MaxPauseJitter = 0.39f;
        private const float SquadSpacing = 1.4f;
        private const float SquadScanDelay = 0.19f;
        private const float AnticipationPauseMin = 0.08f;
        private const float AnticipationPauseMax = 0.15f;
        private const float MaxScanAngle = 15.0f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Log = Plugin.LoggerInstance;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotPersonalityProfile _profile;

        private float _pauseUntil;
        private float _prepCrouchUntil;
        private float _lastSquadScan;
        private bool _isLeaning;
        private bool _isCrouching;
        private bool _isInitialized;

        // Humanization state for scan/anticipation
        private float _scanTargetYaw;
        private float _scanStartTime;
        private float _scanPauseDuration;
        private bool _scanInProgress;

        #endregion

        #region Initialization

        /// <summary>
        /// Constructor for pool/struct creation.
        /// </summary>
        public BotCornerScanner() { }

        /// <summary>
        /// Full initialization for AIRefactored bots.
        /// </summary>
        public BotCornerScanner(BotOwner bot, BotComponentCache cache)
        {
            try { Initialize(bot, cache); }
            catch (Exception ex) { Log.LogError("[BotCornerScanner] Constructor init failed: " + ex); }
        }

        /// <summary>
        /// Wires up bot, cache, and profile for corner/edge scanning.
        /// </summary>
        public void Initialize(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Transform == null)
                return;

            BotPersonalityProfile profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null)
                return;

            _bot = bot;
            _cache = cache;
            _profile = profile;
            _isInitialized = true;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Main BotBrain-driven tick for edge/corner scanning logic.
        /// All failures are locally isolated.
        /// </summary>
        public void Tick(float time)
        {
            try
            {
                if (!_isInitialized || _bot == null || _cache == null || _profile == null)
                    return;
                if (_bot.IsDead || _bot.Mover == null || _bot.Transform == null)
                    return;
                if (_cache.Tilt == null || _cache.PoseController == null)
                    return;
                if (_bot.Memory?.GoalEnemy != null) // Don't scan corners during direct combat
                {
                    ResetLean(time);
                    return;
                }
                if (time < _pauseUntil || time < _prepCrouchUntil)
                    return;

                // Stagger squad corner checks – never allow corner crowding
                if (_bot.BotsGroup != null && _bot.BotsGroup.MembersCount > 1)
                {
                    if (time - _lastSquadScan < SquadScanDelay)
                        return;

                    Vector3 myPos = _bot.Position;
                    for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                    {
                        BotOwner mate = _bot.BotsGroup.Member(i);
                        if (mate != null && mate != _bot && !mate.IsDead)
                        {
                            float dist = (mate.Position - myPos).sqrMagnitude;
                            if (dist < SquadSpacing * SquadSpacing)
                            {
                                PauseMovement(time, 0.12f, 0.22f);
                                _lastSquadScan = time;
                                return;
                            }
                        }
                    }
                }

                // Simulate human uncertainty: randomly "overthink" at corners with personality factor
                float falsePause = UnityEngine.Random.value;
                if (falsePause < _profile.Caution * 0.045f)
                {
                    ResetLean(time);
                    PauseMovement(time, 0.05f, 0.11f);
                    return;
                }

                // Edge anticipation: if near edge/ledge, human-like pre-move hesitation
                if (IsApproachingEdge())
                {
                    AnticipationPause(time);
                    return;
                }

                // Scan + lean/crouch logic: scan both sides for wall/cover; only peek with anticipation
                if (TryCornerPeekWithCrouch(time))
                    return;

                // Idle scan when at idle or patrol, no corner: human-like "look-around" with smooth pause
                if (!_scanInProgress)
                {
                    StartIdleScan(time);
                }
                else
                {
                    UpdateIdleScan(time);
                }

                ResetLean(time);
            }
            catch (Exception ex)
            {
                Log.LogError("[BotCornerScanner] Tick failed: " + ex);
            }
        }

        #endregion

        #region Edge + Corner Logic

        /// <summary>
        /// Returns true if bot is about to step off a ledge or abrupt nav boundary.
        /// </summary>
        private bool IsApproachingEdge()
        {
            try
            {
                Vector3 origin = _bot.Position + Vector3.up * 0.2f;
                Vector3 forward = _bot.Transform.forward;
                Vector3 right = _bot.Transform.right;
                int rays = Mathf.CeilToInt((EdgeCheckDistance * 2f) / EdgeRaySpacing);

                for (int i = 0; i < rays; i++)
                {
                    float offset = (i - (rays * 0.5f)) * EdgeRaySpacing;
                    Vector3 rayOrigin = origin + (right * offset) + (forward * EdgeCheckDistance);
                    Vector3 rayDown = rayOrigin + Vector3.down * MinFallHeight;

                    if (!Physics.Raycast(rayOrigin, Vector3.down, MinFallHeight, AIRefactoredLayerMasks.NavObstacleMask))
                    {
                        if (!NavMesh.SamplePosition(rayDown, out NavMeshHit hit, 1.0f, NavMesh.AllAreas) || hit.distance > NavSampleTolerance)
                        {
                            if (UnityEngine.Random.value > 0.85f)
                                continue; // Minor chance of false negative for realism
                            return true;
                        }
                    }
                }
                return false;
            }
            catch
            {
                // Never allow edge checks to break scanning or movement
                return false;
            }
        }

        /// <summary>
        /// Attempts human-like corner peeking or crouch, based on context, wall rays, and profile.
        /// </summary>
        private bool TryCornerPeekWithCrouch(float time)
        {
            try
            {
                Vector3 origin = _bot.Position + Vector3.up * WallCheckHeight;
                Vector3 right = _bot.Transform.right;
                Vector3 left = -right;
                float dist = BaseWallCheckDistance + ((1f - _profile.Caution) * 0.5f);

                if (CheckWall(origin, left, dist))
                    return TriggerLeanOrCrouch(BotTiltType.left, time);
                if (CheckWall(origin, right, dist))
                    return TriggerLeanOrCrouch(BotTiltType.right, time);

                return false;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Returns true if there is a wall close enough for corner peek.
        /// </summary>
        private bool CheckWall(Vector3 origin, Vector3 dir, float dist)
        {
            try
            {
                if (!Physics.Raycast(origin, dir, out RaycastHit hit, dist, AIRefactoredLayerMasks.CoverRayMask))
                    return false;
                return Vector3.Dot(hit.normal, dir) < WallAngleThreshold;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Triggers lean or crouch as needed, personality/context-driven.
        /// </summary>
        private bool TriggerLeanOrCrouch(BotTiltType side, float time)
        {
            if (_profile.Caution > 0.52f && !_isCrouching && AttemptCrouch(time))
            {
                _isCrouching = true;
                return true;
            }

            if (!_isLeaning)
            {
                _cache.Tilt.Set(side);
                PauseMovement(time, 0.09f, 0.20f);
                _isLeaning = true;
            }

            return true;
        }

        /// <summary>
        /// Attempts a crouch for more cautious peeking.
        /// </summary>
        private bool AttemptCrouch(float time)
        {
            try
            {
                if (_cache.PoseController.GetPoseLevel() > 30f)
                {
                    _cache.PoseController.SetCrouch();
                    _prepCrouchUntil = time + PrepCrouchTime;
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region Humanization & Idle Scan

        /// <summary>
        /// Starts a human-like idle scan with randomized pause/yaw, simulating player "look around."
        /// </summary>
        private void StartIdleScan(float time)
        {
            _scanTargetYaw = UnityEngine.Random.Range(-MaxScanAngle, MaxScanAngle);
            _scanPauseDuration = UnityEngine.Random.Range(0.23f, 0.61f) + _profile.Caution * 0.2f;
            _scanStartTime = time;
            _scanInProgress = true;
            // NOTE: BotLookController should actually perform head turn (this is just flag for BotBrain tick sequence)
            PauseMovement(time, 0.13f, 0.23f);
        }

        /// <summary>
        /// Updates an ongoing idle scan, enforcing irregular pause durations and head turning.
        /// </summary>
        private void UpdateIdleScan(float time)
        {
            if (time - _scanStartTime >= _scanPauseDuration)
            {
                _scanInProgress = false;
                PauseMovement(time, 0.05f, 0.13f); // Insert brief hesitation after scan
            }
            // Actual head/yaw update should be managed in BotLookController; this just models anticipation logic.
        }

        /// <summary>
        /// Triggers a small anticipation pause before dangerous moves, for maximum realism.
        /// </summary>
        private void AnticipationPause(float time)
        {
            PauseMovement(time, AnticipationPauseMin, AnticipationPauseMax);
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Pauses movement for a human-randomized hesitation (used for all peeks/edges).
        /// </summary>
        private void PauseMovement(float time, float minJitter = MinPauseJitter, float maxJitter = MaxPauseJitter)
        {
            float jitter = UnityEngine.Random.Range(minJitter, maxJitter);
            float duration = (BasePauseDuration + jitter) * Mathf.Clamp(0.47f + _profile.Caution, 0.36f, 2.0f);
            if (_bot.Mover != null)
                _bot.Mover.MovementPause(duration);
            _pauseUntil = time + duration;
        }

        /// <summary>
        /// Fully resets lean/crouch states on logic reset, squad move, or after edge.
        /// </summary>
        private void ResetLean(float time)
        {
            try
            {
                if (_cache.Tilt != null && _cache.Tilt._coreTilt)
                {
                    _cache.Tilt.tiltOff = time - 1f;
                    _cache.Tilt.ManualUpdate();
                }
                _isLeaning = false;
                _isCrouching = false;
                _scanInProgress = false;
            }
            catch
            {
                _isLeaning = false;
                _isCrouching = false;
                _scanInProgress = false;
            }
        }

        #endregion
    }
}
