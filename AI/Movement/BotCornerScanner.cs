// <auto-generated>
//   AI-Refactored: BotCornerScanner.cs (Ultra-Platinum++ Overlay/Event Edition – June 2025, Zero-Teleport Blueprint)
//   Overlay/event-driven corner scanning—NO PAUSE or anticipation overlays.
//   Only pose/lean overlays, never teleports, never disables, NavMesh-validated, multiplayer/headless-safe.
//   All edge/corner detection uses pooled, rate-limited logic with zero alloc and squad overlap safety.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Overlay/event-driven corner/edge scan and pose/lean overlay system.
    /// Never issues movement, never halts/ticks, only overlays human-like lean/crouch at edges/corners.
    /// Bulletproof: fully pooled, error-isolated, squad/cover-aware, headless-safe.
    /// </summary>
    public sealed class BotCornerScanner
    {
        #region Constants

        private const float BaseWallCheckDistance = 1.5f;
        private const float EdgeCheckDistance = 1.18f;
        private const float EdgeRaySpacing = 0.26f;
        private const float MinFallHeight = 2.15f;
        private const float PrepCrouchTime = 0.75f;
        private const float WallAngleThreshold = 0.69f;
        private const float WallCheckHeight = 1.43f;
        private const float NavSampleTolerance = 0.67f;
        private const float SquadSpacing = 1.4f;
        private const float SquadScanDelay = 0.19f;
        private const float MaxScanAngle = 15.0f;
        private const float LeanCooldown = 0.64f;
        private const float ScanCooldown = 0.45f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Log = Plugin.LoggerInstance;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotPersonalityProfile _profile;

        private float _prepCrouchUntil;
        private float _lastSquadScan;
        private float _lastLeanTime;
        private float _lastScanTime;
        private bool _isLeaning;
        private bool _isCrouching;
        private bool _isInitialized;
        private float _scanTargetYaw;
        private float _scanStartTime;
        private bool _scanInProgress;

        #endregion

        #region Public API

        /// <summary>
        /// Attach and configure for this bot (called once per bot).
        /// </summary>
        public void Initialize(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Transform == null)
                return;

            var profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null)
                return;

            _bot = bot;
            _cache = cache;
            _profile = profile;
            _isInitialized = true;
        }

        /// <summary>
        /// Main overlay/event tick (BotBrain only). Only overlays lean/crouch, never issues movement or disables.
        /// </summary>
        public void Tick(float time)
        {
            try
            {
                if (!_isInitialized || _bot == null || _cache == null || _profile == null)
                    return;
                if (_bot.IsDead || _bot.Mover == null || _bot.Transform == null)
                    return;
                if (_cache.Tilt == null || _cache.PoseController == null)
                    return;
                if (_bot.Memory?.GoalEnemy != null)
                {
                    ResetOverlays(time);
                    return;
                }
                if (time < _prepCrouchUntil)
                    return;

                // Squad overlap: anti-stack logic, no pose/lean if blocked by squadmate.
                if (HandleSquadSpacing(time))
                {
                    ResetOverlays(time);
                    return;
                }

                // Edge detection: no movement, only overlays.
                if (IsApproachingEdge())
                {
                    // Optional: Add a small lean or shoulder pose overlay for realism, no pause.
                    TryEdgeLean(time);
                }

                // Wall/corner scan logic: lean/crouch only.
                if (TryCornerPeekWithCrouch(time))
                    return;

                // Human-like idle look/scan at corners (no movement).
                if (!_scanInProgress && time > _lastScanTime + ScanCooldown)
                    StartIdleScan(time);
                else if (_scanInProgress)
                    UpdateIdleScan(time);

                ResetOverlays(time);
            }
            catch (Exception ex)
            {
                Log.LogError("[BotCornerScanner] Tick failed: " + ex);
            }
        }

        #endregion

        #region Overlay/Scan Logic

        /// <summary>
        /// Squad collision/overlap check. Returns true if too close to squadmate (skip overlays).
        /// </summary>
        private bool HandleSquadSpacing(float time)
        {
            if (_bot?.BotsGroup == null || _bot.BotsGroup.MembersCount <= 1)
                return false;
            if (time - _lastSquadScan < SquadScanDelay)
                return false;

            Vector3 myPos = _bot.Position;
            for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
            {
                var mate = _bot.BotsGroup.Member(i);
                if (mate == null || mate == _bot || mate.IsDead)
                    continue;
                if ((mate.Position - myPos).sqrMagnitude < SquadSpacing * SquadSpacing)
                {
                    _lastSquadScan = time;
                    return true;
                }
            }
            _lastSquadScan = time;
            return false;
        }

        /// <summary>
        /// Detect if bot is at an edge/dropoff (no NavMesh movement, just overlay).
        /// </summary>
        private bool IsApproachingEdge()
        {
            Vector3 origin = _bot.Position + Vector3.up * 0.2f;
            Vector3 forward = _bot.Transform.forward;
            Vector3 right = _bot.Transform.right;
            int rays = Mathf.CeilToInt((EdgeCheckDistance * 2f) / EdgeRaySpacing);

            for (int i = 0; i < rays; i++)
            {
                float offset = (i - (rays * 0.5f)) * EdgeRaySpacing;
                Vector3 rayOrigin = origin + (right * offset) + (forward * EdgeCheckDistance);
                Vector3 down = Vector3.down;
                // Only checks edge, never moves or disables
                if (!Physics.Raycast(rayOrigin, down, MinFallHeight, AIRefactoredLayerMasks.NavObstacleMask))
                {
                    Vector3 navCheckPoint = rayOrigin + down * MinFallHeight;
                    if (!NavMesh.SamplePosition(navCheckPoint, out NavMeshHit hit, 1.0f, NavMesh.AllAreas) || hit.distance > NavSampleTolerance)
                    {
                        if (UnityEngine.Random.value > 0.85f)
                            continue;
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// Attempts to overlay a lean or crouch at corners, never moves.
        /// </summary>
        private bool TryCornerPeekWithCrouch(float time)
        {
            Vector3 origin = _bot.Position + Vector3.up * WallCheckHeight;
            Vector3 right = _bot.Transform.right;
            Vector3 left = -right;
            float dist = BaseWallCheckDistance + ((1f - _profile.Caution) * 0.5f);

            if (CheckWall(origin, left, dist))
                return TriggerLeanOrCrouch(BotTiltType.left, time);
            if (CheckWall(origin, right, dist))
                return TriggerLeanOrCrouch(BotTiltType.right, time);

            return false;
        }

        /// <summary>
        /// Checks if a wall/corner is present for lean/crouch overlay.
        /// </summary>
        private bool CheckWall(Vector3 origin, Vector3 dir, float dist)
        {
            if (!Physics.Raycast(origin, dir, out RaycastHit hit, dist, AIRefactoredLayerMasks.CoverRayMask))
                return false;
            return Vector3.Dot(hit.normal, dir) < WallAngleThreshold;
        }

        /// <summary>
        /// Triggers lean or crouch overlay (rate-limited, no spam).
        /// </summary>
        private bool TriggerLeanOrCrouch(BotTiltType side, float time)
        {
            if (_profile.Caution > 0.52f && !_isCrouching && AttemptCrouch(time))
            {
                _isCrouching = true;
                return true;
            }
            if (!_isLeaning && _cache?.Tilt != null && time > _lastLeanTime + LeanCooldown)
            {
                _cache.Tilt.Set(side);
                _isLeaning = true;
                _lastLeanTime = time;
            }
            return true;
        }

        /// <summary>
        /// Attempts a crouch overlay for realistic peek (rate-limited).
        /// </summary>
        private bool AttemptCrouch(float time)
        {
            if (_cache?.PoseController != null && _cache.PoseController.GetPoseLevel() > 30f)
            {
                _cache.PoseController.SetCrouch();
                _prepCrouchUntil = time + PrepCrouchTime;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Human-like idle scan/peek logic (no movement).
        /// </summary>
        private void StartIdleScan(float time)
        {
            _scanTargetYaw = UnityEngine.Random.Range(-MaxScanAngle, MaxScanAngle);
            _scanStartTime = time;
            _scanInProgress = true;
            _lastScanTime = time;
        }

        /// <summary>
        /// Update/cancel scan (no snap, no movement).
        /// </summary>
        private void UpdateIdleScan(float time)
        {
            _scanInProgress = false;
        }

        /// <summary>
        /// Small lean overlay at edge, if eligible (never disables).
        /// </summary>
        private void TryEdgeLean(float time)
        {
            if (!_isLeaning && _cache?.Tilt != null && time > _lastLeanTime + LeanCooldown)
            {
                BotTiltType side = UnityEngine.Random.value > 0.5f ? BotTiltType.left : BotTiltType.right;
                _cache.Tilt.Set(side);
                _isLeaning = true;
                _lastLeanTime = time;
            }
        }

        /// <summary>
        /// Reset overlays after scan cycle (never disables).
        /// </summary>
        private void ResetOverlays(float time)
        {
            try
            {
                if (_cache?.Tilt != null && _cache.Tilt._coreTilt)
                {
                    _cache.Tilt.tiltOff = time - 1f;
                    _cache.Tilt.ManualUpdate();
                }
            }
            catch { }
            _isLeaning = false;
            _isCrouching = false;
            _scanInProgress = false;
        }

        #endregion
    }
}
