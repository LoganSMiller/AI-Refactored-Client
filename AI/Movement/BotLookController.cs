// <auto-generated>
//   AI-Refactored: BotLookController.cs (Diamond Stability+Realism, June 2025)
//   Overlay/event-driven only, anti-spam, bulletproof stabilization, human-like idle and aim.
//   Never snaps, never jitters, never over-corrects. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Bulletproof overlay/event-driven look logic, anti-jitter, anti-spam, never snaps.
    /// All transitions strictly stabilized, only commits to meaningful target switches.
    /// </summary>
    public sealed class BotLookController
    {
        #region Constants

        private const float MaxTurnSpeedYaw = 6.6f;
        private const float MaxTurnSpeedPitch = 4.4f;
        private const float MaxDeltaYaw = 13.0f;      // Hard clamp per-frame
        private const float MaxDeltaPitch = 9.0f;     // Hard clamp per-frame
        private const float LookSwitchCooldown = 0.22f;
        private const float IdleScanCone = 22.0f;
        private const float IdleScanDurationMin = 1.2f, IdleScanDurationMax = 2.0f;
        private const float VisionBlockCheckDist = 38f;
        private const float LookFallbackDist = 1.55f;
        private const float MinLookDistanceSqr = 0.18f;
        private const float YawInertiaAccel = 0.10f, PitchInertiaAccel = 0.06f;
        private const float StabilityThresholdSqr = 0.33f; // Minimum sqr distance to allow a look switch

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private float _currentYaw;
        private float _currentPitch;
        private float _yawVelocity, _pitchVelocity;
        private float _nextIdleScanTime, _idleTargetYaw;
        private Vector3 _fallbackLookTarget, _lastLookTarget;
        private float _lastLookSwitchTime;
        private bool _frozen;

        #endregion

        #region Construction

        public BotLookController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
            {
                Logger.LogError("[BotLookController] Null bot/cache at construction.");
                throw new ArgumentException("Invalid BotLookController parameters.");
            }

            _bot = bot;
            _cache = cache;

            Player player = EFTPlayerUtil.ResolvePlayer(bot);
            Transform body = EFTPlayerUtil.GetTransform(player);
            Vector3 forward = body != null ? body.forward : Vector3.forward;
            _currentYaw = body != null ? body.rotation.eulerAngles.y : 0f;
            _currentPitch = 0f;
            _yawVelocity = 0f;
            _pitchVelocity = 0f;
            _fallbackLookTarget = bot.Position + forward;
            _lastLookTarget = _fallbackLookTarget;
            _lastLookSwitchTime = Time.time;
            _nextIdleScanTime = Time.time + UnityEngine.Random.Range(1.2f, 2.1f);
        }

        #endregion

        #region Public API

        public void Tick(float deltaTime)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.IsDead || !GameWorldHandler.IsSafeToInitialize)
                    return;
                if (_frozen && Time.time - _lastLookSwitchTime < 1.0f)
                    return;

                Player player = EFTPlayerUtil.ResolvePlayer(_bot);
                if (!EFTPlayerUtil.IsValid(player))
                    return;

                Transform body = EFTPlayerUtil.GetTransform(player);
                if (body == null)
                    return;

                Vector3 origin = body.position;
                Vector3 nextTarget = _fallbackLookTarget;
                bool switching = false;

                // --- 1. Enemy target logic (locks out idle scan if present) ---
                if (_cache?.ThreatSelector != null)
                {
                    string id = _cache.ThreatSelector.GetTargetProfileId();
                    Player enemy = EFTPlayerUtil.ResolvePlayerById(id);
                    if (EFTPlayerUtil.IsValid(enemy))
                    {
                        nextTarget = EFTPlayerUtil.GetPosition(enemy);
                        if ((nextTarget - _lastLookTarget).sqrMagnitude > StabilityThresholdSqr)
                        {
                            if (Time.time - _lastLookSwitchTime > LookSwitchCooldown)
                            {
                                switching = true;
                                _lastLookSwitchTime = Time.time;
                                _lastLookTarget = nextTarget;
                            }
                            else
                            {
                                nextTarget = _lastLookTarget;
                            }
                        }
                        else
                        {
                            nextTarget = _lastLookTarget;
                        }
                    }
                }

                // --- 2. Idle scan (never conflicts with enemy tracking) ---
                string threatId = _cache?.ThreatSelector?.GetTargetProfileId();
                bool hasThreat = !string.IsNullOrEmpty(threatId);
                if (!switching && !hasThreat)
                {
                    if (Time.time > _nextIdleScanTime)
                    {
                        _idleTargetYaw = _currentYaw + UnityEngine.Random.Range(-IdleScanCone, IdleScanCone);
                        _nextIdleScanTime = Time.time + UnityEngine.Random.Range(IdleScanDurationMin, IdleScanDurationMax);
                        Vector3 idleDir = Quaternion.Euler(0f, _idleTargetYaw, 0f) * Vector3.forward;
                        nextTarget = origin + idleDir * 2.2f;
                        _lastLookSwitchTime = Time.time;
                        _lastLookTarget = nextTarget;
                    }
                    else
                    {
                        nextTarget = _lastLookTarget;
                    }
                }

                // --- 3. Fallback if invalid target ---
                if (!IsValid(nextTarget))
                {
                    Vector3 lookDir = _bot.LookDirection.sqrMagnitude > 0.01f ? _bot.LookDirection.normalized : Vector3.forward;
                    nextTarget = _bot.Position + lookDir * LookFallbackDist;
                }

                // --- 4. Clamp and validate ---
                nextTarget = ValidateLookTarget(origin, nextTarget);

                Vector3 lookVec = nextTarget - origin;
                if (lookVec.sqrMagnitude < MinLookDistanceSqr)
                {
                    lookVec = _bot.LookDirection.sqrMagnitude > 0.01f
                        ? _bot.LookDirection.normalized
                        : Vector3.forward;
                }

                float targetYaw = Mathf.Atan2(lookVec.x, lookVec.z) * Mathf.Rad2Deg;
                float targetPitch = -Mathf.Atan2(lookVec.y, new Vector2(lookVec.x, lookVec.z).magnitude) * Mathf.Rad2Deg;

                float yawDiff = Mathf.DeltaAngle(_currentYaw, targetYaw);
                float pitchDiff = Mathf.DeltaAngle(_currentPitch, targetPitch);

                // --- 5. Ultra-strict smoothing ---
                _yawVelocity += Mathf.Clamp(yawDiff, -MaxDeltaYaw, MaxDeltaYaw) * YawInertiaAccel * deltaTime;
                _pitchVelocity += Mathf.Clamp(pitchDiff, -MaxDeltaPitch, MaxDeltaPitch) * PitchInertiaAccel * deltaTime;
                _yawVelocity = Mathf.Clamp(_yawVelocity, -MaxTurnSpeedYaw, MaxTurnSpeedYaw);
                _pitchVelocity = Mathf.Clamp(_pitchVelocity, -MaxTurnSpeedPitch, MaxTurnSpeedPitch);

                float deltaYaw = _yawVelocity * deltaTime * 60f;
                float deltaPitch = _pitchVelocity * deltaTime * 60f;
                deltaYaw = Mathf.Clamp(deltaYaw, -MaxDeltaYaw, MaxDeltaYaw);
                deltaPitch = Mathf.Clamp(deltaPitch, -MaxDeltaPitch, MaxDeltaPitch);

                _currentYaw = Mathf.Repeat(_currentYaw + deltaYaw, 360f);
                _currentPitch = Mathf.Clamp(_currentPitch + deltaPitch, -42f, 56f);

                Quaternion targetRot = Quaternion.Euler(_currentPitch, _currentYaw, 0f);
                if (!float.IsNaN(targetRot.x) && !float.IsNaN(targetRot.y) && !float.IsNaN(targetRot.z))
                {
                    if (Mathf.Abs(_currentPitch) > 63f)
                        _currentPitch = Mathf.Clamp(_currentPitch, -32f, 48f);
                    body.rotation = targetRot;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotLookController] Tick failed: " + ex);
            }
        }

        public void SetLookTarget(Vector3 worldPos)
        {
            if (IsValid(worldPos))
            {
                _fallbackLookTarget = worldPos;
                _lastLookTarget = worldPos;
            }
        }

        public void FreezeLook() => _frozen = true;
        public void ResumeLook() => _frozen = false;
        public Vector3 GetLookDirection() => _bot != null ? _bot.LookDirection : Vector3.forward;

        #endregion

        #region Internal Look Logic

        private Vector3 ValidateLookTarget(Vector3 origin, Vector3 rawTarget)
        {
            Vector3 dir = rawTarget - origin;
            float dist = dir.magnitude;
            if (dist < 0.1f)
                return rawTarget;

            if (Physics.Raycast(origin + Vector3.up * 1.44f, dir.normalized, out RaycastHit hit, Mathf.Min(dist, VisionBlockCheckDist), AIRefactoredLayerMasks.VisionBlockers))
            {
                return hit.point - dir.normalized * 0.23f;
            }
            return rawTarget;
        }

        private static bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z);
        }

        #endregion
    }
}
