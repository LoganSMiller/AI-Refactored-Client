// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Controls advanced bot movement logic including inertia, smooth look, combat strafe, lean, jump, and flank mechanics.
    /// Designed for natural, player-like behavior and fluid real-time responsiveness.
    /// </summary>
    public sealed class BotMovementController
    {
        #region Constants

        private const float CornerScanInterval = 1.2f;
        private const float InertiaWeight = 8f;
        private const float LeanCooldown = 1.5f;
        private const float LookSmoothSpeed = 6f;
        private const float MaxStuckDuration = 1.5f;
        private const float MinMoveThreshold = 0.05f;
        private const float ScanDistance = 2.5f;
        private const float ScanRadius = 0.25f;
        private const float StuckThreshold = 0.1f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private BotOwner? _bot;
        private BotComponentCache? _cache;
        private BotJumpController? _jump;
        private BotMovementTrajectoryPlanner? _trajectory;

        private Vector3 _lastVelocity = Vector3.zero;
        private float _nextLeanAllowed;
        private float _nextScanTime;
        private float _strafeTimer;
        private float _stuckTimer;
        private bool _inLootingMode;
        private bool _isStrafingRight = true;

        #endregion

        #region Public API

        public void EnterLootingMode() => _inLootingMode = true;
        public void ExitLootingMode() => _inLootingMode = false;

        public void Initialize(BotComponentCache cache)
        {
            if (cache?.Bot == null)
                throw new ArgumentNullException(nameof(cache));

            _cache = cache;
            _bot = cache.Bot;
            _trajectory = new BotMovementTrajectoryPlanner(_bot, cache);
            _jump = new BotJumpController(_bot, cache);
            _nextScanTime = Time.time;
        }

        public void Tick(float deltaTime)
        {
            if (_bot == null || _cache == null || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
                return;

            if (_bot.IsDead || _bot.GetPlayer.HealthController == null || !_bot.GetPlayer.HealthController.IsAlive)
                return;

            if (_cache.PanicHandler?.IsPanicking == true)
                return;

            _jump?.Tick(deltaTime);

            if (_cache.DoorOpener != null && !_cache.DoorOpener.Update())
            {
                Logger.LogDebug("[Movement] Door blocked — waiting.");
                return;
            }

            if (Time.time >= _nextScanTime)
            {
                ScanAhead();
                _nextScanTime = Time.time + CornerScanInterval;
            }

            if (_bot.Mover != null)
            {
                Vector3 target = _bot.Mover.LastTargetPoint(1.0f);
                SmoothLookTo(target, deltaTime);
            }

            ApplyInertia(deltaTime);

            if (!_inLootingMode && _bot.Memory?.GoalEnemy != null &&
                _bot.WeaponManager != null && _bot.WeaponManager.IsReady)
            {
                CombatStrafe(deltaTime);
                TryCombatLean();
                TryFlankAroundEnemy();
            }

            DetectStuck(deltaTime);
        }

        #endregion

        #region Internal Helpers

        private void ApplyInertia(float deltaTime)
        {
            if (_bot?.Mover == null || _trajectory == null || _bot.GetPlayer == null)
                return;

            Vector3 target = _bot.Mover.LastTargetPoint(1.0f);
            Vector3 direction = target - _bot.Position;
            direction.y = 0f;

            if (direction.magnitude < MinMoveThreshold)
                return;

            Vector3 adjusted = _trajectory.ModifyTrajectory(direction, deltaTime);
            Vector3 velocity = adjusted.normalized * 1.65f;

            BotPersonalityProfile? profile = _cache?.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile?.AggressionLevel > 0.7f)
                velocity *= 1.2f;

            _lastVelocity = Vector3.Lerp(_lastVelocity, velocity, InertiaWeight * deltaTime);

            _bot.GetPlayer.CharacterController?.Move(Vector3.MoveTowards(_bot.Position, target, velocity.magnitude * deltaTime), deltaTime);
        }

        private void SmoothLookTo(Vector3 target, float deltaTime)
        {
            if (_bot?.Transform == null || FikaHeadlessDetector.IsHeadless)
                return;

            Vector3 direction = target - _bot.Transform.position;
            direction.y = 0f;

            if (direction.sqrMagnitude < 0.01f)
                return;

            if (_cache?.Tilt?._coreTilt == true &&
                Vector3.Angle(_bot.Transform.forward, direction) > 80f)
                return;

            Quaternion desired = Quaternion.LookRotation(direction);
            _bot.Transform.rotation = Quaternion.Lerp(_bot.Transform.rotation, desired, LookSmoothSpeed * deltaTime);
        }

        private void ScanAhead()
        {
            if (_bot == null)
                return;

            Vector3 origin = _bot.Position + (Vector3.up * 1.5f);
            Vector3 direction = _bot.LookDirection;

            if (Physics.SphereCast(origin, ScanRadius, direction, out _, ScanDistance, AIRefactoredLayerMasks.VisionBlockers))
            {
                if (UnityEngine.Random.value < 0.2f && _bot.BotTalk != null)
                    _bot.BotTalk.TrySay(EPhraseTrigger.Look);
            }
        }

        private void CombatStrafe(float deltaTime)
        {
            if (_bot?.GetPlayer == null)
                return;

            _strafeTimer -= deltaTime;
            if (_strafeTimer <= 0f)
            {
                _isStrafingRight = UnityEngine.Random.value > 0.5f;
                _strafeTimer = UnityEngine.Random.Range(0.4f, 0.7f);
            }

            Vector3 baseStrafe = _isStrafingRight ? _bot.Transform.right : -_bot.Transform.right;
            Vector3 avoid = Vector3.zero;

            BotsGroup? group = _bot.BotsGroup;
            if (group != null)
            {
                for (int i = 0; i < group.MembersCount; i++)
                {
                    BotOwner? other = group.Member(i);
                    if (other != null && !other.IsDead && other != _bot)
                    {
                        float distance = Vector3.Distance(_bot.Position, other.Position);
                        if (distance < 2f && distance > 0.01f)
                        {
                            avoid += (_bot.Position - other.Position).normalized / distance;
                        }
                    }
                }
            }

            Vector3 strafeDir = (baseStrafe + avoid * 1.2f).normalized;
            float strafeSpeed = 1.2f + UnityEngine.Random.Range(-0.1f, 0.15f);
            _bot.GetPlayer.CharacterController?.Move(strafeDir * strafeSpeed * deltaTime, deltaTime);
        }

        private void TryCombatLean()
        {
            if (_bot == null || _cache?.Tilt == null || Time.time < _nextLeanAllowed)
                return;

            BotPersonalityProfile? profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null || profile.LeaningStyle == LeanPreference.Never ||
                _bot.Memory?.GoalEnemy == null)
                return;

            Vector3 origin = _bot.Position + Vector3.up * 1.5f;
            bool wallLeft = Physics.Raycast(origin, -_bot.Transform.right, 1.5f, AIRefactoredLayerMasks.VisionBlockers);
            bool wallRight = Physics.Raycast(origin, _bot.Transform.right, 1.5f, AIRefactoredLayerMasks.VisionBlockers);

            Vector3? cover = _bot.Memory.BotCurrentCoverInfo?.LastCover?.Position;

            if (profile.LeaningStyle == LeanPreference.Conservative && !cover.HasValue && !wallLeft && !wallRight)
                return;

            if (cover.HasValue && !BotCoverHelper.WasRecentlyUsed(cover.Value))
            {
                BotCoverHelper.MarkUsed(cover.Value);
                float side = Vector3.Dot((_bot.Position - cover.Value).normalized, _bot.Transform.right);
                _cache.Tilt.Set(side > 0f ? BotTiltType.right : BotTiltType.left);
            }
            else if (wallLeft && !wallRight)
            {
                _cache.Tilt.Set(BotTiltType.right);
            }
            else if (wallRight && !wallLeft)
            {
                _cache.Tilt.Set(BotTiltType.left);
            }
            else if (_bot.Memory.GoalEnemy != null)
            {
                Vector3 toEnemy = _bot.Memory.GoalEnemy.CurrPosition - _bot.Position;
                float dot = Vector3.Dot(toEnemy.normalized, _bot.Transform.right);
                _cache.Tilt.Set(dot > 0f ? BotTiltType.right : BotTiltType.left);
            }

            _nextLeanAllowed = Time.time + LeanCooldown;
        }

        private void TryFlankAroundEnemy()
        {
            if (_bot?.Memory?.GoalEnemy == null)
                return;

            Vector3 self = _bot.Position;
            Vector3 enemy = _bot.Memory.GoalEnemy.CurrPosition;

            float aggression = _cache?.AIRefactoredBotOwner?.PersonalityProfile.AggressionLevel ?? 0.5f;
            float flankDist = aggression > 0.7f ? 30f : 22f;

            if (Vector3.Distance(self, enemy) < flankDist &&
                FlankPositionPlanner.TryFindFlankPosition(self, enemy, out Vector3 flank))
            {
                BotMovementHelper.SmoothMoveTo(_bot, flank, false);
                Logger.LogDebug("[Movement] Flank triggered: " + flank);
            }
        }

        private void DetectStuck(float deltaTime)
        {
            if (_bot?.Mover == null || _bot.GetPlayer == null || _inLootingMode)
                return;

            Vector3 target = _bot.Mover.LastTargetPoint(1.0f);
            if (!ValidateNavMeshTarget(target))
                return;

            Vector3 velocity = _bot.GetPlayer.Velocity;
            if (velocity.sqrMagnitude < StuckThreshold * StuckThreshold)
            {
                _stuckTimer += deltaTime;
                if (_stuckTimer > MaxStuckDuration)
                {
                    Vector3 retry = target + UnityEngine.Random.insideUnitSphere * 1.0f;
                    retry.y = target.y;
                    BotMovementHelper.SmoothMoveTo(_bot, retry, false);
                    Logger.LogDebug("[Movement] Fallback triggered for stuck bot.");
                    _stuckTimer = 0f;
                }
            }
            else
            {
                _stuckTimer = 0f;
            }
        }

        private bool ValidateNavMeshTarget(Vector3 position)
        {
            NavMeshHit hit;
            if (NavMesh.SamplePosition(position, out hit, 1.5f, NavMesh.AllAreas))
                return (hit.position - position).sqrMagnitude < 1.0f;

            Logger.LogWarning("[Movement] Invalid NavMesh target: " + position);
            return false;
        }

        #endregion
    }
}
