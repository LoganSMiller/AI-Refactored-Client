// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Determines the optimal flank side and path for a bot based on enemy state, squad angle, and prior usage.
    /// Prevents flank clustering and simulates intelligent side selection.
    /// </summary>
    public static class FlankCoordinator
    {
        #region Constants

        private const float FlankAngleThreshold = 35f;
        private const float SuppressionBiasWeight = 0.3f;
        private const float SquadSpreadBias = 0.15f;
        private const float RecentlyUsedFlankCooldown = 6f;

        #endregion

        #region Static State

        // Prevents all bots from using same flank side too frequently
        private static float _lastLeftUseTime = -10f;
        private static float _lastRightUseTime = -10f;

        #endregion

        #region Public API

        /// <summary>
        /// Determines the best flank side based on squad spacing, suppression, and enemy angle.
        /// </summary>
        /// <param name="bot">The requesting bot owner.</param>
        /// <param name="cache">Bot component cache.</param>
        /// <returns>Recommended flank side.</returns>
        public static FlankPositionPlanner.Side GetOptimalFlankSide(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || bot.Memory == null || bot.Memory.GoalEnemy == null)
            {
                return FlankPositionPlanner.Side.Left;
            }

            Vector3 botPos = bot.Position;
            Vector3 enemyPos = bot.Memory.GoalEnemy.CurrPosition;
            Vector3 enemyDir = bot.Memory.GoalEnemy.Person.Transform.forward;

            float angle = Vector3.SignedAngle(enemyDir, botPos - enemyPos, Vector3.up);

            float squadBias = GetSquadBias(bot, enemyPos);
            float suppressionBias = GetSuppressionBias(cache);

            float timeSinceLeft = Time.time - _lastLeftUseTime;
            float timeSinceRight = Time.time - _lastRightUseTime;

            float leftScore = 0f;
            float rightScore = 0f;

            // Enemy visibility angle scoring
            if (angle > FlankAngleThreshold)
            {
                leftScore += 1f;
            }
            else if (angle < -FlankAngleThreshold)
            {
                rightScore += 1f;
            }

            leftScore += squadBias;
            rightScore += -squadBias;

            leftScore += suppressionBias;
            rightScore += suppressionBias;

            if (timeSinceLeft < RecentlyUsedFlankCooldown)
            {
                leftScore -= 0.5f;
            }

            if (timeSinceRight < RecentlyUsedFlankCooldown)
            {
                rightScore -= 0.5f;
            }

            if (leftScore >= rightScore)
            {
                _lastLeftUseTime = Time.time;
                return FlankPositionPlanner.Side.Left;
            }

            _lastRightUseTime = Time.time;
            return FlankPositionPlanner.Side.Right;
        }

        #endregion

        #region Private Helpers

        private static float GetSuppressionBias(BotComponentCache cache)
        {
            if (cache.Suppression != null && cache.Suppression.IsSuppressed())
            {
                return SuppressionBiasWeight;
            }

            return 0f;
        }

        private static float GetSquadBias(BotOwner bot, Vector3 enemyPos)
        {
            BotsGroup? group = bot.BotsGroup;
            if (group == null)
            {
                return 0f;
            }

            int total = 0;
            float bias = 0f;

            for (int i = 0; i < group.MembersCount; i++)
            {
                BotOwner? mate = group.Member(i);
                if (mate == null || mate == bot || mate.IsDead)
                {
                    continue;
                }

                Vector3 toMate = mate.Position - enemyPos;
                Vector3 toBot = bot.Position - enemyPos;

                float dot = Vector3.Dot(toBot.normalized, toMate.normalized);
                bias += dot;
                total++;
            }

            if (total == 0)
            {
                return 0f;
            }

            return bias / total * SquadSpreadBias;
        }

        #endregion
    }
}
