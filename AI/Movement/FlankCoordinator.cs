// <auto-generated>
//   AI-Refactored: FlankCoordinator.cs (Ultra-Platinum++ Overlay/Event Edition, June 2025)
//   All squad/solo flank logic is bulletproof, squad-safe, personality-driven, multiplayer/headless safe.
//   Never issues move commands—pure intent/overlay logic only. No hot-path allocation.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Groups;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using AIRefactored.Pools;

    /// <summary>
    /// Determines optimal flank side for a bot based on enemy, squad angle, and history.
    /// Prevents flank clustering, simulates groupthink and bias.
    /// All failures are isolated. No move commands, no alloc in hot path.
    /// </summary>
    public static class FlankCoordinator
    {
        #region Constants

        private const float FlankAngleThreshold = 35f;
        private const float SuppressionBiasWeight = 0.3f;
        private const float SquadSpreadBias = 0.15f;
        private const float RecentlyUsedFlankCooldown = 6f;
        private const float IndecisionChance = 0.055f;
        private const float CooldownCleanupInterval = 120f;

        #endregion

        #region State

        // Maps bot unique ID to last left/right use times
        private static readonly Dictionary<string, float> LastLeftUse = new Dictionary<string, float>(32);
        private static readonly Dictionary<string, float> LastRightUse = new Dictionary<string, float>(32);
        private static float _lastCleanup = -999f;

        #endregion

        #region Public API

        /// <summary>
        /// Picks the best flank side (left/right) for squad/solo flanking.
        /// Pure overlay/event intent—never triggers a move, always cooldown-safe.
        /// </summary>
        public static FlankPositionPlanner.Side GetOptimalFlankSide(BotOwner bot, BotComponentCache cache)
        {
            try
            {
                CleanupCooldownsIfNeeded();

                if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Memory?.GoalEnemy == null)
                    return FlankPositionPlanner.Side.Left;

                float now = Time.time;
                string botId = bot.ProfileId ?? bot.GetHashCode().ToString();

                float lastLeft = LastLeftUse.TryGetValue(botId, out float l) ? l : -999f;
                float lastRight = LastRightUse.TryGetValue(botId, out float r) ? r : -999f;

                // Rare "indecision" for realism (simulates human hesitation)
                if (UnityEngine.Random.value < IndecisionChance)
                {
                    if (lastLeft > lastRight)
                    {
                        LastLeftUse[botId] = now;
                        MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Left);
                        return FlankPositionPlanner.Side.Left;
                    }
                    LastRightUse[botId] = now;
                    MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Right);
                    return FlankPositionPlanner.Side.Right;
                }

                Vector3 botPos = bot.Position;
                Vector3 enemyPos = bot.Memory.GoalEnemy.CurrPosition;
                BifacialTransform enemyTf = bot.Memory.GoalEnemy.Person?.Transform;
                if (enemyTf == null)
                    return FlankPositionPlanner.Side.Left;

                Vector3 enemyForward = enemyTf.forward;
                Vector3 toBot = botPos - enemyPos;
                float angle = Vector3.SignedAngle(enemyForward, toBot, Vector3.up);

                float aggression = cache.AIRefactoredBotOwner?.PersonalityProfile?.AggressionLevel ?? 0.5f;
                float caution = cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution ?? 0.5f;

                float squadBias = GetSquadBias(bot, enemyPos, aggression);
                float suppressionBias = GetSuppressionBias(cache, caution);

                float leftCooldown = now - lastLeft;
                float rightCooldown = now - lastRight;

                float leftScore = 0f, rightScore = 0f;

                if (angle > FlankAngleThreshold)
                    leftScore += 1f + aggression * 0.33f;
                else if (angle < -FlankAngleThreshold)
                    rightScore += 1f + aggression * 0.33f;

                leftScore += squadBias + suppressionBias;
                rightScore -= squadBias;
                rightScore += suppressionBias * (1f - caution);

                if (leftCooldown < RecentlyUsedFlankCooldown)
                    leftScore -= 0.82f - aggression * 0.2f;
                if (rightCooldown < RecentlyUsedFlankCooldown)
                    rightScore -= 0.82f - aggression * 0.2f;

                // Add micro-random bias for non-robotic, non-repetitive output
                float errorBias = UnityEngine.Random.Range(-0.09f, 0.09f);
                leftScore += errorBias;
                rightScore -= errorBias;

                // Pick highest scoring, set cooldown, send comms
                if (leftScore >= rightScore)
                {
                    LastLeftUse[botId] = now;
                    MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Left);
                    return FlankPositionPlanner.Side.Left;
                }
                LastRightUse[botId] = now;
                MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Right);
                return FlankPositionPlanner.Side.Right;
            }
            catch
            {
                return FlankPositionPlanner.Side.Left;
            }
        }

        #endregion

        #region Helpers

        private static void CleanupCooldownsIfNeeded()
        {
            float now = Time.time;
            if (now - _lastCleanup < CooldownCleanupInterval)
                return;
            _lastCleanup = now;

            RemoveOldEntries(LastLeftUse, now);
            RemoveOldEntries(LastRightUse, now);
        }

        private static void RemoveOldEntries(Dictionary<string, float> dict, float now)
        {
            var toRemove = TempListPool.Rent<string>();
            foreach (var pair in dict)
                if (now - pair.Value > CooldownCleanupInterval * 2f)
                    toRemove.Add(pair.Key);
            for (int i = 0; i < toRemove.Count; i++)
                dict.Remove(toRemove[i]);
            TempListPool.Return(toRemove);
        }

        private static float GetSuppressionBias(BotComponentCache cache, float caution)
        {
            try
            {
                return cache?.Suppression != null && cache.Suppression.IsSuppressed()
                    ? SuppressionBiasWeight * (1f + caution)
                    : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        private static float GetSquadBias(BotOwner bot, Vector3 enemyPos, float aggression)
        {
            try
            {
                BotsGroup group = bot.BotsGroup;
                if (group == null || group.MembersCount <= 1)
                    return 0f;

                Vector3 selfOffset = bot.Position - enemyPos;
                Vector3 normSelf = selfOffset.sqrMagnitude > 0.001f ? selfOffset.normalized : Vector3.forward;

                float dotSum = 0f;
                int contributors = 0;

                for (int i = 0; i < group.MembersCount; i++)
                {
                    BotOwner mate = group.Member(i);
                    if (mate == null || mate == bot || mate.IsDead)
                        continue;

                    Vector3 toMate = mate.Position - enemyPos;
                    if (toMate.sqrMagnitude > 0.001f)
                    {
                        dotSum += Vector3.Dot(normSelf, toMate.normalized);
                        contributors++;
                    }
                }

                float scale = SquadSpreadBias * (1.0f + aggression * 0.55f);
                return contributors > 0 ? (dotSum / contributors) * scale : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        private static void MaybeSayFlankComms(BotOwner bot, BotComponentCache cache, FlankPositionPlanner.Side side)
        {
            try
            {
                if (cache?.GroupComms == null || UnityEngine.Random.value > 0.11f)
                    return;
                // TODO: Expand to say side-specific lines in future
                cache.GroupComms.Say(EPhraseTrigger.FollowMe);
            }
            catch { }
        }

        #endregion
    }
}
