// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Realism Pass: Groupthink, anti-cluster, rare human error, and personality-driven flank bias.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Determines the optimal flank side and path for a bot based on enemy state, squad angle, and prior usage.
    /// Prevents flank clustering and simulates intelligent side selection.
    /// All failures are locally isolated; cannot break or cascade into other systems.
    /// </summary>
    public static class FlankCoordinator
    {
        #region Constants

        private const float FlankAngleThreshold = 35f;
        private const float SuppressionBiasWeight = 0.3f;
        private const float SquadSpreadBias = 0.15f;
        private const float RecentlyUsedFlankCooldown = 6f;
        private const float IndecisionChance = 0.055f;

        #endregion

        #region State

        private static float _lastLeftUseTime = -999f;
        private static float _lastRightUseTime = -999f;

        #endregion

        #region Public API

        public static FlankPositionPlanner.Side GetOptimalFlankSide(BotOwner bot, BotComponentCache cache)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Memory?.GoalEnemy == null)
                    return FlankPositionPlanner.Side.Left;

                float now = Time.time;

                // Rare indecision: follow last used flank side
                if (UnityEngine.Random.value < IndecisionChance)
                {
                    if (_lastLeftUseTime > _lastRightUseTime)
                    {
                        _lastLeftUseTime = now;
                        return FlankPositionPlanner.Side.Left;
                    }
                    _lastRightUseTime = now;
                    return FlankPositionPlanner.Side.Right;
                }

                Vector3 botPos = bot.Position;
                Vector3 enemyPos = bot.Memory.GoalEnemy.CurrPosition;
                BifacialTransform enemyTf = bot.Memory.GoalEnemy.Person?.Transform;
                if (enemyTf == null)
                    return FlankPositionPlanner.Side.Left;

                Vector3 enemyForward = enemyTf.forward;
                Vector3 toBot = botPos - enemyPos;
                float angle = Vector3.SignedAngle(enemyForward, toBot, Vector3.up);

                float aggression = cache.AIRefactoredBotOwner?.PersonalityProfile?.AggressionLevel ?? 0.5f;
                float caution = cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution ?? 0.5f;

                float squadBias = GetSquadBias(bot, enemyPos, aggression);
                float suppressionBias = GetSuppressionBias(cache, caution);

                float leftCooldown = now - _lastLeftUseTime;
                float rightCooldown = now - _lastRightUseTime;

                float leftScore = 0f;
                float rightScore = 0f;

                if (angle > FlankAngleThreshold)
                    leftScore += 1f + aggression * 0.33f;
                else if (angle < -FlankAngleThreshold)
                    rightScore += 1f + aggression * 0.33f;

                leftScore += squadBias + suppressionBias;
                rightScore -= squadBias;
                rightScore += suppressionBias * (1f - caution);

                if (leftCooldown < RecentlyUsedFlankCooldown)
                    leftScore -= 0.82f - aggression * 0.2f;
                if (rightCooldown < RecentlyUsedFlankCooldown)
                    rightScore -= 0.82f - aggression * 0.2f;

                if (leftScore >= rightScore)
                {
                    _lastLeftUseTime = now;
                    return FlankPositionPlanner.Side.Left;
                }

                _lastRightUseTime = now;
                return FlankPositionPlanner.Side.Right;
            }
            catch
            {
                return FlankPositionPlanner.Side.Left;
            }
        }

        #endregion

        #region Helpers

        private static float GetSuppressionBias(BotComponentCache cache, float caution)
        {
            try
            {
                return cache?.Suppression != null && cache.Suppression.IsSuppressed()
                    ? SuppressionBiasWeight * (1f + caution)
                    : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        private static float GetSquadBias(BotOwner bot, Vector3 enemyPos, float aggression)
        {
            try
            {
                BotsGroup group = bot.BotsGroup;
                if (group == null || group.MembersCount <= 1)
                    return 0f;

                Vector3 selfOffset = bot.Position - enemyPos;
                Vector3 normSelf = selfOffset.sqrMagnitude > 0.001f ? selfOffset.normalized : Vector3.forward;

                float dotSum = 0f;
                int contributors = 0;

                for (int i = 0; i < group.MembersCount; i++)
                {
                    BotOwner mate = group.Member(i);
                    if (mate == null || mate == bot || mate.IsDead)
                        continue;

                    Vector3 toMate = mate.Position - enemyPos;
                    if (toMate.sqrMagnitude > 0.001f)
                    {
                        dotSum += Vector3.Dot(normSelf, toMate.normalized);
                        contributors++;
                    }
                }

                float scale = SquadSpreadBias * (1.0f + aggression * 0.55f);
                return contributors > 0 ? (dotSum / contributors) * scale : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        #endregion
    }
}
