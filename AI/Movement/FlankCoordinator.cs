// <auto-generated>
//   AI-Refactored: FlankCoordinator.cs (Supreme Overlay/Intent-Only, Max Realism, Ultra-Hardened – June 2025)
//   All flank intent is pure overlay: never issues a move, path, or vector. 
//   Squad/solo/suppression/personality/squad-bias and comms are overlay-only, zero alloc hot path, no disables, SPT/FIKA/headless safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using AIRefactored.Pools;

    /// <summary>
    /// Pure overlay/event-only flank intent resolver for squad/solo bots.
    /// Never outputs a move, path, or vector. Fully error-shielded, pooled, multiplayer/headless safe.
    /// </summary>
    public static class FlankCoordinator
    {
        #region Constants

        private const float FlankAngleThreshold = 35f;
        private const float SuppressionBiasWeight = 0.29f;
        private const float SquadSpreadBias = 0.18f;
        private const float RecentlyUsedFlankCooldown = 6.1f;
        private const float IndecisionChance = 0.063f;
        private const float CooldownCleanupInterval = 117f;
        private const float ErrorBias = 0.101f;
        private const float MinVector = 0.001f;
        private const float MinEnemyDistance = 0.85f; // Don't bias if enemy is too close (for realistic cover panic)

        #endregion

        #region State

        // Per-bot flank intent cooldowns (ProfileId preferred, fallback hash if missing)
        private static readonly Dictionary<string, float> LastLeftUse = new Dictionary<string, float>(32);
        private static readonly Dictionary<string, float> LastRightUse = new Dictionary<string, float>(32);
        private static float _lastCleanup = -999f;

        #endregion

        #region Public API

        /// <summary>
        /// Returns the preferred overlay intent for flanking (side only, never a move or position).
        /// Never triggers any actual movement, path, or event—overlay/intent only.
        /// </summary>
        public static FlankPositionPlanner.Side GetOptimalFlankSide(BotOwner bot, BotComponentCache cache)
        {
            try
            {
                CleanupCooldownsIfNeeded();

                if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Memory?.GoalEnemy == null)
                    return FlankPositionPlanner.Side.Left;

                float now = Time.time;
                string botId = !string.IsNullOrEmpty(bot.ProfileId) ? bot.ProfileId : bot.GetHashCode().ToString();

                float lastLeft = LastLeftUse.TryGetValue(botId, out float l) ? l : -999f;
                float lastRight = LastRightUse.TryGetValue(botId, out float r) ? r : -999f;

                // Human-like indecision: rare, random hesitation
                if (UnityEngine.Random.value < IndecisionChance)
                {
                    if (lastLeft > lastRight)
                    {
                        LastLeftUse[botId] = now;
                        MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Left);
                        return FlankPositionPlanner.Side.Left;
                    }
                    LastRightUse[botId] = now;
                    MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Right);
                    return FlankPositionPlanner.Side.Right;
                }

                // Calculate relative flank angles and scores
                Vector3 botPos = bot.Position;
                Vector3 enemyPos = bot.Memory.GoalEnemy.CurrPosition;
                BifacialTransform enemyTf = bot.Memory.GoalEnemy.Person?.Transform;
                if (enemyTf == null)
                    return FlankPositionPlanner.Side.Left;

                Vector3 enemyForward = enemyTf.forward;
                Vector3 toBot = botPos - enemyPos;
                float angle = Vector3.SignedAngle(enemyForward, toBot, Vector3.up);
                float enemyDist = toBot.magnitude;

                // If enemy is extremely close, bias left (simulate cover/fear reaction)
                if (enemyDist < MinEnemyDistance)
                {
                    LastLeftUse[botId] = now;
                    MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Left);
                    return FlankPositionPlanner.Side.Left;
                }

                float aggression = cache.AIRefactoredBotOwner?.PersonalityProfile?.AggressionLevel ?? 0.5f;
                float caution = cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution ?? 0.5f;
                float squadBias = GetSquadBias(bot, enemyPos, aggression, caution);
                float suppressionBias = GetSuppressionBias(cache, caution);

                float leftCooldown = now - lastLeft;
                float rightCooldown = now - lastRight;

                float leftScore = 0f, rightScore = 0f;

                // Angle bias
                if (angle > FlankAngleThreshold)
                    leftScore += 1f + aggression * 0.36f;
                else if (angle < -FlankAngleThreshold)
                    rightScore += 1f + aggression * 0.36f;

                // Squad/cover/suppression overlays
                leftScore += squadBias + suppressionBias;
                rightScore -= squadBias;
                rightScore += suppressionBias * (1f - caution);

                // Squad anti-clump: add bias against same side spam
                if (leftCooldown < RecentlyUsedFlankCooldown)
                    leftScore -= 0.81f - aggression * 0.19f;
                if (rightCooldown < RecentlyUsedFlankCooldown)
                    rightScore -= 0.81f - aggression * 0.19f;

                // Additional overlays: flanking bots under suppression more likely to split or hesitate
                if ((cache.Suppression?.IsSuppressed() ?? false) && UnityEngine.Random.value < 0.23f)
                {
                    leftScore -= 0.13f * caution;
                    rightScore -= 0.13f * caution;
                }

                // Micro-random error bias
                float err = UnityEngine.Random.Range(-ErrorBias, ErrorBias);
                leftScore += err;
                rightScore -= err;

                // Intent only, never an actual move or vector
                if (leftScore >= rightScore)
                {
                    LastLeftUse[botId] = now;
                    MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Left);
                    return FlankPositionPlanner.Side.Left;
                }
                LastRightUse[botId] = now;
                MaybeSayFlankComms(bot, cache, FlankPositionPlanner.Side.Right);
                return FlankPositionPlanner.Side.Right;
            }
            catch
            {
                return FlankPositionPlanner.Side.Left;
            }
        }

        #endregion

        #region Helpers

        /// <summary>
        /// Periodically clean up cooldown dictionaries to prevent leaks.
        /// </summary>
        private static void CleanupCooldownsIfNeeded()
        {
            float now = Time.time;
            if (now - _lastCleanup < CooldownCleanupInterval)
                return;
            _lastCleanup = now;
            RemoveOldEntries(LastLeftUse, now);
            RemoveOldEntries(LastRightUse, now);
        }

        private static void RemoveOldEntries(Dictionary<string, float> dict, float now)
        {
            var toRemove = TempListPool.Rent<string>();
            foreach (var pair in dict)
                if (now - pair.Value > CooldownCleanupInterval * 2f)
                    toRemove.Add(pair.Key);
            for (int i = 0; i < toRemove.Count; i++)
                dict.Remove(toRemove[i]);
            TempListPool.Return(toRemove);
        }

        /// <summary>
        /// Suppression bias (bots more suppressed bias less aggressive flanks).
        /// </summary>
        private static float GetSuppressionBias(BotComponentCache cache, float caution)
        {
            try
            {
                return cache?.Suppression != null && cache.Suppression.IsSuppressed()
                    ? SuppressionBiasWeight * (1f + caution)
                    : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        /// <summary>
        /// Squad bias: prefer less crowded flank for squad formation realism.
        /// Aggressive bots "spread out" more, cautious bots cluster.
        /// </summary>
        private static float GetSquadBias(BotOwner bot, Vector3 enemyPos, float aggression, float caution)
        {
            try
            {
                BotsGroup group = bot.BotsGroup;
                if (group == null || group.MembersCount <= 1)
                    return 0f;

                Vector3 selfOffset = bot.Position - enemyPos;
                Vector3 normSelf = selfOffset.sqrMagnitude > MinVector ? selfOffset.normalized : Vector3.forward;

                float dotSum = 0f;
                int contributors = 0;
                int leftCount = 0, rightCount = 0;

                for (int i = 0; i < group.MembersCount; i++)
                {
                    BotOwner mate = group.Member(i);
                    if (mate == null || mate == bot || mate.IsDead)
                        continue;

                    Vector3 toMate = mate.Position - enemyPos;
                    if (toMate.sqrMagnitude > MinVector)
                    {
                        float dot = Vector3.Dot(normSelf, toMate.normalized);
                        dotSum += dot;
                        contributors++;

                        float signed = Vector3.SignedAngle(Vector3.forward, toMate, Vector3.up);
                        if (signed > 0) leftCount++; else rightCount++;
                    }
                }

                // Aggression increases spread; caution increases clumping
                float baseBias = SquadSpreadBias * (1.0f + aggression * 0.5f - caution * 0.33f);
                float flankBalance = (leftCount - rightCount) * 0.14f;

                return contributors > 0 ? (dotSum / contributors) * baseBias - flankBalance : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        /// <summary>
        /// Optionally triggers squad comms overlay for flank intent, never moves.
        /// </summary>
        private static void MaybeSayFlankComms(BotOwner bot, BotComponentCache cache, FlankPositionPlanner.Side side)
        {
            try
            {
                if (cache?.GroupComms == null || UnityEngine.Random.value > 0.13f)
                    return;
                cache.GroupComms.Say(EPhraseTrigger.FollowMe);
            }
            catch { }
        }

        #endregion
    }
}
