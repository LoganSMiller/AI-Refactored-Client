// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot stance transitions (standing, crouching, prone) based on combat, panic, suppression, and cover logic.
    /// Smoothly blends transitions for realistic animation flow.
    /// </summary>
    public sealed class BotPoseController
    {
        #region Constants

        private const float FlankAngleThreshold = 120f;
        private const float MinPoseThreshold = 0.1f;
        private const float PoseBlendSpeedBase = 140f;
        private const float PoseCheckInterval = 0.3f;
        private const float SuppressionCrouchDuration = 2.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _movement;
        private readonly BotPersonalityProfile _personality;

        private float _currentPoseLevel;
        private float _targetPoseLevel;
        private bool _isPoseLocked;
        private float _nextPoseCheck;
        private float _suppressedUntil;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotPoseController"/> class.
        /// </summary>
        /// <param name="bot">The bot owner instance.</param>
        /// <param name="cache">The bot component cache.</param>
        public BotPoseController(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            if (bot.GetPlayer == null || bot.GetPlayer.MovementContext == null)
            {
                throw new InvalidOperationException("Missing MovementContext.");
            }

            if (cache.AIRefactoredBotOwner?.PersonalityProfile == null)
            {
                throw new InvalidOperationException("Missing PersonalityProfile.");
            }

            this._bot = bot;
            this._cache = cache;
            this._movement = bot.GetPlayer.MovementContext;
            this._personality = cache.AIRefactoredBotOwner.PersonalityProfile;

            this._currentPoseLevel = this._movement.PoseLevel;
            this._targetPoseLevel = this._currentPoseLevel;
            this._nextPoseCheck = Time.time;
        }

        #endregion

        #region Public Methods

        public float GetPoseLevel()
        {
            return this._movement.PoseLevel;
        }

        public void LockCrouchPose()
        {
            this._targetPoseLevel = 50f;
            this._isPoseLocked = true;
        }

        public void SetCrouch(bool anticipate = false)
        {
            this._targetPoseLevel = anticipate ? 60f : 50f;
        }

        public void SetProne(bool anticipate = false)
        {
            this._targetPoseLevel = anticipate ? 20f : 0f;
        }

        public void SetStand()
        {
            this._targetPoseLevel = 100f;
        }

        public void UnlockPose()
        {
            this._isPoseLocked = false;
        }

        public void Tick(float currentTime)
        {
            if (this._bot.IsDead)
            {
                return;
            }

            if (this._isPoseLocked)
            {
                this.BlendPose(Time.deltaTime);
                return;
            }

            if (currentTime >= this._nextPoseCheck)
            {
                this._nextPoseCheck = currentTime + PoseCheckInterval;
                this.EvaluatePoseIntent(currentTime);
            }

            this.BlendPose(Time.deltaTime);
        }

        public void TrySetStanceFromNearbyCover(Vector3 position)
        {
            var nearbyPoints = NavPointRegistry.QueryNearby(
                position,
                4f,
                delegate (NavPointData p)
                {
                    float distSq = (p.Position - position).sqrMagnitude;
                    return distSq <= 16f &&
                        (BotCoverHelper.IsProneCover(p) || BotCoverHelper.IsLowCover(p));
                });

            for (int i = 0; i < nearbyPoints.Count; i++)
            {
                NavPointData point = nearbyPoints[i];

                if (BotCoverHelper.IsProneCover(point))
                {
                    this.SetProne(true);
                    break;
                }

                if (BotCoverHelper.IsLowCover(point))
                {
                    this.SetCrouch(true);
                    break;
                }
            }
        }

        #endregion

        #region Private Methods

        private void BlendPose(float deltaTime)
        {
            if (Mathf.Abs(this._currentPoseLevel - this._targetPoseLevel) < MinPoseThreshold)
            {
                return;
            }

            float panicFactor = this._cache.PanicHandler?.IsPanicking == true ? 0.6f : 1f;
            float combatFactor = this._cache.Combat?.IsInCombatState() == true ? 1f : 0.4f;
            float blendSpeed = PoseBlendSpeedBase * panicFactor * combatFactor;

            this._currentPoseLevel = Mathf.MoveTowards(
                this._currentPoseLevel,
                this._targetPoseLevel,
                blendSpeed * deltaTime);

            this._movement.SetPoseLevel(this._currentPoseLevel);
        }

        private void EvaluatePoseIntent(float currentTime)
        {
            if (this._cache.PanicHandler?.IsPanicking == true)
            {
                this._targetPoseLevel = 0f;
                return;
            }

            if (this._cache.Suppression?.IsSuppressed() == true)
            {
                this._suppressedUntil = currentTime + SuppressionCrouchDuration;
            }

            if (currentTime < this._suppressedUntil)
            {
                this._targetPoseLevel = 50f;
                return;
            }

            if (this._personality.IsFrenzied || this._personality.IsFearful || this._personality.Personality == PersonalityType.Sniper)
            {
                Vector3? flankDir = this._bot.TryGetFlankDirection();
                if (flankDir.HasValue)
                {
                    float flankAngle = Vector3.Angle(this._bot.LookDirection, flankDir.Value.normalized);
                    if (flankAngle > FlankAngleThreshold)
                    {
                        this._targetPoseLevel = 0f;
                        return;
                    }
                }
            }

            var coverInfo = this._bot.Memory?.BotCurrentCoverInfo?.LastCover;
            if (coverInfo != null)
            {
                Vector3 coverPos = coverInfo.Position;
                float dist = Vector3.Distance(this._bot.Position, coverPos);

                if (dist < 2.5f)
                {
                    if (BotCoverHelper.IsProneCover(coverInfo))
                    {
                        this._targetPoseLevel = 0f;
                        return;
                    }

                    if (BotCoverHelper.IsLowCover(coverInfo))
                    {
                        this._targetPoseLevel = 50f;
                        return;
                    }
                }
            }

            bool inCombat = this._cache.Combat?.IsInCombatState() == true;
            bool preferCrouch = this._personality.Caution > 0.6f || this._personality.IsCamper;

            this._targetPoseLevel = inCombat && preferCrouch ? 50f : 100f;
        }

        #endregion
    }
}
