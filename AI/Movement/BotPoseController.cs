// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot stance transitions (standing, crouching, prone) based on combat, panic, suppression, and cover logic.
    /// Smoothly blends transitions for realistic animation flow.
    /// </summary>
    public class BotPoseController
    {
        #region Constants

        private const float FlankAngleThreshold = 120f;
        private const float MinPoseThreshold = 0.1f;
        private const float PoseBlendSpeedBase = 140f;
        private const float PoseCheckInterval = 0.3f;
        private const float SuppressionCrouchDuration = 2.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _movement;
        private readonly BotPersonalityProfile _personality;

        private float _currentPoseLevel;
        private float _targetPoseLevel;
        private bool _isPoseLocked;
        private float _nextPoseCheck;
        private float _suppressedUntil;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="BotPoseController"/> class.
        /// </summary>
        /// <param name="bot">Bot owner instance.</param>
        /// <param name="cache">Bot component cache instance.</param>
        /// <exception cref="ArgumentNullException">Thrown if bot or cache is null.</exception>
        /// <exception cref="InvalidOperationException">Thrown if MovementContext or PersonalityProfile is missing.</exception>
        public BotPoseController(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null)
            {
                throw new ArgumentNullException(nameof(bot));
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            if (bot.GetPlayer == null || bot.GetPlayer.MovementContext == null)
            {
                throw new InvalidOperationException("Missing MovementContext.");
            }

            if (cache.AIRefactoredBotOwner?.PersonalityProfile == null)
            {
                throw new InvalidOperationException("Missing PersonalityProfile.");
            }

            _bot = bot;
            _cache = cache;
            _movement = bot.GetPlayer.MovementContext;
            _personality = cache.AIRefactoredBotOwner.PersonalityProfile;

            _currentPoseLevel = _movement.PoseLevel;
            _targetPoseLevel = _currentPoseLevel;
            _nextPoseCheck = Time.time;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Gets the current pose level.
        /// </summary>
        /// <returns>Current pose level value.</returns>
        public float GetPoseLevel()
        {
            return _movement.PoseLevel;
        }

        /// <summary>
        /// Locks the bot into crouch pose.
        /// </summary>
        public void LockCrouchPose()
        {
            _targetPoseLevel = 50f;
            _isPoseLocked = true;
        }

        /// <summary>
        /// Requests the bot to crouch.
        /// </summary>
        /// <param name="anticipate">Whether to anticipate slightly higher crouch value.</param>
        public void SetCrouch(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 60f : 50f;
        }

        /// <summary>
        /// Requests the bot to go prone.
        /// </summary>
        /// <param name="anticipate">Whether to anticipate partial prone value.</param>
        public void SetProne(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 20f : 0f;
        }

        /// <summary>
        /// Requests the bot to stand upright.
        /// </summary>
        public void SetStand()
        {
            _targetPoseLevel = 100f;
        }

        /// <summary>
        /// Unlocks pose transitions (resumes normal pose behavior).
        /// </summary>
        public void UnlockPose()
        {
            _isPoseLocked = false;
        }

        /// <summary>
        /// Ticks pose controller logic.
        /// </summary>
        /// <param name="currentTime">Current world time.</param>
        public void Tick(float currentTime)
        {
            if (_bot.IsDead)
            {
                return;
            }

            if (_isPoseLocked)
            {
                BlendPose(Time.deltaTime);
                return;
            }

            if (currentTime >= _nextPoseCheck)
            {
                _nextPoseCheck = currentTime + PoseCheckInterval;
                EvaluatePoseIntent(currentTime);
            }

            BlendPose(Time.deltaTime);
        }

        /// <summary>
        /// Sets pose based on nearby NavPointRegistry cover detection.
        /// </summary>
        /// <param name="position">Position to scan from.</param>
        public void TrySetStanceFromNearbyCover(Vector3 position)
        {
            var nearbyPoints = NavPointRegistry.QueryNearby(
                position,
                4f,
                (Vector3 point) =>
                {
                    float distSq = (point - position).sqrMagnitude;
                    return distSq <= 16f &&
                        (BotCoverHelper.IsProneCover(point) || BotCoverHelper.IsLowCover(point));
                });

            foreach (Vector3 point in nearbyPoints)
            {
                if (BotCoverHelper.IsProneCover(point))
                {
                    SetProne(true);
                }
                else if (BotCoverHelper.IsLowCover(point))
                {
                    SetCrouch(true);
                }
                else
                {
                    SetStand();
                }

                break;
            }
        }

        #endregion

        #region Private Helpers

        private void BlendPose(float deltaTime)
        {
            if (Mathf.Abs(_currentPoseLevel - _targetPoseLevel) < MinPoseThreshold)
            {
                return;
            }

            float panicFactor = _cache.PanicHandler != null && _cache.PanicHandler.IsPanicking ? 0.6f : 1f;
            float combatFactor = _cache.Combat != null && _cache.Combat.IsInCombatState() ? 1f : 0.4f;
            float blendSpeed = PoseBlendSpeedBase * panicFactor * combatFactor;

            _currentPoseLevel = Mathf.MoveTowards(
                _currentPoseLevel,
                _targetPoseLevel,
                blendSpeed * deltaTime);

            _movement.SetPoseLevel(_currentPoseLevel);
        }

        private void EvaluatePoseIntent(float currentTime)
        {
            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                _targetPoseLevel = 0f;
                return;
            }

            if (_cache.Suppression != null && _cache.Suppression.IsSuppressed())
            {
                _suppressedUntil = currentTime + SuppressionCrouchDuration;
            }

            if (currentTime < _suppressedUntil)
            {
                _targetPoseLevel = 50f;
                return;
            }

            if (_personality.IsFrenzied || _personality.IsFearful || _personality.Personality == PersonalityType.Sniper)
            {
                Vector3? flankDir = _bot.TryGetFlankDirection();
                if (flankDir.HasValue)
                {
                    float flankAngle = Vector3.Angle(_bot.LookDirection, flankDir.Value.normalized);
                    if (flankAngle > FlankAngleThreshold)
                    {
                        _targetPoseLevel = 0f;
                        return;
                    }
                }
            }

            var coverInfo = _bot.Memory?.BotCurrentCoverInfo?.LastCover;
            if (coverInfo != null)
            {
                Vector3 coverPos = coverInfo.Position;
                float distance = Vector3.Distance(_bot.Position, coverPos);

                if (distance < 2.5f)
                {
                    if (BotCoverHelper.IsProneCover(coverInfo))
                    {
                        _targetPoseLevel = 0f;
                        return;
                    }

                    if (BotCoverHelper.IsLowCover(coverInfo))
                    {
                        _targetPoseLevel = 50f;
                        return;
                    }
                }
            }

            bool inCombat = _cache.Combat != null && _cache.Combat.IsInCombatState();
            bool preferCrouch = _personality.Caution > 0.6f || _personality.IsCamper;

            _targetPoseLevel = inCombat && preferCrouch ? 50f : 100f;
        }

        #endregion
    }
}
