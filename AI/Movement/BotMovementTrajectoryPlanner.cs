// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    using Random = UnityEngine.Random;

    /// <summary>
    /// Modifies a bot’s movement vector by applying chaos wobble, squad staggering offsets,
    /// and teammate collision avoidance. Produces natural movement flow and reduces clustering.
    /// </summary>
    public sealed class BotMovementTrajectoryPlanner
    {
        private const float AvoidanceRadius = 2.0f;
        private const float AvoidanceScale = 1.25f;
        private const float ChaosInterval = 0.4f;
        private const float ChaosRadius = 0.65f;
        private const float SquadOffsetScale = 0.75f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _chaosOffset = Vector3.zero;
        private float _nextChaosUpdate;

        /// <summary>
        /// Initializes a new instance of the <see cref="BotMovementTrajectoryPlanner"/> class.
        /// </summary>
        /// <param name="bot">Bot owner instance.</param>
        /// <param name="cache">Component cache.</param>
        public BotMovementTrajectoryPlanner(BotOwner bot, BotComponentCache cache)
        {
            this._bot = bot ?? throw new ArgumentNullException(nameof(bot));
            this._cache = cache ?? throw new ArgumentNullException(nameof(cache));
        }

        /// <summary>
        /// Adjusts the input movement direction using chaos wobble, squad offset, and teammate avoidance.
        /// </summary>
        public Vector3 ModifyTrajectory(Vector3 targetDir, float deltaTime)
        {
            float now = Time.unscaledTime;

            if (now >= this._nextChaosUpdate)
            {
                this.UpdateChaosOffset(now);
            }

            Vector3 baseDir = targetDir.normalized;
            Vector3 offset = baseDir + this._chaosOffset;

            if (this._cache.SquadPath != null)
            {
                Vector3 squadOffset = this._cache.SquadPath.GetCurrentOffset();
                if (squadOffset.sqrMagnitude > 0.01f)
                {
                    offset += squadOffset.normalized * SquadOffsetScale;
                }
            }

            Vector3 avoidance = this.ComputeAvoidance();
            if (avoidance.sqrMagnitude > 0.01f)
            {
                offset += avoidance.normalized * AvoidanceScale;
            }

            offset.y = 0f;
            return offset.sqrMagnitude > 0.01f ? offset.normalized : baseDir;
        }

        /// <summary>
        /// Computes directional offset to avoid nearby teammates.
        /// </summary>
        private Vector3 ComputeAvoidance()
        {
            Vector3 result = Vector3.zero;
            int count = 0;

            var group = this._bot.BotsGroup;
            if (group == null)
            {
                return result;
            }

            for (int i = 0; i < group.MembersCount; i++)
            {
                var mate = group.Member(i);
                if (mate == null || mate == this._bot || mate.IsDead)
                {
                    continue;
                }

                float dist = Vector3.Distance(this._bot.Position, mate.Position);
                if (dist < AvoidanceRadius && dist > 0.01f)
                {
                    result += (this._bot.Position - mate.Position).normalized / dist;
                    count++;
                }
            }

            return count > 0 ? result / count : Vector3.zero;
        }

        /// <summary>
        /// Updates random chaos wobble offset based on bot caution level.
        /// </summary>
        private void UpdateChaosOffset(float now)
        {
            float caution = this._cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution ?? 0.5f;
            float chaosRange = ChaosRadius * (1f - caution);

            // Slight forward bias for realism (no sidestepping bots)
            this._chaosOffset = new Vector3(
                Random.Range(-chaosRange * 0.5f, chaosRange * 0.5f),
                0f,
                Random.Range(0f, chaosRange));

            this._nextChaosUpdate = now + ChaosInterval;
        }
    }
}
