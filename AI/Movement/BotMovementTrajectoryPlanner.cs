// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Modifies a bot’s movement vector by applying chaos wobble, squad staggering offsets,
    /// and teammate collision avoidance. Produces natural movement flow and reduces clustering.
    /// </summary>
    public sealed class BotMovementTrajectoryPlanner
    {
        #region Constants

        private const float AvoidanceRadius = 2.0f;
        private const float AvoidanceScale = 1.25f;
        private const float ChaosInterval = 0.4f;
        private const float ChaosRadius = 0.65f;
        private const float SquadOffsetScale = 0.75f;
        private const float VelocityFactor = 1.5f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _chaosOffset = Vector3.zero;
        private float _nextChaosUpdate;

        #endregion

        #region Constructor

        public BotMovementTrajectoryPlanner(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                throw new ArgumentException("BotMovementTrajectoryPlanner: bot or cache is null.");
            }

            _bot = bot;
            _cache = cache;
        }

        #endregion

        #region Public Methods

        public Vector3 ModifyTrajectory(Vector3 targetDir, float deltaTime)
        {
            float now = Time.unscaledTime;

            if (now >= _nextChaosUpdate)
            {
                UpdateChaosOffset(now);
            }

            Vector3 baseDir = targetDir.sqrMagnitude > 0.0001f ? targetDir.normalized : Vector3.forward;
            Vector3 offset = baseDir + _chaosOffset;

            if (_cache.SquadPath != null)
            {
                Vector3 squadOffset = _cache.SquadPath.GetCurrentOffset();
                if (squadOffset.sqrMagnitude > 0.0001f)
                {
                    offset += squadOffset.normalized * SquadOffsetScale;
                }
            }

            Vector3 avoid = ComputeAvoidance();
            if (avoid.sqrMagnitude > 0.0001f)
            {
                offset += avoid.normalized * AvoidanceScale;
            }

            Vector3 velocity = _bot.GetPlayer.Velocity;
            if (velocity.sqrMagnitude > 0.1f)
            {
                offset += velocity.normalized * VelocityFactor;
            }

            offset.y = 0f;
            return offset.sqrMagnitude > 0.0001f ? offset.normalized : baseDir;
        }

        #endregion

        #region Private Methods

        private Vector3 ComputeAvoidance()
        {
            BotsGroup group = _bot.BotsGroup;
            if (group == null || group.MembersCount <= 1)
            {
                return Vector3.zero;
            }

            Vector3 selfPos = _bot.Position;
            Vector3 total = Vector3.zero;
            int contributors = 0;

            for (int i = 0; i < group.MembersCount; i++)
            {
                BotOwner other = group.Member(i);
                if (other == null || other == _bot || other.IsDead)
                {
                    continue;
                }

                float dist = Vector3.Distance(selfPos, other.Position);
                if (dist < AvoidanceRadius && dist > 0.01f)
                {
                    total += (selfPos - other.Position).normalized / dist;
                    contributors++;
                }
            }

            return contributors > 0 ? total / contributors : Vector3.zero;
        }

        private void UpdateChaosOffset(float now)
        {
            float caution = _cache.AIRefactoredBotOwner.PersonalityProfile.Caution;
            float chaosRange = ChaosRadius * (1f - Mathf.Clamp01(caution));

            float x = UnityEngine.Random.Range(-chaosRange * 0.5f, chaosRange * 0.5f);
            float z = UnityEngine.Random.Range(0f, chaosRange);

            _chaosOffset = new Vector3(x, 0f, z);
            _nextChaosUpdate = now + ChaosInterval;
        }

        #endregion
    }
}
