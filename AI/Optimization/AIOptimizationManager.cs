// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;
    using System.Collections.Generic;

    /// <summary>
    /// Manages runtime optimization routines for AI bots.
    /// Provides centralized access to performance tuning, reset, and escalation routines.
    /// Designed to improve tactical behavior and reduce simulation overhead.
    /// Only runs on the authoritative host (headless, local-host, or client-host).
    /// </summary>
    public static class AIOptimizationManager
    {
        #region Fields

        private static readonly BotAIOptimization _optimizer = new BotAIOptimization();
        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        private static readonly Dictionary<int, bool> BotOptimizationState = new Dictionary<int, bool>(); // Track optimization state
        private static readonly Dictionary<int, float> LastEscalationTimes = new Dictionary<int, float>(); // Track escalation cooldown times

        private const float EscalationCooldownTime = 10f; // Time between escalation triggers in seconds

        #endregion

        #region Public API

        /// <summary>
        /// Applies baseline optimization settings to the specified bot.
        /// Should be called once after initialization to reduce overhead and optimize behavior cadence.
        /// </summary>
        public static void Apply(BotOwner? bot)
        {
            // Only run on authoritative host and with a valid, non-null bot
            if (!GameWorldHandler.IsLocalHost() || bot == null || !IsValidBot(bot))
            {
                return;
            }

            if (IsOptimized(bot))
            {
                Logger?.LogDebug("[AIRefactored] Optimization already applied to bot: " + bot.Profile?.Info?.Nickname);
                return;
            }

            _optimizer.Optimize(bot);
            SetOptimized(bot, true);
            Logger?.LogInfo("[AIRefactored] Optimization applied to bot: " + bot.Profile?.Info?.Nickname);
        }

        /// <summary>
        /// Clears prior optimizations, allowing the bot to return to default pacing or be reoptimized.
        /// </summary>
        public static void Reset(BotOwner? bot)
        {
            // Only run on authoritative host and with a valid, non-null bot
            if (!GameWorldHandler.IsLocalHost() || bot == null || !IsValidBot(bot))
            {
                return;
            }

            if (!IsOptimized(bot))
            {
                Logger?.LogDebug("[AIRefactored] Bot not optimized, skipping reset: " + bot.Profile?.Info?.Nickname);
                return;
            }

            _optimizer.ResetOptimization(bot);
            SetOptimized(bot, false);
            Logger?.LogInfo("[AIRefactored] Optimization reset for bot: " + bot.Profile?.Info?.Nickname);
        }

        /// <summary>
        /// Escalates bot perception urgency and danger response timing in high-stimulus scenarios.
        /// Does not enhance vision, accuracy, or combat precision — only cognitive speed and urgency.
        /// </summary>
        public static void TriggerEscalation(BotOwner? bot)
        {
            if (!GameWorldHandler.IsLocalHost() || bot == null || bot.GetPlayer == null || !bot.GetPlayer.IsAI || bot.IsDead || bot.Settings?.FileSettings?.Mind == null)
            {
                Logger?.LogWarning("[AIRefactored] Escalation trigger skipped for bot: " + bot?.Profile?.Info?.Nickname ?? "Unknown - invalid bot state.");
                return;
            }

            int botId = bot.GetInstanceID();
            if (LastEscalationTimes.ContainsKey(botId) && Time.time - LastEscalationTimes[botId] < EscalationCooldownTime)
            {
                Logger?.LogWarning("[AIRefactored] Escalation skipped due to cooldown for bot: " + bot?.Profile?.Info?.Nickname ?? "Unknown");
                return;
            }

            BotGlobalsMindSettings mind = bot.Settings.FileSettings.Mind;

            // Perform the escalation
            mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(mind.DIST_TO_FOUND_SQRT * 1.25f, 200f, 800f);
            mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(mind.ENEMY_LOOK_AT_ME_ANG * 0.7f, 5f, 60f);
            mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 = Mathf.Clamp(mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 + 25f, 0f, 100f);

            string botName = bot.Profile?.Info?.Nickname ?? "Unknown";
            Logger?.LogInfo("[AIRefactored] Escalation triggered for bot: " + botName);

            LastEscalationTimes[botId] = Time.time; // Record the time of escalation
        }

        #endregion

        #region Private Helpers

        private static bool IsValidBot(BotOwner? bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.IsDead;
        }

        private static bool IsOptimized(BotOwner? bot)
        {
            if (bot == null)
            {
                return false;
            }

            int botId = bot.GetInstanceID();
            return BotOptimizationState.ContainsKey(botId) && BotOptimizationState[botId];
        }

        private static void SetOptimized(BotOwner? bot, bool optimized)
        {
            if (bot == null)
            {
                return;
            }

            int botId = bot.GetInstanceID();
            if (BotOptimizationState.ContainsKey(botId))
            {
                BotOptimizationState[botId] = optimized;
            }
            else
            {
                BotOptimizationState.Add(botId, optimized);
            }
        }

        #endregion
    }
}
