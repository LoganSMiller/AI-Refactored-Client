// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Manages runtime optimization routines for AI bots.
    /// Provides centralized access to performance tuning, reset, and escalation routines.
    /// Designed to improve tactical behavior and reduce simulation overhead.
    /// Only runs on the authoritative host (headless, local-host, or client-host).
    /// </summary>
    public static class AIOptimizationManager
    {
        #region Fields

        private static readonly BotAIOptimization Optimizer = new BotAIOptimization();
        private static readonly Dictionary<int, bool> BotOptimizationState = new Dictionary<int, bool>(128);
        private static readonly Dictionary<int, float> LastEscalationTimes = new Dictionary<int, float>(128);
        private const float EscalationCooldownTime = 10f;

        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        #endregion

        #region Public API

        /// <summary>
        /// Applies baseline optimization settings to the specified bot.
        /// Should be called once after initialization to reduce overhead and optimize behavior cadence.
        /// </summary>
        /// <param name="bot">The bot to optimize.</param>
        public static void Apply(BotOwner? bot)
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (!TryResolveBot(bot, out BotOwner? resolved) || resolved == null)
            {
                return;
            }

            int botId = resolved.GetInstanceID();
            if (BotOptimizationState.TryGetValue(botId, out bool applied) && applied)
            {
                Logger?.LogDebug("[AIRefactored] Optimization already applied to bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
                return;
            }

            Optimizer.Optimize(resolved);
            BotOptimizationState[botId] = true;
            Logger?.LogInfo("[AIRefactored] Optimization applied to bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
        }

        /// <summary>
        /// Clears prior optimizations, allowing the bot to return to default pacing or be reoptimized.
        /// </summary>
        /// <param name="bot">The bot to reset optimization on.</param>
        public static void Reset(BotOwner? bot)
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (!TryResolveBot(bot, out BotOwner? resolved) || resolved == null)
            {
                return;
            }

            int botId = resolved.GetInstanceID();
            if (!BotOptimizationState.TryGetValue(botId, out bool wasOptimized) || !wasOptimized)
            {
                Logger?.LogDebug("[AIRefactored] Bot not optimized, skipping reset: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
                return;
            }

            Optimizer.ResetOptimization(resolved);
            BotOptimizationState[botId] = false;
            Logger?.LogInfo("[AIRefactored] Optimization reset for bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
        }

        /// <summary>
        /// Escalates bot perception urgency and danger response timing in high-stimulus scenarios.
        /// Does not enhance vision, accuracy, or combat precision — only cognitive speed and urgency.
        /// </summary>
        /// <param name="bot">The bot to escalate.</param>
        public static void TriggerEscalation(BotOwner? bot)
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (!TryResolveBot(bot, out BotOwner? resolved) || resolved == null)
            {
                Logger?.LogWarning("[AIRefactored] Escalation skipped: invalid bot state.");
                return;
            }

            int botId = resolved.GetInstanceID();
            if (LastEscalationTimes.TryGetValue(botId, out float lastEscalated) &&
                Time.time - lastEscalated < EscalationCooldownTime)
            {
                Logger?.LogDebug("[AIRefactored] Escalation skipped (cooldown) for bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
                return;
            }

            BotGlobalsMindSettings? mind = resolved.Settings?.FileSettings?.Mind;
            if (mind == null)
            {
                Logger?.LogWarning("[AIRefactored] Escalation aborted: missing mind settings for bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
                return;
            }

            mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(mind.DIST_TO_FOUND_SQRT * 1.25f, 200f, 800f);
            mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(mind.ENEMY_LOOK_AT_ME_ANG * 0.7f, 5f, 60f);
            mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 = Mathf.Clamp(mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 + 25f, 0f, 100f);

            LastEscalationTimes[botId] = Time.time;
            Logger?.LogInfo("[AIRefactored] Escalation triggered for bot: " + (resolved.Profile?.Info?.Nickname ?? "Unknown"));
        }

        #endregion

        #region Private Helpers

        private static bool TryResolveBot(BotOwner? input, out BotOwner? result)
        {
            if (input != null &&
                input.GetPlayer != null &&
                input.GetPlayer.IsAI &&
                !input.IsDead)
            {
                result = input;
                return true;
            }

            result = null;
            return false;
        }

        #endregion
    }
}
