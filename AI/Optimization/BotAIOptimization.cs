// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Logs and verifies runtime bot AI settings like reaction thresholds, run chance, and role assignment.
    /// Used during development to confirm bot configuration consistency and behavioral tuning.
    /// </summary>
    public class BotAIOptimization
    {
        #region Fields

        private readonly Dictionary<string, bool> _optimizationApplied = new Dictionary<string, bool>(64);

        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        #endregion

        #region Public API

        /// <summary>
        /// Logs current optimization-relevant settings for the bot (once per bot ID).
        /// </summary>
        public void Optimize(BotOwner? botOwner)
        {
            if (!IsValidBot(botOwner))
            {
                return;
            }

            if (botOwner == null || botOwner.Profile == null)
            {
                return;
            }

            string botId = botOwner.Profile.Id ?? string.Empty;
            if (string.IsNullOrEmpty(botId))
            {
                return;
            }

            if (_optimizationApplied.TryGetValue(botId, out bool already) && already)
            {
                return;
            }

            LogCognition(botOwner);
            LogMind(botOwner);
            LogRole(botOwner);

            _optimizationApplied[botId] = true;
        }

        /// <summary>
        /// Allows re-logging this bot by clearing its logged flag.
        /// </summary>
        public void ResetOptimization(BotOwner? botOwner)
        {
            if (!IsValidBot(botOwner))
            {
                return;
            }

            if (botOwner == null || botOwner.Profile == null)
            {
                return;
            }

            string botId = botOwner.Profile.Id ?? string.Empty;
            if (!string.IsNullOrEmpty(botId))
            {
                _optimizationApplied[botId] = false;
            }
        }

        #endregion

        #region Private Helpers

        private static bool IsValidBot(BotOwner? botOwner)
        {
            return botOwner != null
                && botOwner.GetPlayer != null
                && botOwner.GetPlayer.IsAI
                && !botOwner.GetPlayer.IsYourPlayer
                && !botOwner.IsDead;
        }

        private void LogCognition(BotOwner bot)
        {
            var look = bot.Settings?.FileSettings?.Look;
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";

            if (look != null)
            {
                Logger?.LogInfo(
                    $"[BotDiagnostics][Cognition] {name} → GrassVision={look.MAX_VISION_GRASS_METERS:F1}m (read-only), LightBonus={look.ENEMY_LIGHT_ADD:F1}m");
            }
            else
            {
                Logger?.LogWarning($"[BotDiagnostics][Cognition] {name} → No Look config found.");
            }
        }

        private void LogMind(BotOwner bot)
        {
            var mind = bot.Settings?.FileSettings?.Mind;
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";

            if (mind != null)
            {
                Logger?.LogInfo(
                    $"[BotDiagnostics][Mind] {name} → ScareThreshold={mind.MIN_DAMAGE_SCARE:F1}, RunChance={mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100:F0}%");
            }
            else
            {
                Logger?.LogWarning($"[BotDiagnostics][Mind] {name} → No Mind config found.");
            }
        }

        private void LogRole(BotOwner bot)
        {
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";
            WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;

            Logger?.LogInfo($"[BotDiagnostics][Role] {name} → ProfileRole={role}");
        }

        #endregion
    }
}
