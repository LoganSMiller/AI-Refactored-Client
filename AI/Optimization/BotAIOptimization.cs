// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System.Collections.Generic;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;


    /// <summary>
    /// Logs and verifies runtime bot AI settings like reaction thresholds, run chance, and role assignment.
    /// Used during development to confirm bot configuration consistency and behavioral tuning.
    /// </summary>
    public class BotAIOptimization
    {
        #region Fields

        private readonly Dictionary<string, bool> _optimizationApplied = new Dictionary<string, bool>(64);

        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        #endregion

        #region Public API

        /// <summary>
        /// Logs current optimization-relevant settings for the bot (once per bot ID).
        /// </summary>
        public void Optimize(BotOwner? botOwner)
        {
            if (botOwner == null)
            {
                return;
            }

            if (botOwner.GetPlayer == null || !botOwner.GetPlayer.IsAI || botOwner.IsDead)
            {
                return;
            }

            if (botOwner.Profile == null)
            {
                return;
            }

            string botId = botOwner.Profile.Id;
            if (string.IsNullOrEmpty(botId))
            {
                return;
            }

            if (_optimizationApplied.TryGetValue(botId, out bool already) && already)
            {
                return;
            }

            LogCognition(botOwner);
            LogMind(botOwner);
            LogRole(botOwner);

            _optimizationApplied[botId] = true;
        }

        /// <summary>
        /// Allows re-logging this bot by clearing its logged flag.
        /// </summary>
        public void ResetOptimization(BotOwner? botOwner)
        {
            if (botOwner == null)
            {
                return;
            }

            if (botOwner.GetPlayer == null || !botOwner.GetPlayer.IsAI || botOwner.IsDead)
            {
                return;
            }

            if (botOwner.Profile == null)
            {
                return;
            }

            string botId = botOwner.Profile.Id;
            if (!string.IsNullOrEmpty(botId))
            {
                _optimizationApplied[botId] = false;
            }
        }

        #endregion

        #region Private Helpers

        private void LogCognition(BotOwner bot)
        {
            string name = "UnknownBot";

            if (bot.Profile != null && bot.Profile.Info != null)
            {
                name = bot.Profile.Info.Nickname;
            }

            if (bot.Settings == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Cognition] " + name + " → No Settings found.");
                return;
            }

            BotSettingsComponents components = bot.Settings.FileSettings;
            if (components == null || components.Look == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Cognition] " + name + " → No Look config found.");
                return;
            }

            BotGlobalLookData look = components.Look;

            Logger?.LogInfo(
                "[BotDiagnostics][Cognition] " + name +
                " → GrassVision=" + look.MAX_VISION_GRASS_METERS.ToString("F1") +
                "m (read-only), LightBonus=" + look.ENEMY_LIGHT_ADD.ToString("F1") + "m");
        }

        private void LogMind(BotOwner bot)
        {
            string name = "UnknownBot";

            if (bot.Profile != null && bot.Profile.Info != null)
            {
                name = bot.Profile.Info.Nickname;
            }

            if (bot.Settings == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Mind] " + name + " → No Settings found.");
                return;
            }

            BotSettingsComponents components = bot.Settings.FileSettings;
            if (components == null || components.Mind == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Mind] " + name + " → No Mind config found.");
                return;
            }

            BotGlobalsMindSettings mind = components.Mind;

            Logger?.LogInfo(
                "[BotDiagnostics][Mind] " + name +
                " → ScareThreshold=" + mind.MIN_DAMAGE_SCARE.ToString("F1") +
                ", RunChance=" + mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100.ToString("F0") + "%");
        }

        private void LogRole(BotOwner bot)
        {
            string name = "UnknownBot";
            if (bot.Profile != null && bot.Profile.Info != null)
            {
                name = bot.Profile.Info.Nickname;
            }

            WildSpawnType role = WildSpawnType.assault;
            if (bot.Profile != null &&
                bot.Profile.Info != null &&
                bot.Profile.Info.Settings != null)
            {
                role = bot.Profile.Info.Settings.Role;
            }

            Logger?.LogInfo("[BotDiagnostics][Role] " + name + " → ProfileRole=" + role);
        }

        #endregion
    }
}
