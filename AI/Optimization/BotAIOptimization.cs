// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Logs and verifies runtime bot AI settings like reaction thresholds, run chance, and role assignment.
    /// Used during development to confirm bot configuration consistency and behavioral tuning.
    /// Only runs on the authoritative instance (headless, local-host, or client-host).
    /// </summary>
    public sealed class BotAIOptimization
    {
        #region Fields

        private readonly Dictionary<string, bool> _optimizationApplied = new Dictionary<string, bool>(64);
        private static readonly Dictionary<int, float> LastOptimizationLogs = new Dictionary<int, float>(64);
        private const float OptimizationLogCooldown = 5f;
        private static ManualLogSource? Logger => AIRefactoredController.Logger;

        #endregion

        #region Public API

        /// <summary>
        /// Logs current optimization-relevant settings for the bot (once per bot ID).
        /// </summary>
        public void Optimize(BotOwner? botOwner)
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (botOwner == null ||
                botOwner.GetPlayer == null ||
                !botOwner.GetPlayer.IsAI ||
                botOwner.IsDead ||
                botOwner.Profile == null)
            {
                return;
            }

            string profileId = botOwner.Profile.Id;
            if (string.IsNullOrEmpty(profileId))
            {
                return;
            }

            if (_optimizationApplied.TryGetValue(profileId, out bool alreadyApplied) && alreadyApplied)
            {
                if (!ShouldLogOptimization(botOwner))
                {
                    return;
                }

                Logger?.LogDebug("[BotAIOptimization] Optimization already applied for bot: " + profileId);
                return;
            }

            LogCognition(botOwner);
            LogMind(botOwner);
            LogRole(botOwner);

            _optimizationApplied[profileId] = true;
            Logger?.LogInfo("[BotAIOptimization] Applied optimization for bot: " + profileId);
        }

        /// <summary>
        /// Allows re-logging this bot by clearing its logged flag.
        /// </summary>
        public void ResetOptimization(BotOwner? botOwner)
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            if (botOwner == null ||
                botOwner.GetPlayer == null ||
                !botOwner.GetPlayer.IsAI ||
                botOwner.IsDead ||
                botOwner.Profile == null)
            {
                return;
            }

            string profileId = botOwner.Profile.Id;
            if (string.IsNullOrEmpty(profileId))
            {
                return;
            }

            _optimizationApplied[profileId] = false;
            Logger?.LogInfo("[BotAIOptimization] Reset optimization for bot: " + profileId);
        }

        #endregion

        #region Private Helpers

        private static bool TryResolveBot(BotOwner? input, out BotOwner? result)
        {
            if (input != null &&
                input.GetPlayer != null &&
                input.GetPlayer.IsAI &&
                !input.IsDead &&
                input.Profile != null)
            {
                result = input;
                return true;
            }

            result = null;
            return false;
        }

        private static bool ShouldLogOptimization(BotOwner botOwner)
        {
            int instanceId = botOwner.GetInstanceID();
            float currentTime = Time.time;

            if (LastOptimizationLogs.TryGetValue(instanceId, out float lastTime) &&
                currentTime - lastTime < OptimizationLogCooldown)
            {
                return false;
            }

            LastOptimizationLogs[instanceId] = currentTime;
            return true;
        }

        private static void LogCognition(BotOwner bot)
        {
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";
            var look = bot.Settings?.FileSettings?.Look;

            if (look == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Cognition] " + name + " → No Look config found.");
                return;
            }

            Logger?.LogInfo(
                "[BotDiagnostics][Cognition] " + name +
                " → GrassVision=" + look.MAX_VISION_GRASS_METERS.ToString("F1") +
                "m, LightBonus=" + look.ENEMY_LIGHT_ADD.ToString("F1") + "m");
        }

        private static void LogMind(BotOwner bot)
        {
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";
            var mind = bot.Settings?.FileSettings?.Mind;

            if (mind == null)
            {
                Logger?.LogWarning("[BotDiagnostics][Mind] " + name + " → No Mind config found.");
                return;
            }

            Logger?.LogInfo(
                "[BotDiagnostics][Mind] " + name +
                " → ScareThreshold=" + mind.MIN_DAMAGE_SCARE.ToString("F1") +
                ", RunChance=" + mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100.ToString("F0") + "%");
        }

        private static void LogRole(BotOwner bot)
        {
            string name = bot.Profile?.Info?.Nickname ?? "UnknownBot";
            WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;

            Logger?.LogInfo("[BotDiagnostics][Role] " + name + " → ProfileRole=" + role);
        }

        #endregion
    }
}
