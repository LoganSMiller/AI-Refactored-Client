// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System.Collections.Generic;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Navigation;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Unified resolver that combines NavPoints, hotspots, cover scoring,
    /// and fallback path planning to find realistic escape destinations.
    /// </summary>
    public static class HybridFallbackResolver
    {
        /// <summary>
        /// Resolves the best possible retreat point using multiple strategies in order of priority.
        /// </summary>
        public static Vector3? GetBestRetreatPoint(BotOwner bot, Vector3 threatDirection)
        {
            Vector3 origin = bot.Position;
            Vector3 retreatDirection = -threatDirection.normalized;

            // === Priority 1: NavPoint-based cover scoring ===
            List<Vector3> navCoverPoints = NavPointRegistry.QueryNearby(
                origin,
                30f,
                delegate (Vector3 pos)
                {
                    Vector3 toCandidate = (pos - origin).normalized;
                    return NavPointRegistry.IsCoverPoint(pos) && Vector3.Dot(toCandidate, retreatDirection) > 0.4f;
                },
                true);

            if (navCoverPoints.Count > 0)
            {
                float bestScore = float.MinValue;
                Vector3 bestPoint = Vector3.zero;

                for (int i = 0; i < navCoverPoints.Count; i++)
                {
                    Vector3 point = navCoverPoints[i];
                    float score = CoverScorer.ScoreCoverPoint(bot, point, threatDirection);
                    if (score > bestScore)
                    {
                        bestScore = score;
                        bestPoint = point;
                    }
                }

                return bestPoint;
            }

            // === Priority 2: Hotspot fallback zones ===
            List<HotspotRegistry.Hotspot> fallbackHotspots = HotspotRegistry.QueryNearby(
                origin,
                40f,
                delegate (HotspotRegistry.Hotspot h)
                {
                    Vector3 toHotspot = (h.Position - origin).normalized;
                    return Vector3.Dot(toHotspot, retreatDirection) > 0.5f;
                });

            if (fallbackHotspots.Count > 0)
            {
                float bestDist = float.MaxValue;
                Vector3 closestHotspot = Vector3.zero;

                for (int i = 0; i < fallbackHotspots.Count; i++)
                {
                    float dist = Vector3.Distance(origin, fallbackHotspots[i].Position);
                    if (dist < bestDist)
                    {
                        bestDist = dist;
                        closestHotspot = fallbackHotspots[i].Position;
                    }
                }

                return closestHotspot;
            }

            // === Priority 3: Dynamic fallback path ===
            BotOwnerPathfindingCache? pathCache = BotCacheUtility.GetCache(bot)?.Pathing;
            if (pathCache != null)
            {
                List<Vector3> path = BotCoverRetreatPlanner.GetCoverRetreatPath(bot, threatDirection, pathCache);
                if (path.Count >= 2)
                {
                    return path[path.Count - 1];
                }
            }

            // === Priority 4: LOS Blocker ===
            Vector3 losResult;
            if (TryLOSBlocker(origin, threatDirection, out losResult))
            {
                return losResult;
            }

            // No valid fallback found
            return null;
        }

        /// <summary>
        /// Attempts to find a last-resort fallback that simply breaks line-of-sight.
        /// </summary>
        private static bool TryLOSBlocker(Vector3 origin, Vector3 threatDir, out Vector3 result)
        {
            Vector3 dir = -threatDir.normalized;
            Vector3 eye = origin + Vector3.up * 1.5f;
            const float maxSearchDist = 12f;

            for (float dist = 2f; dist <= maxSearchDist; dist += 1.5f)
            {
                Vector3 probe = origin + dir * dist + Vector3.up * 1.5f;

                if (Physics.Raycast(probe, threatDir, out RaycastHit hit, 20f))
                {
                    if (!CoverScorer.IsSolid(hit.collider))
                    {
                        continue;
                    }

                    result = hit.point - threatDir.normalized * 1.0f;
                    return true;
                }
            }

            result = Vector3.zero;
            return false;
        }
    }
}
