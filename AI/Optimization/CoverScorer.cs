// <auto-generated>
//   AI-Refactored: CoverScorer.cs (Ultra-Platinum++ Realism/Anti-Alloc, Squad/Multiplayer Safe – June 2025)
//   All scoring, raycast, and pool logic is bulletproof, fully isolated, and tuned for maximum realism/human-like perception.
//   No allocations outside Temp pools. Never logs except on critical error. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
    using System;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Scores fallback points based on terrain, threat exposure, wall coverage, distance, and line-of-sight.
    /// Produces realism-graded scores with stochastic micro-noise for human unpredictability.
    /// Fully pooled, error-contained, multiplayer/headless safe. No persistent allocations.
    /// </summary>
    public static class CoverScorer
    {
        #region Constants

        private const float BackWallDistance = 3.0f;
        private const float ExposureCheckDistance = 5.0f;
        private const float EyeHeightOffset = 1.5f;
        private const float FlankRayDistance = 2.5f;
        private const float IdealFallbackDistance = 8.0f;
        private const float MaxScore = 10.0f;
        private const float MinScore = 1.0f;
        private const float HumanNoise = 0.18f;

        #endregion

        #region Static Fields

        private static readonly Vector3[] FlankAngles =
        {
            new Vector3(-60f, 0f, 0f),
            new Vector3(-30f, 0f, 0f),
            new Vector3(30f, 0f, 0f),
            new Vector3(60f, 0f, 0f)
        };

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Evaluates a fallback point for tactical use.
        /// Realistic: imperfect risk, micro-bias, edge case handling, and pooled for zero alloc in hot path.
        /// </summary>
        public static float ScoreCoverPoint(BotOwner bot, Vector3 candidate, Vector3 threatDirection)
        {
            float score = MinScore;
            RaycastHit[] hits = null;
            try
            {
                if (bot == null || bot.Transform == null)
                    return MinScore;

                Vector3 eyePos = candidate + Vector3.up * EyeHeightOffset;
                Vector3 toThreat = threatDirection.normalized;
                Vector3 fromThreat = -toThreat;

                hits = TempRaycastHitPool.Rent(5);
                score = 1.0f;

                // Back wall bonus: best if solid behind candidate and close to "back"
                if (Physics.Raycast(eyePos, fromThreat, out hits[0], BackWallDistance))
                {
                    if (IsSolid(hits[0].collider))
                        score += 3.0f;
                    else if (IsSemiSolid(hits[0].collider))
                        score += 1.2f;
                }

                // Exposure penalty: penalize if there's no obstacle between cover and threat
                if (!Physics.Raycast(eyePos, toThreat, ExposureCheckDistance))
                {
                    score -= 2.0f;
                }
                else if (!IsSolid(hits[0].collider))
                {
                    score -= 0.7f;
                }

                // Flank coverage bonuses: encourage flanks with obstacles
                for (int i = 0; i < FlankAngles.Length; i++)
                {
                    Vector3 flankDir = Quaternion.Euler(0f, FlankAngles[i].x, 0f) * toThreat;
                    if (Physics.Raycast(eyePos, flankDir.normalized, out hits[i + 1], FlankRayDistance))
                    {
                        if (IsSolid(hits[i + 1].collider))
                            score += 0.55f;
                        else if (IsSemiSolid(hits[i + 1].collider))
                            score += 0.21f;
                        else
                            score -= 0.18f;
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[CoverScorer] ScoreCoverPoint failed: " + ex.Message);
                score = MinScore;
            }
            finally
            {
                if (hits != null)
                    TempRaycastHitPool.Return(hits);
            }

            try
            {
                // Distance penalty with micro-variance for realism
                if (bot != null)
                {
                    float dist = Vector3.Distance(bot.Position, candidate);
                    if (dist > IdealFallbackDistance)
                    {
                        float excess = dist - IdealFallbackDistance;
                        score -= Mathf.Min(excess * 0.23f + UnityEngine.Random.Range(-HumanNoise, HumanNoise), 3.0f);
                    }
                    else if (dist < 2.1f)
                    {
                        score -= 1.15f; // Too close to bot, not real cover
                    }
                }

                // Tiny judgment error for realness
                score += UnityEngine.Random.Range(-HumanNoise, HumanNoise);
            }
            catch
            {
                // No-op penalty error.
            }

            return Mathf.Clamp(score, MinScore, MaxScore);
        }

        #endregion

        #region Internal API

        /// <summary>
        /// True if collider is solid, safe cover (not glass, foliage, small triggers, banners, etc).
        /// </summary>
        internal static bool IsSolid(Collider collider)
        {
            try
            {
                if (collider == null || collider.isTrigger)
                    return false;

                if (collider.bounds.size.magnitude < 0.2f)
                    return false;

                string tag = collider.tag != null ? collider.tag.ToLowerInvariant() : string.Empty;
                string mat = collider.sharedMaterial != null ? collider.sharedMaterial.name.ToLowerInvariant() : string.Empty;

                if (tag.Contains("glass") || tag.Contains("foliage") || tag.Contains("banner") || tag.Contains("transparent"))
                    return false;

                if (mat.Contains("leaf") || mat.Contains("bush") || mat.Contains("net") ||
                    mat.Contains("fabric") || mat.Contains("cloth") || mat.Contains("tarp"))
                    return false;

                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Semi-solid for realism: crates, signs, thin walls, props, wood/metal (not fully solid, but plausible).
        /// </summary>
        internal static bool IsSemiSolid(Collider collider)
        {
            try
            {
                if (collider == null || collider.isTrigger)
                    return false;

                float mag = collider.bounds.size.magnitude;
                if (mag >= 0.14f && mag < 0.5f)
                    return true;

                string tag = collider.tag != null ? collider.tag.ToLowerInvariant() : string.Empty;
                if (tag.Contains("crate") || tag.Contains("sign") || tag.Contains("prop"))
                    return true;

                string mat = collider.sharedMaterial != null ? collider.sharedMaterial.name.ToLowerInvariant() : string.Empty;
                if (mat.Contains("wood") || mat.Contains("metal"))
                    return true;

                return false;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}
