// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Scores fallback points based on terrain, threat exposure, wall coverage, and distance.
    /// Used by AI retreat and cover systems to evaluate safe fallback zones under fire.
    /// </summary>
    public static class CoverScorer
    {
        private const float BackWallDistance = 3f;
        private const float ExposureCheckDistance = 5f;
        private const float EyeHeightOffset = 1.5f;
        private const float FlankRayDistance = 2.5f;
        private const float IdealFallbackDistance = 8f;
        private const float MaxScore = 10f;
        private const float MinScore = 1f;

        private static readonly Vector3[] FlankAngles = new Vector3[]
        {
            new Vector3(-60f, 0f, 0f),
            new Vector3(-30f, 0f, 0f),
            new Vector3(30f, 0f, 0f),
            new Vector3(60f, 0f, 0f)
        };

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        /// <summary>
        /// Evaluates a fallback point for tactical use.
        /// </summary>
        /// <param name="bot">Bot evaluating cover.</param>
        /// <param name="candidate">Candidate position.</param>
        /// <param name="threatDirection">Direction of incoming fire or threat.</param>
        /// <returns>Score between 1 and 10 based on tactical safety.</returns>
        public static float ScoreCoverPoint(BotOwner bot, Vector3 candidate, Vector3 threatDirection)
        {
            Vector3 eyePos = candidate + Vector3.up * EyeHeightOffset;
            Vector3 toThreat = threatDirection.normalized;
            Vector3 fromThreat = -toThreat;

            float score = 1f;

            // Wall behind = bonus for protection
            if (Physics.Raycast(eyePos, fromThreat, out RaycastHit backHit, BackWallDistance))
            {
                if (IsSolid(backHit.collider))
                {
                    score += 3f;
                }
            }

            // Front exposure = penalty if no cover between point and threat
            if (!Physics.Raycast(eyePos, toThreat, ExposureCheckDistance))
            {
                score -= 2f;
            }

            // Flank checks
            for (int i = 0; i < FlankAngles.Length; i++)
            {
                Vector3 flankDir = Quaternion.Euler(0f, FlankAngles[i].x, 0f) * toThreat;

                if (Physics.Raycast(eyePos, flankDir, out RaycastHit flankHit, FlankRayDistance))
                {
                    if (IsSolid(flankHit.collider))
                    {
                        score += 0.5f;
                    }
                }
            }

            // Distance penalty if too far
            float distance = Vector3.Distance(bot.Position, candidate);
            if (distance > IdealFallbackDistance)
            {
                float excess = distance - IdealFallbackDistance;
                float penalty = Mathf.Min(excess * 0.25f, 3f);
                score -= penalty;
            }

            Logger.LogDebug(
                $"[CoverScorer] Score={score:F2} at {candidate} | From={bot.Position} | ThreatDir={threatDirection.normalized}");

            return Mathf.Clamp(score, MinScore, MaxScore);
        }

        /// <summary>
        /// Determines whether a collider represents solid, safe cover.
        /// Rejects glass, foliage, fabric, small triggers, etc.
        /// </summary>
        /// <param name="collider">Collider to test.</param>
        /// <returns>True if considered solid tactical cover.</returns>
        internal static bool IsSolid(Collider? collider)
        {
            if (collider == null)
            {
                return false;
            }

            string tag = collider.tag.ToLowerInvariant();
            string mat = collider.sharedMaterial?.name.ToLowerInvariant() ?? string.Empty;

            // Reject non-solid tags
            if (tag.Contains("glass") || tag.Contains("foliage") || tag.Contains("banner") || tag.Contains("transparent"))
            {
                return false;
            }

            // Reject non-solid materials
            if (mat.Contains("leaf") || mat.Contains("bush") || mat.Contains("net")
                || mat.Contains("fabric") || mat.Contains("cloth"))
            {
                return false;
            }

            if (collider.isTrigger)
            {
                return false;
            }

            if (collider.bounds.size.magnitude < 0.2f)
            {
                return false;
            }

            return true;
        }
    }
}
