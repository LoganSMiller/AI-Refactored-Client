// <auto-generated>
//   AI-Refactored: BotCoverRetreatPlanner.cs (Ultimate Human-Like Retreat, Cover, and Squad Flow – June 2025 Beyond Diamond Edition)
//   Ultra-realistic cover/retreat, squad/chaos/personality-driven, pooled, and headless/client safe. No pathbuilding, overlay/event-only.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Helpers;
	using AIRefactored.AI.Navigation;
	using AIRefactored.Core;
	using AIRefactored.Pools;
	using EFT;
	using UnityEngine;
	using UnityEngine.AI;

	/// <summary>
	/// Ultra-realistic, squad-aware cover/fallback/retreat planner for AIRefactored bots.
	/// Caches squad/group retreat overlays, applies chaos/personality modifiers, and ensures zero allocation in hot path.
	/// All pathfinding is handled by overlay/global helper (BotMovementHelper/BotNavHelper).
	/// </summary>
	public sealed class BotCoverRetreatPlanner
	{
		#region Constants

		private const float SquadSpacingThreshold = 4.25f;
		private const float MemoryClearInterval = 61f;
		private const float ChaosOffsetRadius = 2.5f;
		private const float CoverProbeRadius = 4.2f;
		private const int CoverProbeRays = 10;
		private const float CoverCheckInterval = 0.23f;
		private const float CoverPersistTime = 0.67f;

		#endregion

		#region Static Pool and Cache

		private static readonly Dictionary<string, Dictionary<string, List<Vector3>>> _squadRetreatCache =
			new Dictionary<string, Dictionary<string, List<Vector3>>>();
		private static float _lastClearTime = -999f;

		#endregion

		#region Fields

		private readonly BotOwner _bot;
		private float _lastCoverCheckTime;
		private bool _isInCover;
		private Vector3 _coverNormal;
		private float _coverLastFoundTime;
		private int _coverMisses;

		#endregion

		#region Construction

		public BotCoverRetreatPlanner(BotOwner bot)
		{
			_bot = bot ?? throw new ArgumentNullException(nameof(bot));
			_lastCoverCheckTime = -999f;
			_coverNormal = Vector3.zero;
			_coverLastFoundTime = -999f;
			_coverMisses = 0;
			_isInCover = false;
		}

		#endregion

		#region Properties

		/// <summary>
		/// True if the bot is currently considered to be in cover (with hysteresis).
		/// </summary>
		public bool IsInCover
		{
			get
			{
				float now = Time.time;
				return _isInCover && now - _coverLastFoundTime < CoverPersistTime;
			}
		}

		/// <summary>
		/// Returns the last found cover normal (world space).
		/// </summary>
		public Vector3 CoverNormal => _coverNormal;

		#endregion

		#region Static Init

		/// <summary>
		/// Clears all retreat caches; use on world load.
		/// </summary>
		public static void InitializeStatic()
		{
			try
			{
				_squadRetreatCache.Clear();
				_lastClearTime = Time.time;
			}
			catch (Exception ex)
			{
				Plugin.LoggerInstance.LogError("[BotCoverRetreatPlanner] Initialize failed: " + ex);
			}
		}

		#endregion

		#region Main Public API

		/// <summary>
		/// Event-only: Requests a squad-safe retreat/fallback path from the overlay helper, caches/returns the squad path if valid.
		/// Never builds a path directly—only caches and overlays group/chaos effects.
		/// </summary>
		public List<Vector3> GetCoverRetreatPath(Vector3 threatDir)
		{
			List<Vector3> result = TempListPool.Rent<Vector3>();
			try
			{
				if (!GameWorldHandler.IsLocalHost() || _bot == null || _bot.Transform == null)
					return result;

				string map = GameWorldHandler.TryGetValidMapName();
				if (string.IsNullOrEmpty(map))
					return result;

				ClearExpiredCache();

				string squadId = _bot.Profile?.Info?.GroupId ?? _bot.ProfileId;
				if (!_squadRetreatCache.TryGetValue(map, out var squadCache))
				{
					squadCache = new Dictionary<string, List<Vector3>>();
					_squadRetreatCache[map] = squadCache;
				}

				// 1. Try squad cache (must be overlay result, never direct path)
				if (squadCache.TryGetValue(squadId, out var cached) &&
					cached.Count >= 2 && !SquadOverlapCheck(cached))
				{
					result.AddRange(cached);
					return result;
				}
				squadCache.Remove(squadId);

				// 2. Ask overlay/helper for a squad-safe fallback path (overlay only!)
				List<Vector3> overlayPath = BotMovementHelper.GetSquadSafeRetreatPath(_bot, threatDir, SquadSpacingThreshold);
				if (overlayPath != null && overlayPath.Count >= 2)
				{
					ApplyChaosOffset(overlayPath, _bot, threatDir);
					squadCache[squadId] = overlayPath;
					result.AddRange(overlayPath);
					return result;
				}

				// 3. If overlay returned nothing, just return a safe pair [origin, fallback] (never build a path)
				Vector3 origin = _bot.Position;
				Vector3 fallback = origin - threatDir.normalized * 8f;
				result.Add(origin);
				result.Add(fallback);
				return result;
			}
			catch (Exception ex)
			{
				Plugin.LoggerInstance.LogError("[BotCoverRetreatPlanner] GetCoverRetreatPath failed: " + ex);
				return result;
			}
		}

		/// <summary>
		/// Throttled, hysteresis-based cover probe. Probes cover at intervals, persists "in cover" state, flicker-free.
		/// </summary>
		public bool TryGetBestCoverNear(Vector3 target, Vector3 current, out Vector3 coverPoint)
		{
			coverPoint = Vector3.zero;
			float now = Time.time;
			bool foundCover = false;
			Vector3 foundNormal = Vector3.zero;

			if (now - _lastCoverCheckTime < CoverCheckInterval)
			{
				if (_isInCover)
				{
					coverPoint = current + _coverNormal * 1.25f;
					return true;
				}
				return false;
			}
			_lastCoverCheckTime = now;

			float bestScore = float.MinValue;
			Vector3 best = Vector3.zero;
			Vector3 bestNormal = Vector3.zero;
			Vector3 directionToTarget = (target - current).normalized;

			for (int i = 0; i < CoverProbeRays; i++)
			{
				float angle = (360f / CoverProbeRays) * i;
				Vector3 dir = Quaternion.Euler(0f, angle, 0f) * -directionToTarget;
				Vector3 probe = current + dir * CoverProbeRadius;

				if (NavMesh.SamplePosition(probe, out NavMeshHit navHit, 2.0f, NavMesh.AllAreas))
				{
					float score = Vector3.Dot(dir, -directionToTarget) * 1.7f - Vector3.Distance(current, navHit.position) * 0.25f;
					Vector3 eye = navHit.position + Vector3.up * 1.4f;
					Vector3 toThreat = (target - navHit.position).normalized;
					Vector3 normal = Vector3.zero;

					if (Physics.Raycast(eye, toThreat, out RaycastHit hit, Vector3.Distance(navHit.position, target), AIRefactoredLayerMasks.CoverColliderMask))
					{
						score += 2.5f;
						normal = hit.normal;
					}
					if (score > bestScore)
					{
						bestScore = score;
						best = navHit.position;
						bestNormal = normal != Vector3.zero ? normal : dir;
						foundCover = true;
					}
				}
			}
			// Hysteresis: only lose cover after multiple misses
			if (foundCover && bestScore > float.MinValue + 0.4f)
			{
				_isInCover = true;
				_coverLastFoundTime = now;
				_coverNormal = bestNormal.normalized;
				_coverMisses = 0;
				coverPoint = best;
				return true;
			}
			else
			{
				_coverMisses++;
				if (_coverMisses >= 2)
				{
					_isInCover = false;
					_coverNormal = Vector3.zero;
				}
				coverPoint = Vector3.zero;
				return false;
			}
		}

		#endregion

		#region Helpers

		private static void ClearExpiredCache()
		{
			if (Time.time - _lastClearTime > MemoryClearInterval)
			{
				_squadRetreatCache.Clear();
				_lastClearTime = Time.time;
			}
		}

		private static bool SquadOverlapCheck(List<Vector3> path)
		{
			// Placeholder for advanced runtime overlap logic.
			return false;
		}

		private static void ApplyChaosOffset(List<Vector3> path, BotOwner bot, Vector3 threatDir)
		{
			if (path == null || path.Count == 0 || bot == null)
				return;

			var cache = bot.GetComponent<BotComponentCache>();
			if (cache == null)
				return;

			var profile = cache.PersonalityProfile ?? BotRegistry.GetOrGenerate(bot.ProfileId, PersonalityType.Balanced, bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault);

			float chaosMul = 1f;
			if (cache.PanicHandler != null && cache.PanicHandler.IsPanicking)
				chaosMul += 0.8f;
			if (cache.Suppression != null && cache.Suppression.IsSuppressed())
				chaosMul += 0.45f;
			chaosMul += (1f - Mathf.Clamp01(profile.Caution)) * 0.2f;

			for (int i = 1; i < path.Count; i++)
			{
				float chaos = ChaosOffsetRadius * chaosMul * UnityEngine.Random.Range(0.8f, 1.15f);
				Vector3 offset = UnityEngine.Random.insideUnitSphere * chaos;
				offset.y = 0f;
				path[i] += offset;
			}
		}

		#endregion
	}
}
