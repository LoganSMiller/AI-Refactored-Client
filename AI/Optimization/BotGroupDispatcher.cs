// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Schedules and dispatches thread-safe bot workloads during headless server execution.
    /// Used for background AI tasks like group evaluation and noise scoring.
    /// </summary>
    public sealed class BotWorkGroupDispatcher : MonoBehaviour
    {
        #region Unity Lifecycle

        private void Update()
        {
            if (!FikaHeadlessDetector.IsHeadless)
            {
                return;
            }

            if (_pendingWorkloads.Count == 0)
            {
                return;
            }

            List<IBotWorkload> batch;

            lock (_lock)
            {
                int count = Mathf.Min(_pendingWorkloads.Count, MaxWorkPerFrame);
                batch = new List<IBotWorkload>(_pendingWorkloads.GetRange(0, count));
                _pendingWorkloads.RemoveRange(0, count);
            }

            DispatchBatch(batch);
        }

        #endregion

        #region Dispatch Logic

        private static void DispatchBatch(List<IBotWorkload> batch)
        {
            int total = batch.Count;
            if (total == 0)
            {
                return;
            }

            int threadCount = Mathf.Clamp(LogicalThreadCount, 1, total);
            int batchSize = Mathf.CeilToInt(total / (float)threadCount);

            for (int i = 0; i < total; i += batchSize)
            {
                int start = i;
                int end = Mathf.Min(start + batchSize, total);

                Task.Run(() =>
                {
                    for (int j = start; j < end; j++)
                    {
                        try
                        {
                            if (batch[j] != null)
                            {
                                batch[j].RunBackgroundWork();
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogWarning(
                                $"[AIRefactored] Exception in background bot workload: {ex.Message}\n{ex.StackTrace}");
                        }
                    }
                });
            }
        }

        #endregion

        #region Public API

        /// <summary>
        /// Queues a workload for background processing. Safe from any thread.
        /// </summary>
        /// <param name="workload">The workload to queue.</param>
        public static void Schedule(IBotWorkload? workload)
        {
            if (workload == null)
            {
                return;
            }

            lock (_lock)
            {
                if (_pendingWorkloads.Count >= MaxWorkPerFrame)
                {
                    Logger.LogWarning("[AIRefactored] BotWorkGroupDispatcher queue is full. Task dropped.");
                    return;
                }

                _pendingWorkloads.Add(workload);
            }
        }

        #endregion

        #region Configuration

        private const int MaxThreadsCap = 16;
        private const int MaxWorkPerFrame = 256;

        #endregion

        #region Static State

        private static readonly List<IBotWorkload> _pendingWorkloads = new List<IBotWorkload>(MaxWorkPerFrame);
        private static readonly object _lock = new object();
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly int LogicalThreadCount = Mathf.Clamp(Environment.ProcessorCount, 1, MaxThreadsCap);

        #endregion
    }

    /// <summary>
    /// Interface for asynchronous background-safe bot workloads.
    /// </summary>
    public interface IBotWorkload
    {
        /// <summary>
        /// Called from a thread pool. Must not call Unity APIs.
        /// </summary>
        void RunBackgroundWork();
    }
}
