// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Optimization
{
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Applies synchronized personality-based tuning across an AI squad.
    /// Enhances cohesion, alert propagation, and retaliatory behavior.
    /// </summary>
    public sealed class BotOwnerGroupOptimization
    {
        #region Static Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        #endregion

        #region Public API

        /// <summary>
        /// Applies group cohesion and perception modifiers to all valid AI bots in a squad.
        /// </summary>
        /// <param name="botOwners">List of bots in the same squad or group context.</param>
        public void OptimizeGroupAI(List<BotOwner>? botOwners)
        {
            if (botOwners == null || botOwners.Count == 0)
            {
                return;
            }

            foreach (var bot in botOwners)
            {
                if (bot == null || bot.IsDead)
                {
                    continue;
                }

                Player? player = bot.GetPlayer;
                if (player == null || !player.IsAI || player.IsYourPlayer)
                {
                    continue;
                }

                Profile? profile = bot.Profile;
                if (profile == null || string.IsNullOrEmpty(profile.Id))
                {
                    continue;
                }

                BotSettingsComponents? settings = bot.Settings?.FileSettings;
                if (settings == null || settings.Mind == null)
                {
                    continue;
                }

                BotGlobalsMindSettings mind = settings.Mind;
                BotPersonalityProfile? personality = BotRegistry.Get(profile.Id);
                if (personality == null)
                {
                    continue;
                }

                ApplyModifiers(bot, personality, mind);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Applies per-bot modifiers to enhance reactivity and squad cohesion realism.
        /// </summary>
        private static void ApplyModifiers(BotOwner bot, BotPersonalityProfile profile, BotGlobalsMindSettings mind)
        {
            mind.DIST_TO_FOUND_SQRT = Mathf.Lerp(300f, 600f, 1f - profile.Cohesion);

            mind.FRIEND_AGR_KILL = Mathf.Clamp(
                mind.FRIEND_AGR_KILL + profile.AggressionLevel * 0.15f,
                0f,
                1f);

            mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(
                mind.ENEMY_LOOK_AT_ME_ANG - profile.Cohesion * 5f,
                5f,
                30f);

            string nickname = bot.Profile?.Info?.Nickname ?? "Unknown";

            Logger.LogDebug(
                $"[GroupOpt] {nickname} → Cohesion={profile.Cohesion:F2}, " +
                $"FRIEND_AGR_KILL={mind.FRIEND_AGR_KILL:F2}, " +
                $"ENEMY_ANG={mind.ENEMY_LOOK_AT_ME_ANG:F1}°");
        }

        #endregion
    }
}
