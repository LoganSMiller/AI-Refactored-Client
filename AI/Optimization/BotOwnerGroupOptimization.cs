// <auto-generated>
//   AI-Refactored: BotOwnerGroupOptimization.cs (Ultimate Beyond Diamond – Ultra-Realism Squad Pass, June 2025)
//   All squad optimization is bulletproof, squad-personality blended, multiplayer/headless safe, fully humanized.
//   Maximum psychology, casualty/contagion, squad trust, confidence/jitter, suppression, and vision blending.
//   Zero alloc in hot path. No dev/debug log calls, ever. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Applies squad-wide, personality-synchronized optimization to AIRefactored bots.
    /// Deep squad/group psychology, dynamic confidence/casualty/contagion, vision/trust blending,
    /// and full panic/suppression integration. Multiplayer/headless safe, bulletproof, zero-alloc.
    /// </summary>
    public sealed class BotOwnerGroupOptimization
    {
        #region Static Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public Methods

        /// <summary>
        /// Optimizes squad AI for all valid bots in the group.
        /// Blends group/individual traits, adapts to squad size/casualty, panic/suppression state,
        /// and never breaks immersion. Zero alloc in hot path; bulletproof error isolation.
        /// </summary>
        /// <param name="botOwners">Pooled squad list (TempListPool enforced externally).</param>
        public void OptimizeGroupAI(List<BotOwner> botOwners)
        {
            if (botOwners == null || botOwners.Count == 0)
                return;

            int aliveCount = 0;
            float sumCohesion = 0f, sumAggression = 0f, sumAwareness = 0f;
            float sumSuppression = 0f, sumPanic = 0f;

            // Phase 1: Gather full group averages (personality, cohesion, aggression, suppression/panic)
            for (int i = 0, count = botOwners.Count; i < count; i++)
            {
                BotOwner bot = null;
                try
                {
                    bot = botOwners[i];
                    if (bot == null || bot.IsDead)
                        continue;

                    var profile = bot.Profile;
                    if (profile == null || string.IsNullOrEmpty(profile.Id))
                        continue;

                    var personality = BotRegistry.Get(profile.Id);
                    if (personality == null)
                        continue;

                    sumCohesion += Mathf.Clamp01(personality.Cohesion);
                    sumAggression += Mathf.Clamp01(personality.AggressionLevel);
                    sumAwareness += Mathf.Clamp01(personality.Awareness);

                    // Suppression and panic integration (via BotComponentCache)
                    var cache = BotComponentCacheRegistry.TryGetExisting(bot);
                    if (cache?.Suppression != null && cache.Suppression.IsSuppressed())
                        sumSuppression += 1f;
                    if (cache?.PanicHandler != null && cache.PanicHandler.IsPanicking)
                        sumPanic += 1f;

                    aliveCount++;
                }
                catch { }
            }

            if (aliveCount == 0)
                return;

            float groupCohesion = sumCohesion / aliveCount;
            float groupAggression = sumAggression / aliveCount;
            float groupAwareness = sumAwareness / aliveCount;
            float suppressionRatio = sumSuppression / aliveCount;
            float panicRatio = sumPanic / aliveCount;
            int groupTotal = botOwners.Count;

            // Phase 2: Blend squad traits, apply deep psychology and panic/suppression modifiers (zero-alloc, bulletproof)
            for (int i = 0; i < groupTotal; i++)
            {
                BotOwner bot = null;
                try
                {
                    bot = botOwners[i];
                    if (bot == null || bot.IsDead)
                        continue;

                    var player = bot.GetPlayer;
                    if (player == null || !player.IsAI || player.IsYourPlayer)
                        continue;

                    var profile = bot.Profile;
                    if (profile == null || string.IsNullOrEmpty(profile.Id))
                        continue;

                    BotSettingsComponents settings = null;
                    try { settings = bot.Settings != null ? bot.Settings.FileSettings : null; } catch { }
                    if (settings == null || settings.Mind == null)
                        continue;

                    var mind = settings.Mind;
                    var personality = BotRegistry.Get(profile.Id);
                    if (personality == null)
                        continue;

                    var cache = BotComponentCacheRegistry.TryGetExisting(bot);

                    ApplyModifiers(
                        bot,
                        personality,
                        mind,
                        groupCohesion,
                        groupAggression,
                        groupAwareness,
                        suppressionRatio,
                        panicRatio,
                        aliveCount,
                        groupTotal,
                        cache
                    );
                }
                catch (Exception ex)
                {
                    // Never spam logs, only critical error.
                    Logger.LogWarning("[GroupOpt] OptimizeGroupAI: Exception at bot index " + i + ": " + ex.Message);
                }
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Applies squad/individual blending and deep group psychology. All output is error-guarded and zero-alloc.
        /// </summary>
        private static void ApplyModifiers(
            BotOwner bot,
            BotPersonalityProfile personality,
            BotGlobalsMindSettings mind,
            float groupCohesion,
            float groupAggression,
            float groupAwareness,
            float suppressionRatio,
            float panicRatio,
            int groupAlive,
            int groupTotal,
            BotComponentCache cache
        )
        {
            try
            {
                // Blend individual toward group mean (EFT-like: 40% group, 60% self)
                float blendedCohesion = Mathf.Lerp(personality.Cohesion, groupCohesion, 0.40f);
                float blendedAggression = Mathf.Lerp(personality.AggressionLevel, groupAggression, 0.40f);
                float blendedAwareness = Mathf.Lerp(personality.Awareness, groupAwareness, 0.35f);

                // Squad size: larger squads cautious, aggression/casualty spike for losses
                float squadScale = Mathf.Clamp01(groupTotal / 4f);
                float cohesionMod = 1f - blendedCohesion * 0.6f * squadScale;
                float aggressionMod = blendedAggression * 0.21f + groupAggression * 0.16f;
                float awarenessMod = Mathf.Clamp01(blendedAwareness);

                // Trust: high cohesion shrinks vision range, increases group callout confidence
                mind.DIST_TO_FOUND_SQRT = Mathf.Lerp(420f, 720f, cohesionMod);

                // Casualty/contagion: squad panic, aggression spikes as team dies or panics
                float casualtyPenalty = groupTotal > 1 ? (1f - (float)groupAlive / groupTotal) : 0f;
                float panicBonus = Mathf.Clamp(panicRatio * 0.43f + suppressionRatio * 0.29f, 0f, 0.8f);

                mind.FRIEND_AGR_KILL = Mathf.Clamp(mind.FRIEND_AGR_KILL + aggressionMod + casualtyPenalty * 0.51f + panicBonus, 0f, 1f);

                // Vision cone: narrows for cohesive squads, widens if scattered/panicked/suppressed
                float baseLook = 28f - (blendedCohesion * 11.5f) + (1f - groupCohesion) * 8f;
                if (panicRatio > 0.2f || suppressionRatio > 0.18f)
                    baseLook += 5.5f * (panicRatio + suppressionRatio);

                mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(baseLook, 5f, 43f);

                // Alertness/jitter: more twitchy if group scattered or most bots are dead/panicked
                float alertMod = (1f - groupCohesion) + (groupAlive <= 2 ? 0.38f : 0f) + panicBonus;
                mind.MIN_DAMAGE_SCARE = Mathf.Lerp(19f, 6f, alertMod);

                // Confidence/fear: aggressive group can shrink enemy vision range (mirrors EFT AI confidence code)
                if (blendedAggression > 0.66f && groupCohesion > 0.55f)
                    mind.DIST_TO_FOUND_SQRT *= 0.96f;

                // Suppression/panic can cut vision and widen error window
                if (panicRatio > 0.33f || suppressionRatio > 0.28f)
                    mind.DIST_TO_FOUND_SQRT *= 0.95f;

                // Final bulletproof clamp (EFT-like)
                mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(mind.DIST_TO_FOUND_SQRT, 110f, 900f);
                mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(mind.ENEMY_LOOK_AT_ME_ANG, 3.0f, 50f);
                mind.MIN_DAMAGE_SCARE = Mathf.Clamp(mind.MIN_DAMAGE_SCARE, 2.2f, 32f);

                // No disables, never throws
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[GroupOpt] ApplyModifiers: Exception for bot " + (bot?.Profile?.Info?.Nickname ?? "Unknown") + ": " + ex.Message);
            }
        }

        #endregion
    }
}
