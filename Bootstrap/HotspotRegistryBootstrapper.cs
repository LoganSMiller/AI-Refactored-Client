// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>


namespace AIRefactored.Bootstrap
{
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.Core;
    using UnityEngine;

    /// <summary>
    /// Bootstraps the HotspotRegistry system and manages its lifecycle per raid.
    /// </summary>
    public sealed class HotspotRegistryBootstrapper : IAIWorldSystemBootstrapper
    {
        private bool _isInitialized;

        /// <summary>
        /// Initializes the HotspotRegistry with the current map ID if valid.
        /// </summary>
        public void Initialize()
        {
            _isInitialized = false;
            HotspotRegistry.Clear();

            if (!GameWorldHandler.IsSafeToInitialize)
            {
                return;
            }

            string mapId = GameWorldHandler.TryGetValidMapName();
            if (string.IsNullOrEmpty(mapId) || mapId == "unknown")
            {
                Plugin.LoggerInstance.LogWarning("[HotspotRegistry] Initialization skipped — invalid or unknown map ID.");
                return;
            }

            HotspotRegistry.Initialize(mapId);
            _isInitialized = true;

            Plugin.LoggerInstance.LogDebug("[HotspotRegistry] Initialized successfully for map: " + mapId);
        }

        /// <summary>
        /// Hotspot systems are static and do not tick.
        /// </summary>
        /// <param name="deltaTime">Unused delta time.</param>
        public void Tick(float deltaTime)
        {
        }

        /// <summary>
        /// Clears all hotspot data when the raid ends.
        /// </summary>
        public void OnRaidEnd()
        {
            HotspotRegistry.Clear();
            _isInitialized = false;
        }

        /// <summary>
        /// Returns whether the HotspotRegistry is active and ready for queries.
        /// </summary>
        /// <returns>True if initialized and ready; otherwise, false.</returns>
        public bool IsReady()
        {
            return _isInitialized;
        }

        /// <summary>
        /// Specifies the world phase at which this system should be initialized.
        /// </summary>
        /// <returns>The required world phase for initialization.</returns>
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }
    }
}
