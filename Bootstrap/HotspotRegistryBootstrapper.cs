// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.Core;
    using BepInEx.Logging;

    /// <summary>
    /// Bootstraps the HotspotRegistry system and manages its lifecycle per raid.
    /// </summary>
    public sealed class HotspotRegistryBootstrapper : IAIWorldSystemBootstrapper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private bool _isInitialized;

        /// <inheritdoc />
        public void Initialize()
        {
            _isInitialized = false;

            try
            {
                HotspotRegistry.Clear();

                if (!GameWorldHandler.IsSafeToInitialize)
                {
                    Logger.LogWarning("[HotspotRegistry] Skipped init — world not ready.");
                    return;
                }

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId) || mapId == "unknown")
                {
                    Logger.LogWarning("[HotspotRegistry] Skipped init — invalid map ID.");
                    return;
                }

                HotspotRegistry.Initialize(mapId);
                _isInitialized = true;

                Logger.LogDebug("[HotspotRegistry] ✅ Initialized for map: " + mapId);
            }
            catch (Exception ex)
            {
                Logger.LogError("[HotspotRegistry] Initialize failed: " + ex);
            }
        }

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            try
            {
                // No runtime logic yet; reserved for future validation or dynamic linking.
            }
            catch (Exception ex)
            {
                Logger.LogError("[HotspotRegistry] Tick() error: " + ex);
            }
        }

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            try
            {
                HotspotRegistry.Clear();
                _isInitialized = false;
                Logger.LogDebug("[HotspotRegistry] 🔻 Cleared on raid end.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[HotspotRegistry] OnRaidEnd() error: " + ex);
            }
        }

        /// <inheritdoc />
        public bool IsReady()
        {
            return _isInitialized;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }
    }
}
