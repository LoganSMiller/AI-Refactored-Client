// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using UnityEngine;

    /// <summary>
    /// Registers all lootable containers and loose loot items in the scene.
    /// Also links dead player corpses to nearby loot containers for bot prioritization.
    /// Executes only on authoritative hosts.
    /// </summary>
    public static class LootBootstrapper
    {
        private const float MaxCorpseLinkDistance = 1.5f;

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        /// <summary>
        /// Registers all scene lootable containers and items.
        /// Should be called once after GameWorld is ready.
        /// </summary>
        public static void RegisterAllLoot()
        {
            if (!GameWorldHandler.IsInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            LootableContainer[] containers = Object.FindObjectsOfType<LootableContainer>();
            if (containers != null && containers.Length > 0)
            {
                RegisterContainers(containers);
            }

            LootItem[] items = Object.FindObjectsOfType<LootItem>();
            if (items != null && items.Length > 0)
            {
                RegisterLooseItems(items);
            }
        }

        private static void RegisterContainers(LootableContainer[] containers)
        {
            for (int i = 0; i < containers.Length; i++)
            {
                LootableContainer container = containers[i];
                if (container == null || !container.enabled)
                {
                    continue;
                }

                LootRegistry.RegisterContainer(container);
                TryLinkToCorpse(container);
            }
        }

        private static void RegisterLooseItems(LootItem[] items)
        {
            for (int i = 0; i < items.Length; i++)
            {
                LootItem item = items[i];
                if (item == null || !item.enabled)
                {
                    continue;
                }

                LootRegistry.RegisterItem(item);
            }
        }

        private static void TryLinkToCorpse(LootableContainer container)
        {
            if (container == null)
            {
                return;
            }

            Vector3 containerPosition = container.transform.position;

            List<Player> players = GameWorldHandler.GetAllAlivePlayers();
            if (players.Count == 0)
            {
                return;
            }

            List<Player> deadPlayers = TempListPool.Rent<Player>();
            try
            {
                for (int i = 0; i < players.Count; i++)
                {
                    Player player = players[i];
                    if (player != null)
                    {
                        deadPlayers.Add(player);
                    }
                }

                for (int i = 0; i < deadPlayers.Count; i++)
                {
                    Player p = deadPlayers[i];
                    if (p == null)
                    {
                        continue;
                    }

                    if (p.HealthController == null || p.HealthController.IsAlive)
                    {
                        continue;
                    }

                    string id = p.ProfileId;
                    if (id.Length == 0 || DeadBodyContainerCache.Contains(id))
                    {
                        continue;
                    }

                    Vector3 corpsePosition = EFTPlayerUtil.GetPosition(p);
                    if (Vector3.Distance(containerPosition, corpsePosition) <= MaxCorpseLinkDistance)
                    {
                        DeadBodyContainerCache.Register(p, container);
                        string name = p.Profile != null && p.Profile.Info != null ? p.Profile.Info.Nickname : "Unnamed";
                        Logger.LogDebug("[LootBootstrapper] Linked container to corpse: " + name);
                        break;
                    }
                }
            }
            finally
            {
                TempListPool.Return(deadPlayers);
            }
        }
    }
}
