// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Defines the interface for modular AIRefactored world systems to participate in lifecycle events.
    /// Used during phased initialization, frame-based execution, and raid teardown.
    /// </summary>
    public interface IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is ready to initialize.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Called every frame after initialization for system logic updates.
        /// Implementers must wrap logic in try/catch and validate state for null-safety.
        /// </summary>
        /// <param name="deltaTime">The time delta (in seconds) since the last tick.</param>
        void Tick(float deltaTime);

        /// <summary>
        /// Called once at the end of a raid. Used for system teardown or state reset.
        /// </summary>
        void OnRaidEnd();

        /// <summary>
        /// Indicates whether the system is fully initialized and safe to tick.
        /// </summary>
        /// <returns>True if the system is active and ready; otherwise, false.</returns>
        bool IsReady();

        /// <summary>
        /// Specifies which world phase is required before this system can initialize.
        /// </summary>
        /// <returns>The required <see cref="WorldPhase"/>.</returns>
        WorldPhase RequiredPhase();
    }
}