// <auto-generated>
//   AI-Refactored: IAIWorldSystemBootstrapper.cs (Ultra-Platinum++ Modular Lifecycle Canonical Interface, June 2025)
//   SYSTEMATICALLY MANAGED. All implementers must provide bulletproof error isolation, strict state gating, and fully phased initialization.
//   Fully compliant: Ultimate AIRefactored Realism, SPT/FIKA/headless/client parity, robust lifecycle, diagnostics, teardown.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Canonical interface for all modular AIRefactored world systems.
    /// Enforces strict phased lifecycle, robust diagnostics, bulletproof tick gating, teardown, and error isolation.
    /// All implementers MUST fully contain errors, guarantee ready-state gating, and support SPT/FIKA headless/client parity.
    /// </summary>
    public interface IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is permitted to initialize in its configured world phase.
        /// Implementers MUST perform all one-time setup here—no hidden or deferred logic permitted.
        /// If initialization fails, IsReady() MUST remain false until recovery.
        /// All exceptions must be strictly locally contained and must not propagate to or affect global mod state.
        /// Must not register update handlers or persistent event hooks outside local scope.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Called exactly once per frame (or tick) after successful initialization, but ONLY if IsReady() returns true.
        /// All tick logic must be strictly bulletproof, error-isolated, and must never break, disable, or block other world systems.
        /// Any exceptions MUST be contained locally and must trigger local failover/disable for this system only.
        /// </summary>
        /// <param name="deltaTime">Time elapsed in seconds since the last tick. Provided by central world tick dispatcher.</param>
        void Tick(float deltaTime);

        /// <summary>
        /// Called exactly once at the end of each raid/session, regardless of initialization or tick outcome.
        /// Used to clear memory, detach handlers, unregister event hooks, and fully reset all local system state.
        /// Implementers must guarantee that all teardown logic is fully error-contained and never throws or leaves global state invalid.
        /// </summary>
        void OnRaidEnd();

        /// <summary>
        /// Returns true if this system is fully initialized, in a valid state, and ready to safely receive Tick() calls.
        /// Never return true until all system and world dependencies are available, all fields and handlers are valid,
        /// and all internal validation passes. False disables all tick/teardown for this system until recovery or reload.
        /// </summary>
        /// <returns>True if the system is fully active and safe for Tick(); otherwise, false.</returns>
        bool IsReady();

        /// <summary>
        /// Specifies the minimum world phase required before this system can safely initialize.
        /// Used by the WorldBootstrapper to sequence and defer initialization until all system prerequisites and world context are valid.
        /// Implementers MUST return a correct <see cref="WorldPhase"/> for safe boot order.
        /// </summary>
        /// <returns>The <see cref="WorldPhase"/> required for system initialization.</returns>
        WorldPhase RequiredPhase();
    }
}
