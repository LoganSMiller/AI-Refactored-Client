// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.AI.Navigation
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Unity.AI.Navigation;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Dynamically scans the world for valid AI navigation points including rooftops, high cover,
    /// flanking routes, and fallback zones. All data is registered into the NavPointRegistry.
    /// Headless-safe and frame-split for performance.
    /// </summary>
    public static class NavPointBootstrapper
    {
        #region Constants

        private const float ForwardCoverCheckDistance = 4f;
        private const float MaxSampleHeight = 30f;
        private const float MinNavPointClearance = 1.6f;
        private const float RoofRaycastHeight = 12f;
        private const float ScanRadius = 80f;
        private const float ScanSpacing = 2.5f;
        private const float VerticalProbeMax = 24f;
        private const float VerticalStep = 2f;

        #endregion

        #region Fields

        private static readonly List<Vector3> _backgroundPending = new List<Vector3>(512);
        private static readonly Queue<Vector3> _scanQueue = new Queue<Vector3>(2048);
        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private static Vector3 _center = Vector3.zero;
        private static bool _isRunning = false;
        private static int _registered = 0;

        #endregion

        #region Public API

        /// <summary>
        /// Begins scanning nav points across the map centered on the first NavMeshSurface.
        /// </summary>
        /// <param name="mapId">The map ID (currently unused).</param>
        public static void RegisterAll(string mapId)
        {
            if (_isRunning)
            {
                return;
            }

            _isRunning = true;
            _registered = 0;
            _scanQueue.Clear();
            _backgroundPending.Clear();

            NavMeshSurface surface = Object.FindObjectOfType<NavMeshSurface>();
            _center = surface != null ? surface.transform.position : Vector3.zero;

            float half = ScanRadius * 0.5f;

            for (float x = -half; x <= half; x += ScanSpacing)
            {
                for (float z = -half; z <= half; z += ScanSpacing)
                {
                    Vector3 basePos = _center + new Vector3(x, MaxSampleHeight, z);
                    _scanQueue.Enqueue(basePos);
                }
            }

            Logger.LogInfo("[NavPointBootstrapper] Queued " + _scanQueue.Count + " surface points for scanning.");
            Task.Run(PrequeueVerticalPoints);
        }

        /// <summary>
        /// Called every frame to incrementally process nav point scans.
        /// </summary>
        public static void Tick()
        {
            if (!_isRunning)
            {
                return;
            }

            int perFrameLimit = FikaHeadlessDetector.IsHeadless ? 80 : 40;
            int processed = 0;

            while (_scanQueue.Count > 0 && processed++ < perFrameLimit)
            {
                Vector3 basePos = _scanQueue.Dequeue();

                if (!Physics.Raycast(basePos, Vector3.down, out RaycastHit hit, MaxSampleHeight))
                {
                    continue;
                }

                Vector3 pos = hit.point;

                NavMeshHit navHit;
                if (!NavMesh.SamplePosition(pos, out navHit, 1.0f, NavMesh.AllAreas))
                {
                    continue;
                }

                if (Physics.Raycast(pos + Vector3.up * 0.5f, Vector3.up, MinNavPointClearance))
                {
                    continue;
                }

                Vector3 worldPos = navHit.position;
                bool isCover = IsCoverPoint(worldPos);
                bool isIndoor = Physics.Raycast(worldPos + Vector3.up * 1.4f, Vector3.up, RoofRaycastHeight);
                float elevation = worldPos.y - _center.y;

                string tag = ClassifyNavPoint(elevation, isCover, isIndoor);

                NavPointRegistry.Register(
                    worldPos,
                    isCover,
                    tag,
                    elevation,
                    isIndoor);

                _registered++;
            }

            if (_scanQueue.Count == 0 && _backgroundPending.Count > 0)
            {
                for (int i = 0; i < _backgroundPending.Count; i++)
                {
                    _scanQueue.Enqueue(_backgroundPending[i]);
                }

                _backgroundPending.Clear();
                Logger.LogInfo("[NavPointBootstrapper] Added vertical fallback scan layer.");
            }

            if (_scanQueue.Count == 0)
            {
                _isRunning = false;
                Logger.LogInfo("[NavPointBootstrapper] Completed: " + _registered + " nav points registered.");
            }
        }

        #endregion

        #region Private Helpers

        private static string ClassifyNavPoint(float elevation, bool isCover, bool isIndoor)
        {
            if (isIndoor)
            {
                return "indoor";
            }

            if (elevation > 6f)
            {
                return "roof";
            }

            if (isCover)
            {
                return "fallback";
            }

            return "flank";
        }

        private static bool IsCoverPoint(Vector3 pos)
        {
            Vector3 eye = pos + Vector3.up * 1.4f;

            for (float angle = -45f; angle <= 45f; angle += 15f)
            {
                Vector3 dir = Quaternion.Euler(0f, angle, 0f) * Vector3.forward;

                if (Physics.Raycast(eye, dir, out RaycastHit _, ForwardCoverCheckDistance, LayerMaskClass.HighPolyCollider))
                {
                    return true;
                }
            }

            return false;
        }

        private static void PrequeueVerticalPoints()
        {
            float half = ScanRadius * 0.5f;

            for (float x = -half; x <= half; x += ScanSpacing)
            {
                for (float z = -half; z <= half; z += ScanSpacing)
                {
                    for (float height = 5f; height <= VerticalProbeMax; height += VerticalStep)
                    {
                        Vector3 pos = _center + new Vector3(x, height, z);
                        _backgroundPending.Add(pos);
                    }
                }
            }
        }

        #endregion
    }
}
