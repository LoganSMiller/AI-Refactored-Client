// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Abstract base class for AI world-level systems with lifecycle binding.
    /// Override any method to hook into initialization, update, or shutdown.
    /// </summary>
    public abstract class BaseAIWorldSystemBootstrapper : IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called when the AI world initializes. Override to inject custom system logic.
        /// </summary>
        public virtual void Initialize()
        {
        }

        /// <summary>
        /// Called every frame or fixed tick. Override to update your system.
        /// </summary>
        /// <param name="deltaTime">Delta time since last tick.</param>
        public virtual void Tick(float deltaTime)
        {
        }

        /// <summary>
        /// Called when a raid ends. Override to perform teardown or reset logic.
        /// </summary>
        public virtual void OnRaidEnd()
        {
        }

        /// <summary>
        /// Indicates whether this system is ready to run.
        /// </summary>
        /// <returns>True if ready; false to skip execution.</returns>
        public virtual bool IsReady()
        {
            return true;
        }

        /// <summary>
        /// Specifies which world phase this system should activate during.
        /// </summary>
        /// <returns>The required world phase.</returns>
        public virtual WorldPhase RequiredPhase()
        {
            return WorldPhase.PostInit;
        }
    }
}
