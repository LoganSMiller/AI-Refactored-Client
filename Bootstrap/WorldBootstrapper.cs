// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using Unity.AI.Navigation;
    using UnityEngine;

    /// <summary>
    /// Initializes and ticks all AIRefactored world systems after GameWorld is stable.
    /// </summary>
    public static class WorldBootstrapper
    {
        #region Fields

        private static readonly List<IAIWorldSystemBootstrapper> Systems = new List<IAIWorldSystemBootstrapper>(16);
        private static ManualLogSource _loggerInstance = Plugin.LoggerInstance;
        private static bool _hasInitialized;
        private static float _lastSweep;
        private const float SweepInterval = 20f;

        private static ManualLogSource Logger => _loggerInstance;

        #endregion

        #region Lifecycle

        /// <summary>
        /// Begins full AIRefactored world initialization sequence.
        /// </summary>
        /// <param name="logger">Log source for system reporting.</param>
        public static void Begin(ManualLogSource logger)
        {
            _loggerInstance = logger ?? Plugin.LoggerInstance;

            if (_hasInitialized)
            {
                Logger.LogInfo("[WorldBootstrapper] Already initialized — skipping.");
                return;
            }

            Systems.Clear();
            RegisterSystem(BotRecoveryService.Instance);
            RegisterSystem(BotSpawnWatcherService.Instance);
            RegisterSystem(LootRuntimeWatcher.Instance);
            RegisterSystem(DeadBodyObserverService.Instance);
            RegisterSystem(new HotspotRegistryBootstrapper());

            for (int i = 0; i < Systems.Count; i++)
            {
                IAIWorldSystemBootstrapper system = Systems[i];
                if (system.RequiredPhase() == WorldPhase.WorldReady)
                {
                    system.Initialize();
                }
            }

            _hasInitialized = true;
            Logger.LogInfo("[WorldBootstrapper] ✅ World systems initialized.");
        }

        /// <summary>
        /// Stops and resets all AIRefactored world systems.
        /// </summary>
        public static void Stop()
        {
            for (int i = 0; i < Systems.Count; i++)
            {
                Systems[i].OnRaidEnd();
            }

            Systems.Clear();
            _hasInitialized = false;

            Logger.LogInfo("[WorldBootstrapper] 🔻 AIRefactored systems shut down.");
        }

        #endregion

        #region Tick

        /// <summary>
        /// Ticks all world systems after initialization.
        /// </summary>
        /// <param name="deltaTime">Delta time since last frame.</param>
        public static void Tick(float deltaTime)
        {
            if (!_hasInitialized)
            {
                return;
            }

            float now = Time.time;

            for (int i = 0; i < Systems.Count; i++)
            {
                Systems[i].Tick(deltaTime);
            }

            if (now - _lastSweep >= SweepInterval)
            {
                _lastSweep = now;
                GameWorldHandler.EnforceBotBrains();
                GameWorldHandler.CleanupDeadBotsSmoothly();
            }
        }

        #endregion

        #region Utility

        /// <summary>
        /// Builds all visible NavMesh surfaces for the current scene (if applicable).
        /// </summary>
        public static void PrewarmAllNavMeshes()
        {
            if (Application.isBatchMode || FikaHeadlessDetector.IsHeadless)
            {
                Logger.LogInfo("[WorldBootstrapper] Skipping NavMesh prewarm in headless.");
                return;
            }

            string mapId = GameWorldHandler.TryGetValidMapName();
            if (mapId.Length == 0)
            {
                Logger.LogWarning("[WorldBootstrapper] Cannot prewarm — no valid map.");
                return;
            }

            NavMeshSurface[] surfaces = Object.FindObjectsOfType<NavMeshSurface>();
            for (int i = 0; i < surfaces.Length; i++)
            {
                NavMeshSurface surface = surfaces[i];
                if (surface.enabled && surface.gameObject.activeInHierarchy)
                {
                    surface.BuildNavMesh();
                    BotCoverRetreatPlanner.RegisterSurface(mapId, surface);
                }
            }
        }

        /// <summary>
        /// Adds or enforces a BotBrain component on the provided AI player.
        /// </summary>
        /// <param name="player">The EFT Player instance.</param>
        /// <param name="bot">Optional bot owner reference.</param>
        public static void EnforceBotBrain(Player player, BotOwner bot)
        {
            if (player == null || !player.IsAI)
            {
                return;
            }

            GameObject go = player.gameObject;
            if (go == null)
            {
                return;
            }

            BotBrainGuardian.Enforce(go);

            if (go.GetComponent<BotBrain>() == null && bot != null)
            {
                BotBrain brain = go.AddComponent<BotBrain>();
                brain.Initialize(bot);
            }
        }

        #endregion

        #region Registration

        /// <summary>
        /// Registers a modular world-level system for lifecycle management.
        /// </summary>
        /// <param name="system">System to register.</param>
        public static void RegisterSystem(IAIWorldSystemBootstrapper system)
        {
            if (system != null && !Systems.Contains(system))
            {
                Systems.Add(system);
            }
        }

        #endregion
    }
}
