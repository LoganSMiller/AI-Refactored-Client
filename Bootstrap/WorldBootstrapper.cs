// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Bootstrap
{
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using Unity.AI.Navigation;
    using UnityEngine;

    public sealed class WorldBootstrapper : MonoBehaviour
    {
        #region Constants

        private const float SweepInterval = 20f;
        private const float ZoneCheckInterval = 1f;
        private const float InitializationRetryInterval = 3f;
        private const int MaxInitializationRetries = 5;
        private const float MaxBackoffSeconds = 30f;

        #endregion

        #region Static State

        private static GameObject? _worldBootstrapHost;
        private static readonly object LockObj = new object();

        private static ManualLogSource Logger => AIRefactoredController.Logger;

        #endregion

        #region Instance Fields

        private volatile bool _isInitializing;
        private int _attempts;
        private float _lastSweep = -999f;
        private float _lastZoneCheck = -999f;

        #endregion

        public static void TryInitialize()
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                LogSafe("[WorldBootstrapper] Skipped bootstrap — not authoritative.");
                return;
            }

            if (IsValidGameObject(_worldBootstrapHost))
            {
                LogSafe("[WorldBootstrapper] Already injected — skipping.");
                return;
            }

            _worldBootstrapHost = new GameObject("WorldBootstrapper (Injected)");
            Object.DontDestroyOnLoad(_worldBootstrapHost);
            _worldBootstrapHost.AddComponent<WorldBootstrapper>();

            LogSafe("[WorldBootstrapper] ✅ Manual bootstrap injected.");
        }

        private void Awake()
        {
            if (this.gameObject != _worldBootstrapHost)
            {
                LogSafe("[WorldBootstrapper] Duplicate instance detected — destroying self.");
                Destroy(this.gameObject);
                return;
            }

            LogSafe("[WorldBootstrapper] 🟢 Awake — starting world init monitor.");

            BotRecoveryService.Reset();
            BotSpawnWatcherService.Reset();

            if (!IsLoggerReadyForLootWatcher())
            {
                LootRuntimeWatcher.InitializeLogger(Logger);
            }

            if (GameWorldHandler.IsLocalHost())
            {
                LogSafe("[WorldBootstrapper] 🧠 Authoritative host — booting systems.");
                StartCoroutine(SafeInitializeRoutine());
            }
            else
            {
                LogSafe("[WorldBootstrapper] 🚫 Non-authoritative environment — skipping init.");
            }
        }

        private void OnDestroy()
        {
            if (this.gameObject == _worldBootstrapHost)
            {
                StopAllCoroutines();
                LogSafe("[WorldBootstrapper] 🔻 Destroying bootstrapper — clearing runtime state.");

                HotspotRegistry.Clear();
                LootRegistry.Clear();
                NavPointRegistry.Clear();
                ZoneAssignmentHelper.Clear();
                BotSpawnWatcherService.Reset();
                BotRecoveryService.Reset();

                _worldBootstrapHost = null;
            }
        }

        private IEnumerator SafeInitializeRoutine()
        {
            if (_isInitializing)
            {
                LogSafe("[WorldBootstrapper] Initialization already running — skipping.");
                yield break;
            }

            _isInitializing = true;
            yield return StartCoroutine(DelayedInitialize());
            _isInitializing = false;
        }

        private IEnumerator DelayedInitialize()
        {
            lock (LockObj)
            {
                _attempts++;
            }

            float backoff = Mathf.Min(Mathf.Pow(2f, _attempts) * InitializationRetryInterval, MaxBackoffSeconds);
            yield return new WaitForSeconds(backoff);

            if (!GameWorldHandler.TryForceResolveMapName() || !GameWorldHandler.IsSafeToInitialize)
            {
                LogSafe("[WorldBootstrapper] 🚧 World not yet ready — will retry.");
                yield break;
            }

            string mapId = GameWorldHandler.GetCurrentMapName();
            LogSafe("[WorldBootstrapper] 🔧 Initializing systems for map: " + mapId);

            HotspotRegistry.Clear();
            HotspotRegistry.Initialize(mapId);

            ZoneAssignmentHelper.Clear();
            NavPointRegistry.Clear();

            IZones? zones = null;
            int wait = 0;
            while (!GameWorldHandler.TryGetIZones(out zones) || zones == null)
            {
                if (++wait > 60)
                {
                    LogSafe("[WorldBootstrapper] ⚠ Timed out waiting for IZones.");
                    break;
                }

                yield return null;
            }

            if (zones != null)
            {
                ZoneAssignmentHelper.Initialize(zones);
                NavPointRegistry.InitializeZoneSystem(zones);
            }

            NavPointRegistry.EnableSpatialIndexing(true);
            NavPointRegistry.RegisterAll(mapId);

            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();

            PrewarmAllNavMeshes();

            LogSafe("[WorldBootstrapper] ✅ All systems initialized.");
        }

        private void Update()
        {
            if (!GameWorldHandler.IsHost)
            {
                return;
            }

            float now = Time.time;

            if (now - _lastSweep >= SweepInterval)
            {
                _lastSweep = now;
                GameWorldHandler.EnforceBotBrains();
            }

            BotSpawnWatcherService.Tick();
            BotRecoveryService.Tick(now);
            LootRuntimeWatcher.Tick(now);
            BotWorkGroupDispatcher.Tick();
            BotWorkScheduler.Tick(now);
            GameWorldHandler.CleanupDeadBotsSmoothly();

            if (now - _lastZoneCheck >= ZoneCheckInterval)
            {
                _lastZoneCheck = now;
                if (!GameWorldHandler.TryGetIZones(out _))
                {
                    LogSafe("[WorldBootstrapper] ⚠ Zones not yet registered.");
                }
            }
        }

        private void PrewarmAllNavMeshes()
        {
            if (Application.isBatchMode || FikaHeadlessDetector.IsHeadless)
            {
                LogSafe("[WorldBootstrapper] Skipping NavMesh prewarm in headless environment.");
                return;
            }

            string mapId = GameWorldHandler.GetCurrentMapName();
            NavMeshSurface[] surfaces = Object.FindObjectsOfType<NavMeshSurface>();

            for (int i = 0; i < surfaces.Length; i++)
            {
                NavMeshSurface surface = surfaces[i];
                if (surface != null && surface.enabled && surface.gameObject.activeInHierarchy)
                {
                    surface.BuildNavMesh();
                    BotCoverRetreatPlanner.RegisterSurface(mapId, surface);
                }
            }
        }

        private static bool IsLoggerReadyForLootWatcher()
        {
            try
            {
                var prop = typeof(LootRuntimeWatcher).GetProperty("Logger", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);
                if (prop != null)
                {
                    object? value = prop.GetValue(null);
                    return value != null;
                }
            }
            catch
            {
                // fallback
            }

            return false;
        }

        private static bool IsValidGameObject(GameObject? obj)
        {
            return obj != null && !obj.Equals(null);
        }

        private static void LogSafe(string message)
        {
            try
            {
                AIRefactoredController.Logger.LogInfo(message);
            }
            catch
            {
                // Logger not initialized yet
            }
        }

        public static void EnforceBotBrain(Player player, BotOwner? bot = null)
        {
            if (player == null || !player.IsAI || player.gameObject == null)
            {
                return;
            }

            GameObject go = player.gameObject;
            BotBrainGuardian.Enforce(go);

            if (go.GetComponent<BotBrain>() == null && bot != null)
            {
                BotBrain brain = go.AddComponent<BotBrain>();
                brain.Initialize(bot);
            }
        }
    }
}
