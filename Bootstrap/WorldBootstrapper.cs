// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Bootstrap
{
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using Unity.AI.Navigation;
    using UnityEngine;

    /// <summary>
    /// Initializes AIRefactored world systems on scene load. Handles bot registration, NavMesh warm-up,
    /// and AI brain injection in both multiplayer and headless environments.
    /// </summary>
    public sealed class WorldBootstrapper : MonoBehaviour
    {
        #region Constants

        private const float SweepInterval = 20.0f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;

        private static bool _hasInitialized;
        private float _lastSweepTime = -999.0f;
        private BotSystemRecoveryWatcher? _recoveryWatcher;

        #endregion

        #region Static Bootstrap

        /// <summary>
        /// Triggers world system initialization. Safe for headless and early injection.
        /// </summary>
        public static void TryInitialize()
        {
            if (_hasInitialized || !GameWorldHandler.IsLocalHost())
            {
                return;
            }

            GameObject host = new GameObject("WorldBootstrapper (Injected)");
            Object.DontDestroyOnLoad(host);
            host.AddComponent<WorldBootstrapper>();

            _hasInitialized = true;
            Logger.LogInfo("[WorldBootstrapper] ✅ Manual bootstrap injected.");
        }

        #endregion

        #region Unity Lifecycle

        private void Awake()
        {
            Logger.LogInfo("[WorldBootstrapper] 🟢 Awake triggered.");

            this._recoveryWatcher = this.gameObject.AddComponent<BotSystemRecoveryWatcher>();
            BotWorkScheduler.AutoInjectFlushHost();

            if (GameWorldHandler.IsLocalHost())
            {
                Logger.LogInfo("[WorldBootstrapper] 🧠 Authoritative host detected — initializing immediately.");
                this.InitializeWorldSystems();
            }
            else
            {
                Logger.LogWarning("[WorldBootstrapper] 🚫 Non-host client detected — initialization skipped.");
            }
        }

        private void Update()
        {
            if (!GameWorldHandler.IsLocalHost())
            {
                return;
            }

            float now = Time.time;

            if (now - this._lastSweepTime >= SweepInterval)
            {
                this._lastSweepTime = now;
                GameWorldHandler.EnforceBotBrains();
            }

            GameWorldHandler.CleanupDeadBotsSmoothly();
        }

        private void OnDestroy()
        {
            if (this._recoveryWatcher != null)
            {
                Object.Destroy(this._recoveryWatcher);
                this._recoveryWatcher = null;
            }

            Logger.LogInfo("[WorldBootstrapper] 🔻 Destroyed — clearing systems.");
            HotspotRegistry.Clear();
            LootRegistry.Clear();
            NavPointRegistry.Clear();

            _hasInitialized = false;
        }

        #endregion

        #region World Init

        private void InitializeWorldSystems()
        {
            string mapId = GameWorldHandler.GetCurrentMapName();
            Logger.LogInfo("[WorldBootstrapper] 🔧 Initializing world systems for: " + mapId);

            HotspotRegistry.Clear();
            HotspotRegistry.Initialize(mapId);
            Logger.LogInfo("[WorldBootstrapper] ✅ Hotspot registry ready.");

            ZoneAssignmentHelper.Clear();
            IZones? zones;
            if (GameWorldHandler.TryGetIZones(out zones) && zones != null)
            {
                ZoneAssignmentHelper.Initialize(zones);
                NavPointRegistry.InitializeZoneSystem(zones);
                Logger.LogInfo("[WorldBootstrapper] ✅ Zone assignment ready.");
            }
            else
            {
                Logger.LogWarning("[WorldBootstrapper] ⚠ No IZones available — skipping zone tagging.");
            }

            NavPointRegistry.Clear();
            NavPointRegistry.EnableSpatialIndexing(true);
            NavPointRegistry.RegisterAll(mapId);
            Logger.LogInfo("[WorldBootstrapper] ✅ Navigation points registered.");

            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();
            Logger.LogInfo("[WorldBootstrapper] ✅ Loot systems initialized.");

            this.PrewarmAllNavMeshes();
            Logger.LogInfo("[WorldBootstrapper] ✅ All world systems ready.");
        }

        private void PrewarmAllNavMeshes()
        {
            string mapId = GameWorldHandler.GetCurrentMapName();
            NavMeshSurface[] surfaces = Object.FindObjectsOfType<NavMeshSurface>();

            for (int i = 0; i < surfaces.Length; i++)
            {
                NavMeshSurface surface = surfaces[i];
                if (surface != null && surface.enabled && surface.gameObject.activeInHierarchy)
                {
                    surface.BuildNavMesh();
                    BotCoverRetreatPlanner.RegisterSurface(mapId, surface);
                    Logger.LogInfo("[WorldBootstrapper] 🔄 Prewarmed NavMesh: " + surface.name);
                }
            }
        }

        #endregion

        #region Bot Brain Injection

        /// <summary>
        /// Ensures a clean BotBrain is attached to the bot, removing any other conflicting components.
        /// </summary>
        /// <param name="player">The bot's EFT.Player instance.</param>
        /// <param name="bot">Optional BotOwner instance.</param>
        public static void EnforceBotBrain(Player player, BotOwner? bot = null)
        {
            if (player == null || !player.IsAI || player.gameObject == null)
            {
                return;
            }

            GameObject obj = player.gameObject;
            BotBrainGuardian.Enforce(obj);

            if (obj.GetComponent<BotBrain>() != null)
            {
                return;
            }

            BotBrain brain = obj.AddComponent<BotBrain>();
            if (bot != null)
            {
                brain.Initialize(bot);
            }
        }

        #endregion
    }
}
