// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine.AI;

    /// <summary>
    /// Pool for reusable <see cref="NavMeshPath"/> objects.
    /// Prevents repeated allocations when calculating AI fallback or patrol paths.
    /// </summary>
    public static class TempNavMeshPathPool
    {
        private static readonly Stack<NavMeshPath> Pool = new Stack<NavMeshPath>(16);
        private static readonly object SyncRoot = new object();

        static TempNavMeshPathPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        public static NavMeshPath Rent()
        {
            lock (SyncRoot)
            {
                if (Pool.Count > 0)
                {
                    return Pool.Pop();
                }
            }

            return new NavMeshPath();
        }

        public static void Return(NavMeshPath path)
        {
            if (path == null)
            {
                return;
            }

            // NavMeshPath has no Clear() method; reset handled by caller.
            lock (SyncRoot)
            {
                Pool.Push(path);
            }
        }

        public static void Prewarm(int count)
        {
            if (count <= 0)
            {
                return;
            }

            lock (SyncRoot)
            {
                for (int i = 0; i < count; i++)
                {
                    Pool.Push(new NavMeshPath());
                }
            }
        }

        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                Pool.Clear();
            }
        }
    }
}
