// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Pool for temporary <see cref="int"/> array reuse across math-heavy logic paths.
    /// </summary>
    public static class TempIntArrayPool
    {
        private static readonly Dictionary<int, Stack<int[]>> PoolBySize = new Dictionary<int, Stack<int[]>>(16);
        private static readonly object SyncRoot = new object();

        static TempIntArrayPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        public static int[] Rent(int size)
        {
            if (size <= 0) size = 1;

            Stack<int[]> stack;
            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(size, out stack) && stack.Count > 0)
                    return stack.Pop();
            }

            return new int[size];
        }

        public static void Return(int[] array)
        {
            if (array == null || array.Length == 0) return;

            Stack<int[]> stack;
            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out stack))
                {
                    stack = new Stack<int[]>(8);
                    PoolBySize[array.Length] = stack;
                }

                stack.Push(array);
            }
        }

        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0) return;

            Stack<int[]> stack;
            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out stack))
                {
                    stack = new Stack<int[]>(count);
                    PoolBySize[size] = stack;
                }

                for (int i = 0; i < count; i++)
                {
                    stack.Push(new int[size]);
                }
            }
        }

        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var kvp in PoolBySize)
                    kvp.Value.Clear();

                PoolBySize.Clear();
            }
        }
    }
}
