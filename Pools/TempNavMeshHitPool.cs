// <auto-generated>
//   AI-Refactored: TempNavMeshHitPool.cs (Ultimate Arbitration, Max-Realism, Zero-Alloc Edition – June 2025)
//   Bulletproof pooling for NavMeshHit[] arrays for high-performance AI navigation/fallback logic.
//   Thread-safe, teardown/reload safe, diagnostics-ready, and fully AI-Refactored compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine.AI;

    /// <summary>
    /// Pool for reusable <see cref="NavMeshHit"/> arrays used in all navigation/fallback AI systems.
    /// Bulletproof: Thread-safe, zero-allocation, teardown/reload safe, diagnostics-ready.
    /// </summary>
    public static class TempNavMeshHitPool
    {
        private static readonly Dictionary<int, Stack<NavMeshHit[]>> PoolBySize = new Dictionary<int, Stack<NavMeshHit[]>>(16);
        private static readonly object SyncRoot = new object();
        private static int _totalRented, _totalReturned, _totalPooled;

        static TempNavMeshHitPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Rents a pooled <see cref="NavMeshHit"/> array of at least the given size (never null).
        /// </summary>
        public static NavMeshHit[] Rent(int size)
        {
            if (size <= 0)
                size = 1;

            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(size, out var stack) && stack.Count > 0)
                {
                    _totalRented++;
                    return stack.Pop();
                }
            }
            _totalRented++;
            return new NavMeshHit[size];
        }

        /// <summary>
        /// Returns a <see cref="NavMeshHit"/> array to the pool. Null/zero-length arrays are ignored.
        /// </summary>
        public static void Return(NavMeshHit[] array)
        {
            if (array == null || array.Length == 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out var stack))
                {
                    stack = new Stack<NavMeshHit[]>(8);
                    PoolBySize[array.Length] = stack;
                }
                stack.Push(array);
                _totalReturned++;
                _totalPooled = stack.Count;
            }
        }

        /// <summary>
        /// Prewarms the pool with the specified number of <see cref="NavMeshHit"/> arrays of the given size.
        /// </summary>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out var stack))
                {
                    stack = new Stack<NavMeshHit[]>(count);
                    PoolBySize[size] = stack;
                }
                for (int i = 0; i < count; i++)
                    stack.Push(new NavMeshHit[size]);
                _totalPooled = stack.Count;
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="NavMeshHit"/> arrays and resets the pool state (teardown/reload safe).
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolBySize.Values)
                    stack.Clear();
                PoolBySize.Clear();
                _totalPooled = 0;
                _totalRented = 0;
                _totalReturned = 0;
            }
        }

        /// <summary>
        /// Returns pooling stats for diagnostics/monitoring.
        /// </summary>
        public static (int arraySizes, int totalPooled, int totalRented, int totalReturned) GetStats()
        {
            lock (SyncRoot)
            {
                int pooled = 0;
                foreach (var stack in PoolBySize.Values)
                    pooled += stack.Count;
                return (PoolBySize.Count, pooled, _totalRented, _totalReturned);
            }
        }
    }
}
