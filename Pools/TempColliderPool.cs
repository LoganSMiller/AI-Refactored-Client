// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Centralized pool for reusable <see cref="Collider"/> arrays.
    /// Reduces GC allocation during spatial queries such as OverlapSphere or CapsuleCast.
    /// </summary>
    public static class TempColliderPool
    {
        private static readonly Dictionary<int, Stack<Collider[]>> PoolBySize = new Dictionary<int, Stack<Collider[]>>(8);
        private static readonly object SyncRoot = new object();

        static TempColliderPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        /// <summary>
        /// Rents a cleared array of <see cref="Collider"/>s of at least the specified length.
        /// </summary>
        /// <param name="size">Minimum required length.</param>
        /// <returns>Reusable <see cref="Collider"/> array.</returns>
        public static Collider[] Rent(int size)
        {
            if (size <= 0)
            {
                size = 1;
            }

            Stack<Collider[]> stack;
            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(size, out stack) && stack.Count > 0)
                {
                    return stack.Pop();
                }
            }

            return new Collider[size];
        }

        /// <summary>
        /// Returns a <see cref="Collider"/> array to the pool for reuse.
        /// </summary>
        /// <param name="array">Array to return.</param>
        public static void Return(Collider[] array)
        {
            if (array == null || array.Length == 0)
            {
                return;
            }

            Stack<Collider[]> stack;
            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out stack))
                {
                    stack = new Stack<Collider[]>(8);
                    PoolBySize[array.Length] = stack;
                }

                stack.Push(array);
            }
        }

        /// <summary>
        /// Prewarms the pool by adding empty arrays of a specified size.
        /// </summary>
        /// <param name="size">Length of each array.</param>
        /// <param name="count">Number of arrays to create.</param>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
            {
                return;
            }

            Stack<Collider[]> stack;
            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out stack))
                {
                    stack = new Stack<Collider[]>(count);
                    PoolBySize[size] = stack;
                }

                for (int i = 0; i < count; i++)
                {
                    stack.Push(new Collider[size]);
                }
            }
        }

        /// <summary>
        /// Clears all pooled arrays across all sizes.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (KeyValuePair<int, Stack<Collider[]>> kvp in PoolBySize)
                {
                    kvp.Value.Clear();
                }

                PoolBySize.Clear();
            }
        }
    }
}
