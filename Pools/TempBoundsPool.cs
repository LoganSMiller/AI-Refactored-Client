// <auto-generated>
//   AI-Refactored: TempBoundsPool.cs (Ultimate Arbitration, Max-Realism & Parity – June 2025)
//   Bulletproof, reusable Bounds[] pooling for ultra-high-performance AI/world logic.
//   Fully thread-safe, teardown/reload safe, diagnostics-ready, AI-Refactored pooling compliant. MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Thread-safe, zero-allocation pool for <see cref="Bounds"/> arrays.
    /// Used for AIRefactored/world calculations (visibility, occlusion, nav, zone, etc).
    /// Bulletproof: teardown/reload safe, domain-unload compliant, always pooled, ready for hot path and multi-threading.
    /// </summary>
    public static class TempBoundsPool
    {
        private static readonly Dictionary<int, Stack<Bounds[]>> PoolBySize = new Dictionary<int, Stack<Bounds[]>>(16);
        private static readonly object SyncRoot = new object();
        private static int _totalPooled;
        private static int _totalRented;
        private static int _totalReturned;

        static TempBoundsPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Rents a pooled <see cref="Bounds"/> array of at least the given size (never null, always min length 1).
        /// </summary>
        /// <param name="size">Minimum length of the array.</param>
        /// <returns>Pooled or new Bounds[] array of requested size.</returns>
        public static Bounds[] Rent(int size)
        {
            if (size <= 0)
                size = 1;

            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(size, out var stack) && stack.Count > 0)
                {
                    _totalRented++;
                    return stack.Pop();
                }
            }

            _totalRented++;
            return new Bounds[size];
        }

        /// <summary>
        /// Returns a <see cref="Bounds"/> array to the pool for future use. Null and empty arrays are ignored.
        /// </summary>
        /// <param name="array">Array to return.</param>
        public static void Return(Bounds[] array)
        {
            if (array == null || array.Length == 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out var stack))
                {
                    stack = new Stack<Bounds[]>(8);
                    PoolBySize[array.Length] = stack;
                }
                stack.Push(array);
                _totalReturned++;
                _totalPooled = PoolBySize[array.Length].Count;
            }
        }

        /// <summary>
        /// Prewarms the pool with the specified number of <see cref="Bounds"/> arrays of a given size.
        /// </summary>
        /// <param name="size">Array length for each array.</param>
        /// <param name="count">Number of arrays to preallocate.</param>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out var stack))
                {
                    stack = new Stack<Bounds[]>(count);
                    PoolBySize[size] = stack;
                }
                for (int i = 0; i < count; i++)
                    stack.Push(new Bounds[size]);
                _totalPooled = stack.Count;
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="Bounds"/> arrays and resets internal state. 
        /// Safe for teardown, domain reload, and infinite reload/teardown cycles.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolBySize.Values)
                    stack.Clear();
                PoolBySize.Clear();
                _totalPooled = 0;
                _totalReturned = 0;
                _totalRented = 0;
            }
        }

        /// <summary>
        /// Gets current pooling stats (optional for debugging/monitoring).
        /// </summary>
        public static (int totalTypes, int totalPooled, int totalRented, int totalReturned) GetStats()
        {
            lock (SyncRoot)
            {
                int pooled = 0;
                foreach (var stack in PoolBySize.Values)
                    pooled += stack.Count;
                return (PoolBySize.Count, pooled, _totalRented, _totalReturned);
            }
        }
    }
}
