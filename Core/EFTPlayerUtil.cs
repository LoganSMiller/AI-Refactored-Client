// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    ///     Provides safe, disambiguated access to EFT.Player and IPlayer properties to avoid Dissonance conflicts.
    /// </summary>
    public static class EFTPlayerUtil
    {
        /// <summary>
        ///     Safely casts an IPlayer to EFT.Player without causing Dissonance ambiguity.
        /// </summary>
        /// <param name="raw">The raw IPlayer instance to cast.</param>
        /// <returns>The cast EFT.Player if successful; otherwise, null.</returns>
        public static Player? AsEFTPlayer(IPlayer? raw)
        {
            return raw as Player;
        }
       
        /// <summary>
        ///     Safely casts an EFT.Player to EFT.IPlayer, bypassing Dissonance ambiguity.
        ///     Will return null if input is null or not a valid EFT.Player.
        /// </summary>
        public static EFT.IPlayer? AsSafeIPlayer(Player? player)
        {
            if (player == null)
            {
                return null;
            }

            object raw = player;
            return raw is EFT.IPlayer safe ? safe : null;
        }

        /// <summary>
        ///     Returns true if the given EFT.Player is alive and has a valid transform.
        /// </summary>
        public static bool IsValid(Player? player)
        {
            return player != null
                   && player.HealthController != null
                   && player.HealthController.IsAlive
                   && player.Transform?.Original != null;
        }

        /// <summary>
        ///     Gets the EFT.Player's root transform, or null if missing.
        /// </summary>
        public static Transform? GetTransform(Player? player)
        {
            return player?.Transform?.Original;
        }

        /// <summary>
        ///     Gets the world-space position of an EFT.Player using their root transform if available.
        /// </summary>
        public static Vector3 GetPosition(Player? player)
        {
            Transform? root = GetTransform(player);
            return root != null ? root.position : Vector3.zero;
        }

        /// <summary>
        ///     Returns true if a potential squadmate is valid, alive, and has a usable transform.
        /// </summary>
        public static bool IsValidGroupPlayer(Player? player)
        {
            return IsValid(player);
        }

        /// <summary>
        ///     Resolves the EFT.Player from a BotOwner's IPlayer reference safely.
        /// </summary>
        public static Player? ResolvePlayer(BotOwner? bot)
        {
            if (bot == null)
            {
                return null;
            }

            return bot.GetPlayer as Player;
        }

        /// <summary>
        ///     Safely resolves an EFT.Player from the GameWorld by profile ID.
        ///     Prevents ambiguity with Dissonance IPlayer interfaces.
        /// </summary>
        public static Player? ResolvePlayerById(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            var world = GameWorldHandler.Get();
            if (world == null)
            {
                return null;
            }

            object? resolved = world.GetAlivePlayerByProfileID(profileId);
            return resolved is Player player ? player : null;
        }

        /// <summary>
        ///     Returns true if the given player is considered an enemy by the querying bot.
        /// </summary>
        public static bool IsEnemyOf(BotOwner? self, Player? target)
        {
            if (self == null || target == null)
            {
                return false;
            }

            BotsGroup? group = self.BotsGroup;
            if (group == null)
            {
                return false;
            }

            IPlayer? targetCast = AsSafeIPlayer(target);
            return targetCast != null && group.IsEnemy(targetCast);
        }

        /// <summary>
        ///     Returns true if the two players are on different teams and have unique IDs.
        /// </summary>
        public static bool AreEnemies(Player? a, Player? b)
        {
            if (a == null || b == null)
            {
                return false;
            }

            return a.Side != b.Side && a.ProfileId != b.ProfileId;
        }

        /// <summary>
        ///     Returns the player ID from a BotOwner, resolving through AIData and GetPlayer.
        /// </summary>
        public static string? GetProfileId(BotOwner? bot)
        {
            return bot?.GetPlayer?.ProfileId;
        }
    }
}
