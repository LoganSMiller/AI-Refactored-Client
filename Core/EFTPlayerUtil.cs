// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Provides null-safe and Dissonance-safe helpers for resolving EFT.Player and IPlayer references.
    /// </summary>
    public static class EFTPlayerUtil
    {
        #region Resolution

        /// <summary>
        /// Attempts to cast an IPlayer to EFT.Player while avoiding Dissonance ambiguity.
        /// </summary>
        /// <param name="raw">The IPlayer instance to cast.</param>
        /// <returns>The cast EFT.Player if valid; otherwise, null.</returns>
        public static Player? AsEFTPlayer(IPlayer? raw)
        {
            return raw as Player;
        }

        /// <summary>
        /// Attempts to extract a valid EFT.Player from an IPlayer reference.
        /// </summary>
        /// <param name="raw">Raw IPlayer object.</param>
        /// <param name="player">Resolved EFT.Player output.</param>
        /// <returns>True if resolution succeeded; otherwise false.</returns>
        public static bool TryGetValidPlayer(IPlayer? raw, out Player? player)
        {
            player = raw as Player;
            return player != null && IsValid(player);
        }

        /// <summary>
        /// Returns a cast-safe EFT.IPlayer interface from a given Player.
        /// </summary>
        /// <param name="player">The EFT Player.</param>
        /// <returns>Null if invalid or non-castable.</returns>
        public static IPlayer? AsSafeIPlayer(Player? player)
        {
            if (player == null)
            {
                return null;
            }

            object obj = player;
            return obj is IPlayer cast ? cast : null;
        }

        /// <summary>
        /// Safely resolves a Player from a BotOwner.
        /// </summary>
        /// <param name="bot">The BotOwner instance.</param>
        /// <returns>Resolved EFT Player, or null.</returns>
        public static Player? ResolvePlayer(BotOwner? bot)
        {
            return bot?.GetPlayer as Player;
        }

        /// <summary>
        /// Finds a Player by profile ID in the current GameWorld.
        /// </summary>
        /// <param name="profileId">Target profile ID.</param>
        /// <returns>Resolved Player or null if not found.</returns>
        public static Player? ResolvePlayerById(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            GameWorld? world = GameWorldHandler.Get();
            if (world == null || world.AllAlivePlayersList == null)
            {
                return null;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? p = world.AllAlivePlayersList[i];
                if (p != null && p.ProfileId == profileId)
                {
                    return p;
                }
            }

            return null;
        }

        #endregion

        #region Validity + Info

        /// <summary>
        /// Returns true if the player is alive and has a valid transform.
        /// </summary>
        /// <param name="player">The EFT Player.</param>
        /// <returns>True if valid and alive.</returns>
        public static bool IsValid(Player? player)
        {
            return player != null &&
                   player.HealthController != null &&
                   player.HealthController.IsAlive &&
                   player.Transform?.Original != null;
        }

        /// <summary>
        /// Returns true if a teammate is valid and active.
        /// </summary>
        /// <param name="player">The Player to check.</param>
        /// <returns>True if valid.</returns>
        public static bool IsValidGroupPlayer(Player? player)
        {
            return IsValid(player);
        }

        /// <summary>
        /// Returns true if the given player is a bot.
        /// </summary>
        /// <param name="player">The Player to check.</param>
        /// <returns>True if AI-controlled.</returns>
        public static bool IsBot(Player? player)
        {
            return player != null && player.IsAI;
        }

        /// <summary>
        /// Gets the side (e.g., Bear, Usec, Savage) of a player.
        /// </summary>
        /// <param name="player">The Player.</param>
        /// <returns>Side if valid; otherwise, EPlayerSide.Savage (as fallback).</returns>
        public static EPlayerSide GetSide(Player? player)
        {
            return player != null ? player.Side : EPlayerSide.Savage;
        }

        /// <summary>
        /// Gets the profile ID from a BotOwner.
        /// </summary>
        /// <param name="bot">The BotOwner.</param>
        /// <returns>Profile ID string or null.</returns>
        public static string? GetProfileId(BotOwner? bot)
        {
            return bot?.GetPlayer?.ProfileId;
        }

        #endregion

        #region Spatial

        /// <summary>
        /// Gets the player’s original transform.
        /// </summary>
        /// <param name="player">The Player.</param>
        /// <returns>Transform or null.</returns>
        public static Transform? GetTransform(Player? player)
        {
            return player?.Transform?.Original;
        }

        /// <summary>
        /// Gets the player’s world position via root transform.
        /// </summary>
        /// <param name="player">The Player.</param>
        /// <returns>World position or Vector3.zero if invalid.</returns>
        public static Vector3 GetPosition(Player? player)
        {
            Transform? root = GetTransform(player);
            return root != null ? root.position : Vector3.zero;
        }

        #endregion

        #region Combat Logic

        /// <summary>
        /// Returns true if the bot considers the target an enemy.
        /// </summary>
        /// <param name="self">BotOwner instance.</param>
        /// <param name="target">Target Player.</param>
        /// <returns>True if enemy.</returns>
        public static bool IsEnemyOf(BotOwner? self, Player? target)
        {
            if (self == null || target == null)
            {
                return false;
            }

            BotsGroup? group = self.BotsGroup;
            if (group == null)
            {
                return false;
            }

            IPlayer? targetCast = AsSafeIPlayer(target);
            return targetCast != null && group.IsEnemy(targetCast);
        }

        /// <summary>
        /// Compares player sides and IDs to determine enemy status.
        /// </summary>
        /// <param name="a">First Player.</param>
        /// <param name="b">Second Player.</param>
        /// <returns>True if players are enemies.</returns>
        public static bool AreEnemies(Player? a, Player? b)
        {
            if (a == null || b == null)
            {
                return false;
            }

            return a.Side != b.Side && a.ProfileId != b.ProfileId;
        }

        #endregion
    }
}
