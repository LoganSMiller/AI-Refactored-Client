// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using EFT;
    using EFT.HealthSystem;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Provides null-safe and Dissonance-safe helpers for resolving EFT.Player and IPlayer references.
    /// Used throughout AI-Refactored for profile resolution, spatial lookups, and bot filtering.
    /// </summary>
    public static class EFTPlayerUtil
    {
        #region Resolution

        public static Player? AsEFTPlayer(IPlayer? raw)
        {
            return raw as Player;
        }

        public static bool TryGetValidPlayer(IPlayer? raw, out Player? player)
        {
            player = raw as Player;
            return player != null && IsValid(player);
        }

        public static IPlayer? AsSafeIPlayer(Player? player)
        {
            if (player == null)
            {
                return null;
            }

            object obj = player;
            return obj is IPlayer cast ? cast : null;
        }

        public static Player? ResolvePlayer(BotOwner? bot)
        {
            return bot != null ? bot.GetPlayer as Player : null;
        }

        public static Player? ResolvePlayerById(string profileId)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                return null;
            }

            GameWorld? world = GameWorldHandler.Get();
            if (world == null || world.AllAlivePlayersList == null)
            {
                return null;
            }

            List<Player> players = world.AllAlivePlayersList;
            foreach (Player p in players)
            {
                if (p != null && p.ProfileId == profileId)
                {
                    return p;
                }
            }

            return null;
        }

        #endregion

        #region Validity + Info

        public static bool IsValid(Player? player)
        {
            return player != null &&
                   player.HealthController != null &&
                   player.HealthController.IsAlive &&
                   player.Transform != null &&
                   player.Transform.Original != null;
        }

        public static bool IsValidGroupPlayer(Player? player)
        {
            return IsValid(player);
        }

        public static bool IsBot(Player? player)
        {
            return player != null && player.IsAI;
        }

        public static EPlayerSide GetSide(Player? player)
        {
            return player != null ? player.Side : EPlayerSide.Savage;
        }

        public static string? GetProfileId(BotOwner? bot)
        {
            return bot != null && bot.GetPlayer != null ? bot.GetPlayer.ProfileId : null;
        }

        public static bool IsValidBotOwner(BotOwner? bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.Memory != null &&
                   bot.WeaponManager != null &&
                   bot.BotsGroup != null;
        }

        public static bool HasValidMovementContext(BotOwner? bot)
        {
            return bot?.GetPlayer?.MovementContext != null;
        }

        public static bool IsFikaHeadlessSafe(BotOwner? bot)
        {
            var player = bot?.GetPlayer;
            return player != null &&
                   player.IsAI &&
                   player.HealthController != null &&
                   player.HealthController.IsAlive;
        }

        #endregion

        #region Spatial

        public static Transform? GetTransform(Player? player)
        {
            return player?.Transform?.Original;
        }

        public static Vector3 GetPosition(Player? player)
        {
            Transform? t = GetTransform(player);
            return t != null ? t.position : Vector3.zero;
        }

        #endregion

        #region Combat Logic

        public static bool IsEnemyOf(BotOwner? self, Player? target)
        {
            if (self == null || target == null)
            {
                return false;
            }

            BotsGroup? group = self.BotsGroup;
            if (group == null)
            {
                return false;
            }

            IPlayer? cast = AsSafeIPlayer(target);
            return cast != null && group.IsEnemy(cast);
        }

        public static bool AreEnemies(Player? a, Player? b)
        {
            if (a == null || b == null)
            {
                return false;
            }

            return a.Side != b.Side && a.ProfileId != b.ProfileId;
        }

        #endregion
    }
}
