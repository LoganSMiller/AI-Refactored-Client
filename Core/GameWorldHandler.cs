// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;
    using EFT;
    using EFT.Game.Spawning;
    using BepInEx.Logging;
    using Comfort.Common;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Runtime;

    public static partial class GameWorldHandler
    {
        // --------------------------------------------------------------------
        // Fields & Properties
        // --------------------------------------------------------------------
        private const float DeadCleanupInterval = 10f;
        private const float LootRefreshCooldown = 4f;
        private const float InitializationRetryInterval = 3f;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static readonly object GameWorldLock = new object();

        private static GameObject? _bootstrapHost;
        private static bool _hasWarnedNoWorld;
        private static bool _hasLoggedHeadlessFallback;
        private static float _lastCleanupTime = -999f;
        private static float _lastLootRefresh = -999f;
        private static float _lastInitCheck = -999f;
        private static bool _isRecovering;

        public static bool IsInitialized { get; private set; }

        // --------------------------------------------------------------------
        // World Resolution
        // --------------------------------------------------------------------
        private static GameWorld? CachedWorld
        {
            get
            {
                lock (GameWorldLock)
                {
                    if (_isRecovering)
                    {
                        Logger.LogWarning("[GameWorldHandler] World recovering—skipping requests.");
                        return null;
                    }

                    if (!FikaHeadlessDetector.IsHeadless && Singleton<ClientGameWorld>.Instantiated)
                        return Singleton<ClientGameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless && Singleton<GameWorld>.Instantiated)
                        return Singleton<GameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless)
                    {
                        var fallback = TryRecoverFromScene();
                        if (fallback != null)
                        {
                            ForceAssign(fallback);
                            return fallback;
                        }
                    }

                    return null;
                }
            }
        }

        public static GameWorld? Get() => CachedWorld;

        public static void ForceAssign(GameWorld world)
        {
            if (world != null && !Singleton<GameWorld>.Instantiated)
            {
                Logger.LogWarning("[GameWorldHandler] Forcibly assigning fallback GameWorld.");
                Singleton<GameWorld>.Instance = world;
            }
        }

        private static GameWorld? TryRecoverFromScene()
        {
            if (IsWorldFullyReady()) return null;

            var found = UnityEngine.Object.FindObjectsOfType<GameWorld>();
            if (found.Length > 0)
            {
                Logger.LogWarning("[GameWorldHandler] Found fallback GameWorld: " + found[0].name);
                return found[0];
            }

            Logger.LogWarning("[GameWorldHandler] No GameWorld found in scene.");
            return null;
        }

        public static string GetCurrentMapName()
        {
            try
            {
                if (Singleton<ClientGameWorld>.Instantiated && !string.IsNullOrEmpty(Singleton<ClientGameWorld>.Instance.LocationId))
                    return Singleton<ClientGameWorld>.Instance.LocationId.ToLowerInvariant();

                if (Singleton<GameWorld>.Instantiated && !string.IsNullOrEmpty(Singleton<GameWorld>.Instance.LocationId))
                    return Singleton<GameWorld>.Instance.LocationId.ToLowerInvariant();

                if (FikaHeadlessDetector.IsHeadless && FikaHeadlessDetector.RaidLocationName != null)
                    return FikaHeadlessDetector.RaidLocationName.ToLowerInvariant();

                return "unknown";
            }
            catch (Exception ex)
            {
                Logger.LogError($"[GameWorldHandler] GetCurrentMapName error: {ex.Message}");
                return "unknown";
            }
        }

        public static bool TryForceResolveMapName()
        {
            var name = GetCurrentMapName();
            return !string.IsNullOrEmpty(name) && name != "unknown";
        }

        public static bool IsReady()
        {
            lock (GameWorldLock)
            {
                var world = Get();
                if (world == null)
                {
                    Logger.LogWarning("[GameWorldHandler] World not ready—null instance.");
                    return false;
                }
                if (string.IsNullOrEmpty(world.LocationId) || world.LocationId.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                {
                    Logger.LogWarning("[GameWorldHandler] Invalid map ID.");
                    return false;
                }
                if (world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                {
                    Logger.LogWarning("[GameWorldHandler] No registered players.");
                    return false;
                }
                if (!TryGetIZones(out _))
                {
                    Logger.LogWarning("[GameWorldHandler] Zones not initialized.");
                    return false;
                }
                return true;
            }
        }

        private static bool IsWorldFullyReady()
        {
            var world = Get();
            return world != null && !string.IsNullOrEmpty(world.LocationId) && world.AllAlivePlayersList?.Count > 0;
        }

        // --------------------------------------------------------------------
        // Initialization
        // --------------------------------------------------------------------
        public static void TryInitializeWorld()
        {
            if (IsInitialized) return;
            IsInitialized = true;

            if (!IsLocalHost())
            {
                Logger.LogWarning("[GameWorldHandler] Skip init—not authoritative host.");
                return;
            }

            lock (GameWorldLock)
            {
                if (_isRecovering)
                {
                    Logger.LogWarning("[GameWorldHandler] Recovery in progress—skipping init.");
                    return;
                }

                var world = Get();
                if (world == null && FikaHeadlessDetector.IsHeadless)
                {
                    if (!_hasLoggedHeadlessFallback)
                    {
                        Logger.LogWarning("[GameWorldHandler] Headless fallback applied.");
                        _hasLoggedHeadlessFallback = true;
                    }

                    if (Time.time - _lastInitCheck < InitializationRetryInterval) return;
                    _lastInitCheck = Time.time;

                    if (!IsWorldFullyReady())
                    {
                        Logger.LogWarning("[GameWorldHandler] Waiting for world readiness...");
                        return;
                    }

                    _isRecovering = true;
                    HookBotSpawns();
                    _isRecovering = false;
                    return;
                }

                if (world?.AllAlivePlayersList == null)
                {
                    if (!_hasWarnedNoWorld)
                    {
                        Logger.LogWarning("[GameWorldHandler] Deferring—no world yet.");
                        _hasWarnedNoWorld = true;
                    }
                    return;
                }

                if (_hasWarnedNoWorld || _hasLoggedHeadlessFallback)
                {
                    Logger.LogInfo("[GameWorldHandler] World recovered successfully.");
                    _hasWarnedNoWorld = _hasLoggedHeadlessFallback = false;
                }

                Logger.LogInfo("[GameWorldHandler] Initializing world systems...");
                HookBotSpawns();
            }
        }

        public static void HookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null) return;

                _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
                UnityEngine.Object.DontDestroyOnLoad(_bootstrapHost);

                _bootstrapHost.AddComponent<BotSystemRecoveryWatcher>();
                _bootstrapHost.AddComponent<BotSpawnListener>();
                if (FikaHeadlessDetector.IsHeadless)
                    _bootstrapHost.AddComponent<BotWorkGroupDispatcher>();

                Logger.LogInfo("[GameWorldHandler] Bootstrap host injected.");
            }
        }

        public static void UnhookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null)
                {
                    UnityEngine.Object.Destroy(_bootstrapHost);
                    _bootstrapHost = null;
                }

                HotspotRegistry.Clear();
                LootRegistry.Clear();
                NavPointRegistry.Clear();

                _hasWarnedNoWorld = _hasLoggedHeadlessFallback = false;
                Logger.LogInfo("[GameWorldHandler] Shutdown complete.");
            }
        }

        public static bool IsLocalHost()
        {
            if (FikaHeadlessDetector.IsHeadless) return true;
            var gw = Singleton<ClientGameWorld>.Instance;
            return gw != null && gw.MainPlayer != null && gw.MainPlayer.IsYourPlayer;
        }

        // --------------------------------------------------------------------
        // Bot Utilities
        // --------------------------------------------------------------------
        public static void TryAttachBotBrain(BotOwner? bot)
        {
            if (bot == null || bot.IsDead) return;
            var p = EFTPlayerUtil.ResolvePlayer(bot);
            if (p == null || !p.IsAI || p.gameObject == null) return;
            WorldBootstrapper.EnforceBotBrain(p, bot);
        }

        public static void EnforceBotBrains()
        {
            var world = Get();
            if (world?.AllAlivePlayersList == null) return;

            lock (GameWorldLock)
            {
                foreach (var p in world.AllAlivePlayersList)
                {
                    if (p != null && p.IsAI && p.gameObject != null)
                        WorldBootstrapper.EnforceBotBrain(p);
                }
            }
        }

        public static void CleanupDeadBotsSmoothly()
        {
            var now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval) return;
            _lastCleanupTime = now;

            var world = Get();
            if (world?.AllAlivePlayersList == null) return;

            foreach (var p in world.AllAlivePlayersList)
            {
                if (p != null && p.IsAI && p.HealthController?.IsAlive == false)
                {
                    var id = p.GetInstanceID();
                    if (KnownDeadBotIds.Add(id) && p.gameObject != null)
                    {
                        p.gameObject.SetActive(false);
                        UnityEngine.Object.Destroy(p.gameObject, 3f);
                        Logger.LogDebug($"[GameWorldHandler] Cleaned dead bot: {p.Profile?.Info?.Nickname ?? "Unnamed"}");
                    }
                }
            }
        }

        public static List<Player> GetAllAlivePlayers()
        {
            var list = new List<Player>();
            var world = Get();
            if (world?.AllAlivePlayersList != null)
            {
                foreach (var p in world.AllAlivePlayersList)
                    if (p?.HealthController?.IsAlive == true)
                        list.Add(p);
            }
            return list;
        }

        public static bool TryGetIZones(out IZones? zones)
        {
            zones = null;
            var world = Get();
            if (world == null) return false;
            foreach (var mb in UnityEngine.Object.FindObjectsOfType<MonoBehaviour>())
                if (mb is IZones z)
                {
                    zones = z;
                    return true;
                }
            return false;
        }

        public static void RefreshLootRegistry()
        {
            var now = Time.time;
            if (now - _lastLootRefresh < LootRefreshCooldown) return;
            _lastLootRefresh = now;

            Logger.LogDebug("[GameWorldHandler] Refreshing loot registry...");
            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();
        }
    }
}
