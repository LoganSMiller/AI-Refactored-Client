// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using UnityEngine;
    using EFT;
    using EFT.Game.Spawning;
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;

    public static partial class GameWorldHandler
    {
        #region Constants and Fields

        private const float DeadCleanupInterval = 10f;
        private const float LootRefreshCooldown = 4f;
        private const float InitializationRetryInterval = 3f;
        private const float LogCooldown = 5f;

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static readonly List<Player> TempPlayers = new List<Player>(64);
        private static GameObject? _bootstrapHost;
        private static bool _hasWarnedNoWorld;
        private static bool _hasLoggedHeadlessFallback;

        private static float _lastCleanupTime = -999f;
        private static float _lastLootRefresh = -999f;
        private static float _lastInitializationCheck = -999f;

        private static readonly object GameWorldLock = new object();
        private static bool _isWorldRecovering = false;

        public static bool IsInitialized { get; private set; }

        #endregion

        #region World Resolution

        private static GameWorld? CachedWorld
        {
            get
            {
                lock (GameWorldLock)
                {
                    if (_isWorldRecovering)
                    {
                        Logger.LogWarning("[GameWorldHandler] World is currently recovering. Skipping further requests.");
                        return null;
                    }

                    if (!FikaHeadlessDetector.IsHeadless && Singleton<ClientGameWorld>.Instantiated)
                    {
                        return Singleton<ClientGameWorld>.Instance;
                    }

                    if (FikaHeadlessDetector.IsHeadless && Singleton<GameWorld>.Instantiated)
                    {
                        return Singleton<GameWorld>.Instance;
                    }

                    if (FikaHeadlessDetector.IsHeadless)
                    {
                        GameWorld? fallback = TryRecoverGameWorldFromScene();
                        if (fallback != null)
                        {
                            ForceAssign(fallback);
                            return fallback;
                        }
                    }

                    return null;
                }
            }
        }

        public static GameWorld? Get()
        {
            return CachedWorld;
        }

        public static void ForceAssign(GameWorld world)
        {
            if (world != null && !Singleton<GameWorld>.Instantiated)
            {
                Logger.LogWarning("[GameWorldHandler] Forcibly assigned fallback GameWorld instance.");
                Singleton<GameWorld>.Instance = world;
            }
        }

        private static GameWorld? TryRecoverGameWorldFromScene()
        {
            if (IsWorldFullyReady())
            {
                Logger.LogInfo("[GameWorldHandler] GameWorld is already fully initialized.");
                return null;
            }

            GameWorld[] found = UnityEngine.Object.FindObjectsOfType<GameWorld>();
            if (found.Length > 0)
            {
                Logger.LogWarning("[GameWorldHandler] Found fallback GameWorld in scene: " + found[0].name);
                return found[0];
            }

            Logger.LogWarning("[GameWorldHandler] No GameWorld found in scene. Recovery failed.");
            return null;
        }

        public static string GetCurrentMapName()
        {
            try
            {
                if (Singleton<ClientGameWorld>.Instantiated)
                {
                    string? clientLocationId = Singleton<ClientGameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(clientLocationId))
                    {
                        return clientLocationId.ToLowerInvariant();
                    }
                }

                if (Singleton<GameWorld>.Instantiated)
                {
                    string? headlessLocationId = Singleton<GameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(headlessLocationId))
                    {
                        return headlessLocationId.ToLowerInvariant();
                    }
                }

                if (FikaHeadlessDetector.IsHeadless)
                {
                    string? raidLocation = FikaHeadlessDetector.RaidLocationName;
                    if (raidLocation != null)
                    {
                        return raidLocation.ToLowerInvariant();
                    }
                }

                return "unknown";
            }
            catch (Exception ex)
            {
                Logger.LogError($"[GameWorldHandler] Error getting current map name: {ex.Message}");
                return "unknown";
            }
        }

        public static bool TryForceResolveMapName()
        {
            string name = GetCurrentMapName();
            return !string.IsNullOrEmpty(name) && name != "unknown";
        }

        public static bool IsReady()
        {
            lock (GameWorldLock)
            {
                GameWorld? world = Get();
                if (world == null)
                {
                    Logger.LogWarning("[GameWorldHandler] World is not ready. Missing world instance.");
                    return false;
                }

                string mapId = world.LocationId;
                if (string.IsNullOrEmpty(mapId) || mapId.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                {
                    Logger.LogWarning("[GameWorldHandler] Map ID is invalid or unknown.");
                    return false;
                }

                if (world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                {
                    Logger.LogWarning("[GameWorldHandler] No players registered in the world.");
                    return false;
                }

                if (!AreZonesInitialized())
                {
                    Logger.LogWarning("[GameWorldHandler] Zones not initialized.");
                    return false;
                }

                return true;
            }
        }

        private static bool AreZonesInitialized()
        {
            IZones? zones;
            return TryGetIZones(out zones) && zones != null;
        }

        #endregion

        #region Initialization

        public static void TryInitializeWorld()
        {
            if (!IsLocalHost())
            {
                Logger.LogWarning("[GameWorldHandler] Initialization skipped — not authoritative host.");
                return;
            }

            lock (GameWorldLock)
            {
                if (_isWorldRecovering)
                {
                    Logger.LogWarning("[GameWorldHandler] World is in recovery mode, skipping initialization attempt.");
                    return;
                }

                GameWorld? world = Get();

                if (world == null && FikaHeadlessDetector.IsHeadless)
                {
                    if (!_hasLoggedHeadlessFallback)
                    {
                        Logger.LogWarning("[GameWorldHandler] GameWorld null — applying fallback for FIKA headless.");
                        _hasLoggedHeadlessFallback = true;
                    }

                    if (Time.time - _lastInitializationCheck < InitializationRetryInterval)
                    {
                        return;
                    }

                    _lastInitializationCheck = Time.time;

                    if (!IsWorldFullyReady())
                    {
                        Logger.LogWarning("[GameWorldHandler] World not ready. Waiting for proper initialization...");
                        return;
                    }

                    _isWorldRecovering = true;
                    HookBotSpawns();
                    IsInitialized = true;
                    _isWorldRecovering = false;
                    return;
                }

                if (world?.AllAlivePlayersList == null)
                {
                    if (!_hasWarnedNoWorld)
                    {
                        Logger.LogWarning("[GameWorldHandler] GameWorld not yet available — deferring...");
                        _hasWarnedNoWorld = true;
                    }

                    return;
                }

                if (_hasWarnedNoWorld || _hasLoggedHeadlessFallback)
                {
                    Logger.LogInfo("[GameWorldHandler] GameWorld successfully recovered.");
                    _hasWarnedNoWorld = false;
                    _hasLoggedHeadlessFallback = false;
                }

                if (!IsInitialized)
                {
                    Logger.LogInfo("[GameWorldHandler] Initializing AIRefactored world systems...");
                    HookBotSpawns();
                    IsInitialized = true;
                }
            }
        }

        private static bool IsWorldFullyReady()
        {
            GameWorld? world = Get();
            return world != null && !string.IsNullOrEmpty(world.LocationId) && world.AllAlivePlayersList?.Count > 0;
        }

        public static void HookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null)
                {
                    return;
                }

                _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
                UnityEngine.Object.DontDestroyOnLoad(_bootstrapHost);

                _bootstrapHost.AddComponent<WorldBootstrapper>();
                _bootstrapHost.AddComponent<BotSystemRecoveryWatcher>();
                _bootstrapHost.AddComponent<BotSpawnListener>();

                if (FikaHeadlessDetector.IsHeadless)
                {
                    _bootstrapHost.AddComponent<BotWorkGroupDispatcher>();
                }

                Logger.LogInfo("[GameWorldHandler] Bootstrap host injected.");
            }
        }

        public static void UnhookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null)
                {
                    UnityEngine.Object.Destroy(_bootstrapHost);
                    _bootstrapHost = null;
                }

                HotspotRegistry.Clear();
                LootRegistry.Clear();
                NavPointRegistry.Clear();

                IsInitialized = false;
                _hasWarnedNoWorld = false;
                _hasLoggedHeadlessFallback = false;

                Logger.LogInfo("[GameWorldHandler] Shutdown complete.");
            }
        }

        public static bool IsLocalHost()
        {
            if (FikaHeadlessDetector.IsHeadless)
            {
                return true;
            }

            ClientGameWorld? gw = Singleton<ClientGameWorld>.Instance;
            return gw != null && gw.MainPlayer != null && gw.MainPlayer.IsYourPlayer;
        }

        #endregion

        #region Bot Utilities

        public static void TryAttachBotBrain(BotOwner? bot)
        {
            if (bot == null || bot.IsDead)
            {
                return;
            }

            Player? player = EFTPlayerUtil.ResolvePlayer(bot);
            if (player == null || !player.IsAI || player.gameObject == null)
            {
                return;
            }

            WorldBootstrapper.EnforceBotBrain(player, bot);
        }

        public static void EnforceBotBrains()
        {
            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                return;
            }

            lock (GameWorldLock)
            {
                foreach (Player? player in world.AllAlivePlayersList)
                {
                    if (player != null && player.IsAI && player.gameObject != null)
                    {
                        WorldBootstrapper.EnforceBotBrain(player);
                    }
                }
            }
        }

        public static void CleanupDeadBotsSmoothly()
        {
            float now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval)
            {
                return;
            }

            _lastCleanupTime = now;

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                return;
            }

            foreach (Player? player in world.AllAlivePlayersList)
            {
                if (player == null || !player.IsAI || player.HealthController?.IsAlive == true)
                {
                    continue;
                }

                int id = player.GetInstanceID();
                if (!KnownDeadBotIds.Add(id))
                {
                    continue;
                }

                if (player.gameObject != null)
                {
                    player.gameObject.SetActive(false);
                    UnityEngine.Object.Destroy(player.gameObject, 3f);
                }

                Logger.LogDebug(
                    "[GameWorldHandler] Destroyed dead bot: " + (player.Profile?.Info?.Nickname ?? "Unnamed"));
            }
        }

        public static List<Player> GetAllAlivePlayers()
        {
            List<Player> alivePlayers = new List<Player>();

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList != null)
            {
                foreach (Player player in world.AllAlivePlayersList)
                {
                    if (player != null && player.HealthController?.IsAlive == true)
                    {
                        alivePlayers.Add(player);
                    }
                }
            }

            return alivePlayers;
        }

        public static bool TryGetIZones(out IZones? zones)
        {
            zones = null;
            GameWorld? world = Get();
            if (world == null)
            {
                return false;
            }

            MonoBehaviour[] objects = UnityEngine.Object.FindObjectsOfType<MonoBehaviour>();
            foreach (MonoBehaviour obj in objects)
            {
                if (obj is IZones zone)
                {
                    zones = zone;
                    return true;
                }
            }

            return false;
        }

        public static bool IsHeadless()
        {
            return FikaHeadlessDetector.IsHeadless;
        }

        public static void RefreshLootRegistry()
        {
            // Check the time cooldown before refreshing
            float now = Time.time;
            if (now - _lastLootRefresh < LootRefreshCooldown)
            {
                return; // Skip refresh if within cooldown period
            }

            _lastLootRefresh = now;

            Logger.LogDebug("[GameWorldHandler] Refreshing loot registry...");

            // Clear the old loot registry and refresh with new loot data
            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();

            // Scan for new loot bodies and items
            BotDeadBodyScanner.ScanAll();
        }

        #endregion
    }
}
