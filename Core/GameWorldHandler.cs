// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides unified access to the EFT GameWorld.
    /// Includes bot lifecycle, player tracking, loot registration, and global AI initialization.
    /// </summary>
    public static partial class GameWorldHandler
    {
        #region Constants

        private const float DeadCleanupInterval = 10f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = AIRefactoredController.Logger;
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static GameObject? _bootstrapHost;
        private static bool _hasWarnedNoWorld;
        private static float _lastCleanupTime = -999f;

        #endregion

        #region Properties

        /// <summary>
        /// Gets a value indicating whether the GameWorld is initialized.
        /// </summary>
        public static bool IsInitialized { get; private set; }

        #endregion

        #region GameWorld Access

        private static GameWorld? CachedWorld
        {
            get
            {
                if (Singleton<ClientGameWorld>.Instantiated)
                {
                    return Singleton<ClientGameWorld>.Instance;
                }

                if (Singleton<GameWorld>.Instantiated)
                {
                    return Singleton<GameWorld>.Instance;
                }

                return null;
            }
        }

        /// <summary>
        /// Gets the current GameWorld instance, or null if unavailable.
        /// </summary>
        public static GameWorld? Get()
        {
            return CachedWorld;
        }

        #endregion

        #region Initialization

        public static void TryInitializeWorld()
        {
            if (!IsLocalHost())
            {
                Logger.LogWarning("[GameWorldHandler] ⚠ Skipped initialization: not authoritative host.");
                return;
            }

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                if (!_hasWarnedNoWorld)
                {
                    Logger.LogWarning("[GameWorldHandler] ⚠ GameWorld not ready — waiting...");
                    _hasWarnedNoWorld = true;
                }

                return;
            }

            _hasWarnedNoWorld = false;

            if (!IsInitialized)
            {
                Logger.LogInfo("[GameWorldHandler] 🔧 Initializing world-level AIRefactored systems...");
                HookBotSpawns();
                IsInitialized = true;
            }
        }

        public static void HookBotSpawns()
        {
            if (_bootstrapHost != null)
            {
                return;
            }

            _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
            Object.DontDestroyOnLoad(_bootstrapHost);

            _bootstrapHost.AddComponent<WorldBootstrapper>();
            _bootstrapHost.AddComponent<BotSystemRecoveryWatcher>();
            _bootstrapHost.AddComponent<BotSpawnListener>();

            if (FikaHeadlessDetector.IsHeadless)
            {
                _bootstrapHost.AddComponent<BotWorkGroupDispatcher>();
            }

            Logger.LogInfo("[GameWorldHandler] ✅ Bootstrap host injected.");
        }

        public static void UnhookBotSpawns()
        {
            if (_bootstrapHost != null)
            {
                Object.Destroy(_bootstrapHost);
                _bootstrapHost = null;
            }

            HotspotRegistry.Clear();
            LootRegistry.Clear();
            NavPointRegistry.Clear();

            IsInitialized = false;
            _hasWarnedNoWorld = false;

            Logger.LogInfo("[GameWorldHandler] 🔻 Shutdown complete.");
        }

        public static bool IsLocalHost()
        {
            if (FikaHeadlessDetector.IsHeadless)
                return true;

            var gw = Singleton<ClientGameWorld>.Instance;
            return gw?.MainPlayer != null && gw.MainPlayer.IsYourPlayer;
        }

        #endregion

        #region Bot Lifecycle

        public static void TryAttachBotBrain(BotOwner? bot)
        {
            if (bot == null || bot.IsDead)
            {
                return;
            }

            Player? player = EFTPlayerUtil.ResolvePlayer(bot);
            if (player?.IsAI != true || player.gameObject == null)
            {
                return;
            }

            WorldBootstrapper.EnforceBotBrain(player, bot);
        }

        public static void EnforceBotBrains()
        {
            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                return;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? player = world.AllAlivePlayersList[i];
                if (player?.IsAI == true && player.gameObject != null)
                {
                    WorldBootstrapper.EnforceBotBrain(player);
                }
            }
        }

        public static void CleanupDeadBotsSmoothly()
        {
            float now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval)
            {
                return;
            }

            _lastCleanupTime = now;

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                return;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? player = world.AllAlivePlayersList[i];
                if (player?.IsAI != true || player.HealthController?.IsAlive == true)
                {
                    continue;
                }

                int id = player.GetInstanceID();
                if (!KnownDeadBotIds.Add(id))
                {
                    continue;
                }

                if (player.gameObject != null)
                {
                    player.gameObject.SetActive(false);
                    Object.Destroy(player.gameObject, 3f);
                }

                Logger.LogDebug("[GameWorldHandler] 🧹 Destroyed dead bot: " + (player.Profile?.Info?.Nickname ?? "Unnamed"));
            }
        }

        #endregion

        #region Player Queries

        public static List<Player> GetAllAlivePlayers()
        {
            GameWorld? world = Get();
            List<Player> result = new List<Player>();

            if (world?.AllAlivePlayersList == null)
            {
                return result;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? player = world.AllAlivePlayersList[i];
                if (player?.HealthController?.IsAlive == true)
                {
                    result.Add(player);
                }
            }

            return result;
        }

        public static List<Player> GetAllHumanPlayers()
        {
            GameWorld? world = Get();
            List<Player> result = new List<Player>();

            if (world?.AllAlivePlayersList == null)
            {
                return result;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? player = world.AllAlivePlayersList[i];
                if (player != null && player.AIData == null && player.HealthController?.IsAlive == true)
                {
                    result.Add(player);
                }
            }

            return result;
        }

        public static bool IsNearRealPlayer(Vector3 position, float radius)
        {
            List<Player> humans = GetAllHumanPlayers();
            for (int i = 0; i < humans.Count; i++)
            {
                float dist = Vector3.Distance(EFTPlayerUtil.GetPosition(humans[i]), position);
                if (dist <= radius)
                {
                    return true;
                }
            }

            return false;
        }

        public static bool IsNearTeammate(Vector3 position, float radius, string? groupId)
        {
            if (string.IsNullOrEmpty(groupId))
            {
                return false;
            }

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
            {
                return false;
            }

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                Player? p = world.AllAlivePlayersList[i];
                if (p?.IsAI == true && p.HealthController?.IsAlive == true &&
                    p.Profile?.Info?.GroupId == groupId)
                {
                    if (Vector3.Distance(EFTPlayerUtil.GetPosition(p), position) <= radius)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        public static float GetNearestHumanPlayerDistance(Vector3 position)
        {
            List<Player> humans = GetAllHumanPlayers();
            float closest = float.MaxValue;

            for (int i = 0; i < humans.Count; i++)
            {
                float dist = Vector3.Distance(EFTPlayerUtil.GetPosition(humans[i]), position);
                if (dist < closest)
                {
                    closest = dist;
                }
            }

            return closest;
        }

        #endregion

        #region Map / Loot / Zones

        public static string GetCurrentMapName()
        {
            LocationSettingsClass? settings = Singleton<LocationSettingsClass>.Instance;
            if (settings?.locations == null)
            {
                return "unknown";
            }

            foreach (KeyValuePair<string, LocationSettingsClass.Location> kvp in settings.locations)
            {
                if (kvp.Value.Enabled)
                {
                    return kvp.Key.ToLowerInvariant();
                }
            }

            return "unknown";
        }

        public static void RefreshLootRegistry()
        {
            Logger.LogInfo("[GameWorldHandler] 🔁 Refreshing loot registry...");
            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();
        }

        public static bool TryGetIZones(out IZones? zones)
        {
            zones = null;
            GameWorld? world = Get();
            if (world == null)
            {
                return false;
            }

            MonoBehaviour[] objects = Object.FindObjectsOfType<MonoBehaviour>();
            for (int i = 0; i < objects.Length; i++)
            {
                if (objects[i] is IZones z)
                {
                    zones = z;
                    return true;
                }
            }

            return false;
        }

        #endregion
    }
}
