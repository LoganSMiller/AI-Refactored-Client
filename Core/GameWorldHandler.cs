// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using EFT.Game.Spawning;
    using UnityEngine;

    public static partial class GameWorldHandler
    {
        private const float DeadCleanupInterval = 10f;
        private const float LootRefreshCooldown = 4f;

        private static GameObject _bootstrapHost;
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static readonly object GameWorldLock = new object();

        private static float _lastCleanupTime = -999f;
        private static float _lastLootRefresh = -999f;
        private static bool _isRecovering;

        private static ManualLogSource Logger => Plugin.LoggerInstance;

        public static bool IsInitialized { get; private set; }

        public static bool IsSafeToInitialize
        {
            get
            {
                GameWorld world = TryGetGameWorld();
                return world != null && world.RegisteredPlayers != null && world.RegisteredPlayers.Count > 0;
            }
        }

        public static bool IsHost
        {
            get
            {
                GameWorld world = TryGetGameWorld();
                return world != null && world.AllAlivePlayersList != null;
            }
        }

        public static bool IsLocalHost()
        {
            if (FikaHeadlessDetector.IsHeadless)
            {
                return true;
            }

            GameWorld world = TryGetGameWorld();
            return world is ClientGameWorld client && client.MainPlayer != null && client.MainPlayer.IsYourPlayer;
        }

        public static GameWorld Get()
        {
            return CachedWorld;
        }

        public static GameWorld TryGetGameWorld()
        {
            GameWorld world = CachedWorld;
            return world != null && world.RegisteredPlayers != null ? world : null;
        }

        private static GameWorld CachedWorld
        {
            get
            {
                lock (GameWorldLock)
                {
                    if (_isRecovering)
                    {
                        return null;
                    }

                    if (!FikaHeadlessDetector.IsHeadless && Singleton<ClientGameWorld>.Instantiated)
                    {
                        return Singleton<ClientGameWorld>.Instance;
                    }

                    if (FikaHeadlessDetector.IsHeadless && Singleton<GameWorld>.Instantiated)
                    {
                        return Singleton<GameWorld>.Instance;
                    }

                    if (FikaHeadlessDetector.IsHeadless)
                    {
                        GameWorld fallback = TryRecoverFromScene();
                        if (fallback != null)
                        {
                            ForceAssign(fallback);
                            return fallback;
                        }
                    }

                    return null;
                }
            }
        }

        public static void ForceAssign(GameWorld world)
        {
            if (world != null && !Singleton<GameWorld>.Instantiated)
            {
                LogSafe("[GameWorldHandler] Forcibly assigning fallback GameWorld.");
                Singleton<GameWorld>.Instance = world;
            }
        }

        private static GameWorld TryRecoverFromScene()
        {
            GameWorld[] found = UnityEngine.Object.FindObjectsOfType<GameWorld>();
            return found.Length > 0 ? found[0] : null;
        }

        public static string TryGetValidMapName()
        {
            try
            {
                if (Singleton<ClientGameWorld>.Instantiated)
                {
                    string id = Singleton<ClientGameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                    {
                        return id.ToLowerInvariant();
                    }
                }

                if (Singleton<GameWorld>.Instantiated)
                {
                    string id = Singleton<GameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                    {
                        return id.ToLowerInvariant();
                    }
                }

                if (FikaHeadlessDetector.IsHeadless)
                {
                    string id = FikaHeadlessDetector.RaidLocationName;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                    {
                        return id.ToLowerInvariant();
                    }
                }
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] TryGetValidMapName error: " + ex.Message);
            }

            return string.Empty;
        }

        public static bool TryForceResolveMapName()
        {
            return TryGetValidMapName().Length > 0;
        }

        public static bool IsReady()
        {
            GameWorld world = TryGetGameWorld();

            if (FikaHeadlessDetector.IsHeadless)
            {
                return world != null &&
                       !string.IsNullOrEmpty(world.LocationId) &&
                       !world.LocationId.Equals("unknown", StringComparison.OrdinalIgnoreCase);
            }

            return world != null &&
                   world.RegisteredPlayers != null &&
                   world.RegisteredPlayers.Count > 0 &&
                   !string.IsNullOrEmpty(world.LocationId) &&
                   !world.LocationId.Equals("unknown", StringComparison.OrdinalIgnoreCase);
        }

        public static void HookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null)
                {
                    LogSafe("[GameWorldHandler] Bootstrap host already active — skipping spawn hook.");
                    return;
                }

                try
                {
                    _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
                    UnityEngine.Object.DontDestroyOnLoad(_bootstrapHost);

                    BotRecoveryService.Reset();
                    BotSpawnWatcherService.Reset();
                    LootRuntimeWatcher.Reset();
                    DeadBodyObserverService.Reset();

                    WorldBootstrapper.RegisterSystem(new BotRecoveryService());
                    WorldBootstrapper.RegisterSystem(new BotSpawnWatcherService());
                    WorldBootstrapper.RegisterSystem(new LootRuntimeWatcher());
                    WorldBootstrapper.RegisterSystem(new DeadBodyObserverService());
                    WorldBootstrapper.RegisterSystem(new HotspotRegistryBootstrapper());

                    LogSafe("[GameWorldHandler] Spawn systems attached and registered.");
                }
                catch (Exception ex)
                {
                    LogSafe("[GameWorldHandler] ❌ Failed to attach spawn systems: " + ex);
                }
            }
        }

        public static void UnhookBotSpawns()
        {
            lock (GameWorldLock)
            {
                try
                {
                    if (_bootstrapHost != null)
                    {
                        UnityEngine.Object.Destroy(_bootstrapHost);
                        _bootstrapHost = null;
                    }

                    KnownDeadBotIds.Clear();
                    HotspotRegistry.Clear();
                    LootRegistry.Clear();
                    NavPointRegistry.Clear();

                    BotRecoveryService.Reset();
                    BotSpawnWatcherService.Reset();
                    LootRuntimeWatcher.Reset();
                    DeadBodyObserverService.Reset();

                    _isRecovering = false;
                    IsInitialized = false;

                    LogSafe("[GameWorldHandler] 🔻 All runtime systems cleaned up.");
                }
                catch (Exception ex)
                {
                    LogSafe("[GameWorldHandler] Unhook error: " + ex);
                }
            }
        }


        public static void TryAttachBotBrain(BotOwner bot)
        {
            if (bot == null || bot.IsDead)
            {
                return;
            }

            Player player = EFTPlayerUtil.ResolvePlayer(bot);
            if (player != null && player.IsAI && player.gameObject != null)
            {
                WorldBootstrapper.EnforceBotBrain(player, bot);
            }
        }

        public static void EnforceBotBrains()
        {
            GameWorld world = TryGetGameWorld();
            if (world == null || world.AllAlivePlayersList == null)
            {
                return;
            }

            lock (GameWorldLock)
            {
                foreach (Player player in world.AllAlivePlayersList)
                {
                    if (EFTPlayerUtil.IsValid(player) && player.HealthController.IsAlive)
                    {
                        BotOwner owner = player.GetComponent<BotOwner>();
                        if (owner != null)
                        {
                            WorldBootstrapper.EnforceBotBrain(player, owner);
                        }
                    }
                }
            }
        }

        public static void CleanupDeadBotsSmoothly()
        {
            float now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval)
            {
                return;
            }

            _lastCleanupTime = now;

            GameWorld world = TryGetGameWorld();
            if (world == null || world.AllAlivePlayersList == null)
            {
                return;
            }

            foreach (Player player in world.AllAlivePlayersList)
            {
                if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.HealthController.IsAlive)
                {
                    continue;
                }

                int id = player.GetInstanceID();
                if (KnownDeadBotIds.Add(id) && player.gameObject != null)
                {
                    player.gameObject.SetActive(false);
                    UnityEngine.Object.Destroy(player.gameObject, 3f);

                    string nickname = player.Profile?.Info?.Nickname ?? "Unnamed";
                    LogSafe("[GameWorldHandler] Cleaned up dead bot: " + nickname);
                }
            }
        }

        public static List<Player> GetAllAlivePlayers()
        {
            List<Player> list = TempListPool.Rent<Player>();
            GameWorld world = TryGetGameWorld();

            if (world != null && world.AllAlivePlayersList != null)
            {
                for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
                {
                    Player p = world.AllAlivePlayersList[i];
                    if (EFTPlayerUtil.IsValid(p) && p.HealthController.IsAlive)
                    {
                        list.Add(p);
                    }
                }
            }

            return list;
        }

        public static void RefreshLootRegistry()
        {
            float now = Time.time;
            if (now - _lastLootRefresh < LootRefreshCooldown)
            {
                return;
            }

            _lastLootRefresh = now;
            LogSafe("[GameWorldHandler] Refreshing loot registry...");
            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();
        }

        public static void Initialize(GameWorld world)
        {
            if (IsInitialized)
            {
                LogSafe("[GameWorldHandler] Already initialized — skipping.");
                return;
            }

            if (world == null)
            {
                LogSafe("[GameWorldHandler] Null GameWorld received during initialization.");
                return;
            }

            try
            {
                ForceAssign(world);

                LootRegistry.Initialize();
                NavPointRegistry.Initialize();
                HotspotRegistry.Clear();

                string mapId = TryGetValidMapName();
                if (mapId.Length > 0)
                {
                    NavPointBootstrapper.RegisterAll(mapId);
                    HotspotRegistry.Initialize(mapId);
                }
                else
                {
                    LogSafe("[GameWorldHandler] Invalid mapId during initialization.");
                }

                HookBotSpawns();
                IsInitialized = true;

                LogSafe("[GameWorldHandler] ✅ AIRefactored world systems initialized.");
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] Error during world initialization: " + ex);
            }
        }

        public static void Initialize()
        {
            GameWorld world = TryGetGameWorld();
            if (world != null)
            {
                Initialize(world);
            }
            else
            {
                LogSafe("[GameWorldHandler] Initialize() failed — GameWorld was null.");
            }
        }

        public static void Cleanup()
        {
            try
            {
                UnhookBotSpawns();
                LogSafe("[GameWorldHandler] 🧼 World systems cleaned up.");
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] Cleanup error: " + ex);
            }
        }

        private static void LogSafe(string message)
        {
            try
            {
                Logger.LogDebug(message);
            }
            catch
            {
                // Silent fallback
            }
        }
    }
}
