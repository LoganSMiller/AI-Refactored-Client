// <auto-generated>
//   AI-Refactored: GameWorldHandler.cs (Ultra-Platinum++ – Ultimate Parity & Robustness, June 2025)
//   SYSTEMATICALLY MANAGED. All boot, attach, registry, and recovery logic is atomic, pooled, and error-localized.
//   No runtime host/headless split—only at init. Zero-cascade error isolation, zero state drift, full teardown safety.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Centralized, bulletproof handler for GameWorld state and AIRefactored system bootstrapping.
    /// All attach/retry logic is atomic, all registry/cleanup is pooled, and all errors are fully locally contained.
    /// No cascade, no global disables, and no state drift possible.
    /// </summary>
    public static partial class GameWorldHandler
    {
        #region Constants

        private const float DeadCleanupInterval = 10f;
        private const float LootRefreshCooldown = 4f;

        #endregion

        #region Fields

        private static readonly object GameWorldLock = new object();
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static GameObject _bootstrapHost;
        private static float _lastCleanupTime = -999f;
        private static float _lastLootRefresh = -999f;
        private static bool _isRecovering;
        private static bool _hasShutdown;
        private static GameWorld _manualAssignedWorld;

        #endregion

        #region Properties

        /// <summary>
        /// True if world systems are currently initialized.
        /// </summary>
        public static bool IsInitialized { get; private set; }

        /// <summary>
        /// True if the GameWorld is available, players are registered, and at least one unique valid player exists.
        /// </summary>
        public static bool IsSafeToInitialize
        {
            get
            {
                GameWorld world = TryGetGameWorld();
                return world != null && world.RegisteredPlayers?.Count > 0 && HasUniqueValidPlayers(world);
            }
        }

        /// <summary>
        /// True if this process is considered the authoritative host (has AllAlivePlayersList).
        /// </summary>
        public static bool IsHost => TryGetGameWorld()?.AllAlivePlayersList != null;

        /// <summary>
        /// True if this process is a local SPT/FIKA host (not remote/vanilla).
        /// </summary>
        public static bool IsLocalHost() =>
            FikaHeadlessDetector.IsHeadless ||
            (Singleton<ClientGameWorld>.Instantiated && Singleton<ClientGameWorld>.Instance.MainPlayer?.IsYourPlayer == true);

        /// <summary>
        /// Returns the most recently resolved and valid GameWorld instance.
        /// </summary>
        public static GameWorld Get() => CachedWorld;

        /// <summary>
        /// Tries to resolve the current GameWorld (safe and null-guarded).
        /// </summary>
        public static GameWorld TryGetGameWorld()
        {
            GameWorld world = CachedWorld;
            return world != null && world.RegisteredPlayers != null ? world : null;
        }

        /// <summary>
        /// Returns the currently resolved (and possibly recovered) GameWorld.
        /// </summary>
        private static GameWorld CachedWorld
        {
            get
            {
                lock (GameWorldLock)
                {
                    if (_isRecovering)
                        return null;

                    if (_manualAssignedWorld != null)
                        return _manualAssignedWorld;

                    if (!FikaHeadlessDetector.IsHeadless && Singleton<ClientGameWorld>.Instantiated)
                        return Singleton<ClientGameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless && Singleton<GameWorld>.Instantiated)
                        return Singleton<GameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless)
                    {
                        GameWorld fallback = TryRecoverFromScene();
                        if (fallback != null)
                        {
                            ForceAssign(fallback);
                            return fallback;
                        }
                    }

                    return null;
                }
            }
        }

        #endregion

        #region Initialization & Teardown

        /// <summary>
        /// Initializes world state and all world-level systems for a specified GameWorld.
        /// </summary>
        public static void Initialize(GameWorld world)
        {
            if (IsInitialized || _hasShutdown)
                return;

            if (!IsValidWorld(world))
                return;

            try
            {
                ForceAssign(world);
                string mapId = TryGetValidMapName();

                if (_bootstrapHost == null)
                {
                    _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
                    UnityEngine.Object.DontDestroyOnLoad(_bootstrapHost);
                }

                WorldBootstrapper.Begin(Logger, mapId);
                IsInitialized = true;
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] Initialization error: " + ex);
            }
        }

        /// <summary>
        /// Safe re-init based on currently available world.
        /// </summary>
        public static void Initialize()
        {
            GameWorld world = TryGetGameWorld();
            if (IsValidWorld(world))
                Initialize(world);
        }

        /// <summary>
        /// Fully cleans up, resets, and unhooks all world-level logic and static state.
        /// </summary>
        public static void Cleanup()
        {
            if (_hasShutdown)
                return;

            try
            {
                UnhookBotSpawns();
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] Cleanup error: " + ex);
            }
        }

        /// <summary>
        /// Clears all state, hooks, and registry—atomic and never disables global mod state.
        /// </summary>
        public static void UnhookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_hasShutdown)
                    return;

                _hasShutdown = true;

                try
                {
                    if (_bootstrapHost != null)
                    {
                        UnityEngine.Object.Destroy(_bootstrapHost);
                        _bootstrapHost = null;
                    }

                    KnownDeadBotIds.Clear();
                    DeadBodyContainerCache.Clear();
                    HotspotRegistry.Clear();
                    LootRegistry.Clear();

                    _isRecovering = false;
                    IsInitialized = false;
                    _manualAssignedWorld = null;
                }
                catch (Exception ex)
                {
                    LogSafe("[GameWorldHandler] Unhook error: " + ex);
                }
            }
        }

        #endregion

        #region Bot Attach/Reliability

        /// <summary>
        /// True if bot is safe and valid for brain injection.
        /// </summary>
        private static bool IsBotReadyForInjection(BotOwner bot)
        {
            return bot != null &&
                   bot.Profile != null &&
                   bot.Profile.Info != null &&
                   !string.IsNullOrEmpty(bot.Profile.Id) &&
                   !bot.IsDead;
        }

        /// <summary>
        /// Enforces BotBrain attach for this bot/player.
        /// </summary>
        public static void TryAttachBotBrain(BotOwner bot)
        {
            try
            {
                if (!IsBotReadyForInjection(bot))
                    return;

                Player player = EFTPlayerUtil.ResolvePlayer(bot);
                if (player != null && player.IsAI && player.gameObject != null)
                {
                    WorldBootstrapper.EnforceBotBrain(player, bot);
                }
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] TryAttachBotBrain() failed: " + ex);
            }
        }

        /// <summary>
        /// Ensures all bots in the world have a valid BotBrain attached.
        /// </summary>
        public static void EnforceBotBrains()
        {
            GameWorld world = TryGetGameWorld();
            if (world?.AllAlivePlayersList == null)
                return;

            lock (GameWorldLock)
            {
                for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
                {
                    try
                    {
                        Player player = world.AllAlivePlayersList[i];
                        if (EFTPlayerUtil.IsValid(player) && player.HealthController.IsAlive)
                        {
                            BotOwner owner = player.GetComponent<BotOwner>();
                            if (!IsBotReadyForInjection(owner))
                                continue;

                            WorldBootstrapper.EnforceBotBrain(player, owner);
                        }
                    }
                    catch (Exception ex)
                    {
                        LogSafe("[GameWorldHandler] EnforceBotBrains() failed for player: " + ex);
                    }
                }
            }
        }

        #endregion

        #region Cleanup & Dead Bot Handling

        /// <summary>
        /// Disables and destroys dead bot gameobjects on a smooth timer to reduce world bloat.
        /// </summary>
        public static void CleanupDeadBotsSmoothly()
        {
            float now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval)
                return;

            _lastCleanupTime = now;

            GameWorld world = TryGetGameWorld();
            if (world?.AllAlivePlayersList == null)
                return;

            for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
            {
                try
                {
                    Player player = world.AllAlivePlayersList[i];
                    if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.HealthController.IsAlive)
                        continue;

                    int id = player.GetInstanceID();
                    if (KnownDeadBotIds.Add(id) && player.gameObject != null)
                    {
                        player.gameObject.SetActive(false);
                        UnityEngine.Object.Destroy(player.gameObject, 3f);
                    }
                }
                catch (Exception ex)
                {
                    LogSafe("[GameWorldHandler] CleanupDeadBotsSmoothly() failed: " + ex);
                }
            }
        }

        #endregion

        #region Player & Registry Helpers

        /// <summary>
        /// Returns a pooled list of all alive players. Must be TempListPool.Return() after use.
        /// </summary>
        public static List<Player> GetAllAlivePlayers()
        {
            List<Player> list = TempListPool.Rent<Player>();
            try
            {
                GameWorld world = TryGetGameWorld();
                if (world?.AllAlivePlayersList != null)
                {
                    for (int i = 0; i < world.AllAlivePlayersList.Count; i++)
                    {
                        Player p = world.AllAlivePlayersList[i];
                        if (EFTPlayerUtil.IsValid(p) && p.HealthController.IsAlive)
                        {
                            list.Add(p);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] GetAllAlivePlayers() failed: " + ex);
            }
            return list;
        }

        /// <summary>
        /// Clears and refreshes loot registry from all found containers and loose loot.
        /// </summary>
        public static void RefreshLootRegistry()
        {
            float now = Time.time;
            if (now - _lastLootRefresh < LootRefreshCooldown)
                return;

            _lastLootRefresh = now;
            try
            {
                LootRegistry.Clear();
                LootBootstrapper.RegisterAllLoot();
                BotDeadBodyScanner.ScanAll();
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] RefreshLootRegistry() failed: " + ex);
            }
        }

        #endregion

        #region Map Name / World Validation

        /// <summary>
        /// Tries to get a valid/known map name from all possible sources.
        /// </summary>
        public static string TryGetValidMapName()
        {
            try
            {
                if (Singleton<ClientGameWorld>.Instantiated)
                {
                    string id = Singleton<ClientGameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                        return id.ToLowerInvariant();
                }

                if (Singleton<GameWorld>.Instantiated)
                {
                    string id = Singleton<GameWorld>.Instance.LocationId;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                        return id.ToLowerInvariant();
                }

                if (FikaHeadlessDetector.IsHeadless)
                {
                    string id = FikaHeadlessDetector.RaidLocationName;
                    if (!string.IsNullOrEmpty(id) && !id.Equals("unknown", StringComparison.OrdinalIgnoreCase))
                        return id.ToLowerInvariant();
                }
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] TryGetValidMapName error: " + ex.Message);
            }

            return string.Empty;
        }

        /// <summary>
        /// Returns true if a valid map name is available.
        /// </summary>
        public static bool TryForceResolveMapName() => TryGetValidMapName().Length > 0;

        /// <summary>
        /// Returns true if the GameWorld is valid, players are registered, and all player IDs are unique.
        /// </summary>
        public static bool HasValidWorld()
        {
            try
            {
                return IsValidWorld(TryGetGameWorld());
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// True if the world is ready for AIRefactored logic (host- and player-safe).
        /// </summary>
        public static bool IsReady()
        {
            try
            {
                GameWorld world = TryGetGameWorld();

                if (FikaHeadlessDetector.IsHeadless)
                {
                    return world != null &&
                           !string.IsNullOrEmpty(world.LocationId) &&
                           !world.LocationId.Equals("unknown", StringComparison.OrdinalIgnoreCase);
                }

                return world != null &&
                       world.RegisteredPlayers?.Count > 0 &&
                       !string.IsNullOrEmpty(world.LocationId) &&
                       !world.LocationId.Equals("unknown", StringComparison.OrdinalIgnoreCase);
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Internal: Validates that the world has valid player list and no duplicate IDs.
        /// </summary>
        private static bool IsValidWorld(GameWorld world)
        {
            return world != null &&
                   world.RegisteredPlayers != null &&
                   world.RegisteredPlayers.Count > 0 &&
                   HasUniqueValidPlayers(world);
        }

        /// <summary>
        /// True if all player profile IDs are unique and valid.
        /// </summary>
        private static bool HasUniqueValidPlayers(GameWorld world)
        {
            var seen = new HashSet<string>();
            bool hasValid = false;
            for (int i = 0; i < world.RegisteredPlayers.Count; i++)
            {
                Player p = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                string id = p?.Profile?.Id;
                if (!EFTPlayerUtil.IsValid(p) || string.IsNullOrEmpty(id))
                    continue;
                if (!seen.Add(id))
                    return false;
                hasValid = true;
            }
            return hasValid;
        }

        /// <summary>
        /// Forces a GameWorld assignment to the static handler for override/repair/recover.
        /// </summary>
        public static void ForceAssign(GameWorld world)
        {
            try
            {
                if (world != null)
                {
                    if (!Singleton<GameWorld>.Instantiated)
                        Singleton<GameWorld>.Instance = world;

                    _manualAssignedWorld = world;
                }
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] ForceAssign error: " + ex);
            }
        }

        /// <summary>
        /// Attempts to recover GameWorld from scene if lost (headless-safe).
        /// </summary>
        private static GameWorld TryRecoverFromScene()
        {
            try
            {
                GameWorld[] found = UnityEngine.Object.FindObjectsOfType<GameWorld>();
                return found.Length > 0 ? found[0] : null;
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] TryRecoverFromScene() failed: " + ex);
                return null;
            }
        }

        #endregion

        #region Logging

        /// <summary>
        /// Logs a debug or error message without throwing.
        /// </summary>
        private static void LogSafe(string message)
        {
            try
            {
                Logger.LogDebug(message);
            }
            catch { }
        }

        #endregion
    }
}
