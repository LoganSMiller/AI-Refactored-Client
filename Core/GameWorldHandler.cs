// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored.Core
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;
    using EFT;
    using EFT.Game.Spawning;
    using BepInEx.Logging;
    using Comfort.Common;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Bootstrap;
    using AIRefactored.Runtime;

    public static partial class GameWorldHandler
    {
        private const float DeadCleanupInterval = 10f;
        private const float LootRefreshCooldown = 4f;
        private const float InitializationRetryInterval = 3f;

        private static GameObject? _bootstrapHost;
        private static readonly HashSet<int> KnownDeadBotIds = new HashSet<int>();
        private static readonly object GameWorldLock = new object();

        private static float _lastCleanupTime = -999f;
        private static float _lastLootRefresh = -999f;
        private static float _lastInitCheck = -999f;

        private static bool _hasWarnedNoWorld;
        private static bool _hasLoggedHeadlessFallback;
        private static bool _isRecovering;

        private static GameWorld? _lastWorldInstance;

        public static bool IsInitialized { get; private set; }

        private static ManualLogSource Logger => AIRefactoredController.Logger;

        /// <summary>
        /// Returns true if the world is fully ready for AIRefactored systems to initialize.
        /// </summary>
        public static bool IsSafeToInitialize =>
            Get() != null &&
            TryGetIZones(out _) &&
            Get()?.RegisteredPlayers != null &&
            Get()?.RegisteredPlayers.Count > 0 &&
            !string.IsNullOrEmpty(Get()?.LocationId);

        /// <summary>
        /// Returns true if this instance is the authoritative host.
        /// Prevents AI logic from running on non-host clients.
        /// </summary>
        public static bool IsHost
        {
            get
            {
                GameWorld? world = Get();
                if (world == null)
                    return false;

                return world.AllAlivePlayersList != null;
            }
        }

        public static GameWorld? Get()
        {
            return CachedWorld;
        }

        private static GameWorld? CachedWorld
        {
            get
            {
                lock (GameWorldLock)
                {
                    if (_isRecovering)
                        return null;

                    if (!FikaHeadlessDetector.IsHeadless && Singleton<ClientGameWorld>.Instantiated)
                        return Singleton<ClientGameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless && Singleton<GameWorld>.Instantiated)
                        return Singleton<GameWorld>.Instance;

                    if (FikaHeadlessDetector.IsHeadless)
                    {
                        GameWorld? fallback = TryRecoverFromScene();
                        if (fallback != null)
                        {
                            ForceAssign(fallback);
                            return fallback;
                        }
                    }

                    return null;
                }
            }
        }

        public static void ForceAssign(GameWorld world)
        {
            if (world != null && !Singleton<GameWorld>.Instantiated)
            {
                LogSafe("[GameWorldHandler] Forcibly assigning fallback GameWorld.");
                Singleton<GameWorld>.Instance = world;
            }
        }

        private static GameWorld? TryRecoverFromScene()
        {
            if (IsWorldFullyReady())
                return null;

            GameWorld[] found = UnityEngine.Object.FindObjectsOfType<GameWorld>();
            if (found.Length > 0)
            {
                LogSafe("[GameWorldHandler] Found fallback GameWorld in scene: " + found[0].name);
                return found[0];
            }

            return null;
        }

        public static string GetCurrentMapName()
        {
            try
            {
                if (Singleton<ClientGameWorld>.Instantiated &&
                    !string.IsNullOrEmpty(Singleton<ClientGameWorld>.Instance.LocationId))
                    return Singleton<ClientGameWorld>.Instance.LocationId.ToLowerInvariant();

                if (Singleton<GameWorld>.Instantiated &&
                    !string.IsNullOrEmpty(Singleton<GameWorld>.Instance.LocationId))
                    return Singleton<GameWorld>.Instance.LocationId.ToLowerInvariant();

                if (FikaHeadlessDetector.IsHeadless && FikaHeadlessDetector.RaidLocationName != null)
                    return FikaHeadlessDetector.RaidLocationName.ToLowerInvariant();

                return "unknown";
            }
            catch (Exception ex)
            {
                LogSafe("[GameWorldHandler] GetCurrentMapName error: " + ex.Message);
                return "unknown";
            }
        }

        public static bool TryForceResolveMapName()
        {
            string name = GetCurrentMapName();
            return !string.IsNullOrEmpty(name) && name != "unknown";
        }

        public static bool IsReady()
        {
            lock (GameWorldLock)
            {
                GameWorld? world = Get();

                return world != null &&
                       !string.IsNullOrEmpty(world.LocationId) &&
                       world.LocationId != "unknown" &&
                       world.RegisteredPlayers != null &&
                       world.RegisteredPlayers.Count > 0 &&
                       TryGetIZones(out _);
            }
        }

        private static bool IsWorldFullyReady()
        {
            GameWorld? world = Get();
            return world != null &&
                   !string.IsNullOrEmpty(world.LocationId) &&
                   world.AllAlivePlayersList != null &&
                   world.AllAlivePlayersList.Count > 0;
        }

        public static void TryInitializeWorld()
        {
            lock (GameWorldLock)
            {
                GameWorld? current = Get();

                bool isNewWorld = current != null && current != _lastWorldInstance;

                if (IsInitialized && !isNewWorld)
                    return;

                if (!IsLocalHost())
                {
                    LogSafe("[GameWorldHandler] Not authoritative host — skipping init.");
                    return;
                }

                if (current == null && FikaHeadlessDetector.IsHeadless)
                {
                    if (!_hasLoggedHeadlessFallback)
                    {
                        LogSafe("[GameWorldHandler] Headless fallback path triggered.");
                        _hasLoggedHeadlessFallback = true;
                    }

                    if (Time.time - _lastInitCheck < InitializationRetryInterval)
                        return;

                    _lastInitCheck = Time.time;

                    if (!IsWorldFullyReady())
                    {
                        LogSafe("[GameWorldHandler] World not yet ready — retrying later.");
                        return;
                    }

                    _isRecovering = true;
                    HookBotSpawns();
                    _isRecovering = false;

                    _lastWorldInstance = current;
                    IsInitialized = true;

                    LogSafe("[GameWorldHandler] Headless fallback bootstrap complete.");
                    return;
                }

                if (current?.AllAlivePlayersList == null || current.AllAlivePlayersList.Count == 0)
                {
                    if (!_hasWarnedNoWorld)
                    {
                        LogSafe("[GameWorldHandler] Deferring init — no world data yet.");
                        _hasWarnedNoWorld = true;
                    }

                    return;
                }

                if (_hasWarnedNoWorld || _hasLoggedHeadlessFallback)
                {
                    LogSafe("[GameWorldHandler] World recovered and ready.");
                    _hasWarnedNoWorld = false;
                    _hasLoggedHeadlessFallback = false;
                }

                LogSafe("[GameWorldHandler] Initializing world systems...");
                HookBotSpawns();
                _lastWorldInstance = current;
                IsInitialized = true;
            }
        }

        public static void HookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null)
                {
                    if (_bootstrapHost.Equals(null))
                    {
                        _bootstrapHost = null;
                    }
                    else
                    {
                        LogSafe("[GameWorldHandler] Bootstrap host already active — skipping spawn hook.");
                        return;
                    }
                }

                _bootstrapHost = new GameObject("AIRefactored.BootstrapHost");
                UnityEngine.Object.DontDestroyOnLoad(_bootstrapHost);

                try
                {
                    BotRecoveryService.Reset();
                    BotSpawnWatcherService.Reset();

                    if (!IsLootLoggerReady())
                        LootRuntimeWatcher.InitializeLogger(Logger);
                }
                catch (Exception ex)
                {
                    LogSafe("[GameWorldHandler] Error injecting runtime components: " + ex);
                }

                LogSafe("[GameWorldHandler] Spawn systems attached.");
            }
        }

        public static void UnhookBotSpawns()
        {
            lock (GameWorldLock)
            {
                if (_bootstrapHost != null && !_bootstrapHost.Equals(null))
                {
                    UnityEngine.Object.Destroy(_bootstrapHost);
                    _bootstrapHost = null;
                }

                KnownDeadBotIds.Clear();
                HotspotRegistry.Clear();
                LootRegistry.Clear();
                NavPointRegistry.Clear();
                BotSpawnWatcherService.Reset();
                BotRecoveryService.Reset();

                _hasWarnedNoWorld = false;
                _hasLoggedHeadlessFallback = false;
                _isRecovering = false;
                IsInitialized = false;
                _lastWorldInstance = null;

                LogSafe("[GameWorldHandler] AIRefactored systems fully shut down.");
            }
        }

        public static bool IsLocalHost()
        {
            if (FikaHeadlessDetector.IsHeadless)
                return true;

            ClientGameWorld? gw = Singleton<ClientGameWorld>.Instance;
            return gw != null && gw.MainPlayer != null && gw.MainPlayer.IsYourPlayer;
        }

        public static void TryAttachBotBrain(BotOwner? bot)
        {
            if (bot == null || bot.IsDead)
                return;

            Player? player = EFTPlayerUtil.ResolvePlayer(bot);
            if (player == null || !player.IsAI || player.gameObject == null)
                return;

            WorldBootstrapper.EnforceBotBrain(player, bot);
        }

        public static void EnforceBotBrains()
        {
            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
                return;

            lock (GameWorldLock)
            {
                foreach (Player player in world.AllAlivePlayersList)
                {
                    if (player == null || !player.IsAI || player.HealthController?.IsAlive != true)
                        continue;

                    WorldBootstrapper.EnforceBotBrain(player);
                }
            }
        }

        public static void CleanupDeadBotsSmoothly()
        {
            float now = Time.time;
            if (now - _lastCleanupTime < DeadCleanupInterval)
                return;

            _lastCleanupTime = now;

            GameWorld? world = Get();
            if (world?.AllAlivePlayersList == null)
                return;

            foreach (Player player in world.AllAlivePlayersList)
            {
                if (player == null || !player.IsAI || player.HealthController?.IsAlive == true)
                    continue;

                int id = player.GetInstanceID();
                if (KnownDeadBotIds.Add(id) && player.gameObject != null)
                {
                    player.gameObject.SetActive(false);
                    UnityEngine.Object.Destroy(player.gameObject, 3f);
                    LogSafe($"[GameWorldHandler] Cleaned up dead bot: {player.Profile?.Info?.Nickname ?? "Unnamed"}");
                }
            }
        }

        public static List<Player> GetAllAlivePlayers()
        {
            List<Player> list = new List<Player>();
            GameWorld? world = Get();
            if (world?.AllAlivePlayersList != null)
            {
                foreach (Player p in world.AllAlivePlayersList)
                {
                    if (p?.HealthController?.IsAlive == true)
                        list.Add(p);
                }
            }

            return list;
        }

        public static bool TryGetIZones(out IZones? zones)
        {
            zones = null;
            GameWorld? world = Get();
            if (world == null)
                return false;

            MonoBehaviour[] allBehaviours = UnityEngine.Object.FindObjectsOfType<MonoBehaviour>();
            foreach (MonoBehaviour mb in allBehaviours)
            {
                if (mb is IZones z)
                {
                    zones = z;
                    return true;
                }
            }

            return false;
        }

        public static void RefreshLootRegistry()
        {
            float now = Time.time;
            if (now - _lastLootRefresh < LootRefreshCooldown)
                return;

            _lastLootRefresh = now;
            LogSafe("[GameWorldHandler] Refreshing loot registry...");
            LootRegistry.Clear();
            LootBootstrapper.RegisterAllLoot();
            BotDeadBodyScanner.ScanAll();
        }

        private static bool IsLootLoggerReady()
        {
            try
            {
                var prop = typeof(LootRuntimeWatcher).GetProperty("Logger", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);
                return prop?.GetValue(null) != null;
            }
            catch
            {
                return false;
            }
        }

        private static void LogSafe(string message)
        {
            try
            {
                AIRefactoredController.Logger.LogInfo(message);
            }
            catch
            {
                // Logger not yet ready — ignore
            }
        }
    }
}
