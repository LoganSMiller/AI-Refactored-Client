// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Core
{
    using UnityEngine;

    /// <summary>
    /// Centralized layer mask definitions aligned with Tarkov's internal physics layers.
    /// Used for vision checks, suppression rays, navigation safety, and collision awareness.
    /// </summary>
    public static class AIRefactoredLayerMasks
    {
        #region Individual Layer Indices

        public static readonly int Default = LayerMask.NameToLayer("Default");
        public static readonly int TransparentFX = LayerMask.NameToLayer("TransparentFX");
        public static readonly int IgnoreRaycast = LayerMask.NameToLayer("Ignore Raycast");
        public static readonly int Water = LayerMask.NameToLayer("Water");
        public static readonly int UI = LayerMask.NameToLayer("UI");

        public static readonly int Terrain = LayerMask.NameToLayer("Terrain");
        public static readonly int Foliage = LayerMask.NameToLayer("Grass");
        public static readonly int HighPolyCollider = LayerMask.NameToLayer("HighPolyCollider");
        public static readonly int LowPolyCollider = LayerMask.NameToLayer("LowPolyCollider");
        public static readonly int DeadBody = LayerMask.NameToLayer("Deadbody");
        public static readonly int HitCollider = LayerMask.NameToLayer("HitCollider");

        public static readonly int DoorHighPolyCollider = LayerMask.NameToLayer("DoorHighPolyCollider");
        public static readonly int DoorLowPolyCollider = LayerMask.NameToLayer("DoorLowPolyCollider");
        public static readonly int Door = LayerMask.NameToLayer("Door");

        public static readonly int InvisibleCollider = LayerMask.NameToLayer("InvisibleCollider");
        public static readonly int ViewCollider = LayerMask.NameToLayer("ViewCollider");
        public static readonly int Trigger = LayerMask.NameToLayer("Triggers");
        public static readonly int Interactive = LayerMask.NameToLayer("Interactive");
        public static readonly int Loot = LayerMask.NameToLayer("Loot");
        public static readonly int Player = LayerMask.NameToLayer("Player");
        public static readonly int Shells = LayerMask.NameToLayer("Shells");
        public static readonly int WeaponPreview = LayerMask.NameToLayer("WeaponPreview");
        public static readonly int PlayerCollisionTest = LayerMask.NameToLayer("PlayerCollisionTest");
        public static readonly int DisablerCullingObject = LayerMask.NameToLayer("DisablerCullingObject");

        #endregion

        #region Precomputed Masks

        private static readonly LayerMask _playerMask = 1 << Player;
        private static readonly LayerMask _defaultMask = 1 << Default;
        private static readonly LayerMask _hitColliderMask = 1 << HitCollider;
        private static readonly LayerMask _lootMask = 1 << Loot;
        private static readonly LayerMask _interactiveMask = 1 << Interactive;
        private static readonly LayerMask _triggersMask = 1 << Trigger;
        private static readonly LayerMask _transparentMask = 1 << TransparentFX;
        private static readonly LayerMask _terrainMask = 1 << Terrain;
        private static readonly LayerMask _disablerMask = 1 << DisablerCullingObject;

        public static LayerMask PlayerMask => _playerMask;
        public static LayerMask DefaultMask => _defaultMask;
        public static LayerMask HitColliderMask => _hitColliderMask;
        public static LayerMask LootLayerMask => _lootMask;
        public static LayerMask InteractiveMask => _interactiveMask;
        public static LayerMask TriggersMask => _triggersMask;
        public static LayerMask TransparentMask => _transparentMask;
        public static LayerMask TerrainMask => _terrainMask;
        public static LayerMask DisablerCullingObjectMask => _disablerMask;

        #endregion

        #region Compound Masks

        public static readonly LayerMask HighPolyWithTerrainMask =
            (1 << Terrain) | (1 << HighPolyCollider);

        public static readonly LayerMask HighPolyWithTerrainNoGrassMask =
            HighPolyWithTerrainMask | (1 << Foliage);

        public static readonly LayerMask HighPolyWithTerrainMaskAI =
            HighPolyWithTerrainNoGrassMask | (1 << LowPolyCollider);

        public static readonly LayerMask TripwireCheckLayerMaskNoPlayer =
            _terrainMask | (1 << Door) | _lootMask | _defaultMask | HighPolyWithTerrainMask;

        public static readonly LayerMask TripwireCheckLayerMask =
            TripwireCheckLayerMaskNoPlayer | _playerMask;

        public static readonly LayerMask AllColliders = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider", "DoorHighPolyCollider", "DoorLowPolyCollider");

        public static readonly LayerMask SuppressionMask = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider", "Grass");

        public static readonly LayerMask VisionBlockers = LayerMask.GetMask(
            "HighPolyCollider", "DoorHighPolyCollider", "Terrain", "InvisibleCollider");

        public static readonly LayerMask LineOfSightMask = LayerMask.GetMask(
            "HighPolyCollider", "DoorHighPolyCollider", "Terrain");

        public static readonly LayerMask AimRayMask = LayerMask.GetMask(
            "HighPolyCollider", "LowPolyCollider", "Deadbody");

        public static readonly LayerMask EdgeCheckMask = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider");

        public static readonly LayerMask CoverRayMask = LayerMask.GetMask(
            "HighPolyCollider", "LowPolyCollider", "DoorLowPolyCollider", "Terrain");

        public static readonly LayerMask NavObstacleMask = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider", "Deadbody");

        public static readonly LayerMask LootObstructionMask = LayerMask.GetMask(
            "HighPolyCollider", "LowPolyCollider", "Deadbody");

        public static readonly LayerMask LootRaycastMask = LayerMask.GetMask(
            "Loot", "Interactive", "Player");

        public static readonly LayerMask OcclusionRaycastMask = LayerMask.GetMask(
            "HighPolyCollider", "Terrain", "InvisibleCollider");

        public static readonly LayerMask JumpRayMask = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider");

        public static readonly LayerMask ObstacleRayMask = LayerMask.GetMask(
            "Terrain", "HighPolyCollider", "LowPolyCollider", "Grass");

        public static readonly LayerMask DoorColliderMask = LayerMask.GetMask(
            "Door", "DoorHighPolyCollider", "DoorLowPolyCollider");

        public static readonly LayerMask PlayerStaticDoorMask = LayerMask.GetMask("Door");

        public static readonly LayerMask PlayerCollisionTestMask = LayerMask.GetMask(
            "LowPolyCollider", "Door", "Terrain", "Player");

        public static readonly LayerMask GrenadeAffectedMask = LayerMask.GetMask(
            "Player", "Interactive");

        public static readonly LayerMask GrenadeObstaclesColliderMask = LayerMask.GetMask(
            "HighPolyCollider", "Door", "Terrain");

        #endregion

        #region Utilities

        public static bool IsWorldGeometry(int layer)
        {
            return layer == Terrain
                || layer == HighPolyCollider
                || layer == LowPolyCollider
                || layer == Door
                || layer == DoorHighPolyCollider
                || layer == DoorLowPolyCollider;
        }

        public static bool IsObstacleLayer(int layer)
        {
            return layer == Terrain
                || layer == HighPolyCollider
                || layer == LowPolyCollider
                || layer == Foliage;
        }

        public static bool IsPlayerLayer(int layer)
        {
            return layer == Player;
        }

        public static bool IsDoorLayer(int layer)
        {
            return layer == Door
                || layer == DoorHighPolyCollider
                || layer == DoorLowPolyCollider;
        }

        public static bool IsLootLayer(int layer)
        {
            return layer == Loot;
        }

        public static bool IsInteractiveLayer(int layer)
        {
            return layer == Interactive || layer == Trigger;
        }

        public static bool IsInvisibleCollider(int layer)
        {
            return layer == InvisibleCollider;
        }

        public static bool IsViewCollider(int layer)
        {
            return layer == ViewCollider;
        }

        public static bool IsNavBlocker(int layer)
        {
            return layer == Terrain
                || layer == HighPolyCollider
                || layer == LowPolyCollider
                || layer == DeadBody;
        }

        #endregion
    }
}
