// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using Fika.Core;
    using UnityEngine;

    /// <summary>
    /// Entry point for AI-Refactored mod. Registers world bootstrap, logging, and AI system hooks.
    /// Supports both headless and client-hosted environments with full parity.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        #region Static Fields

        private static ManualLogSource? _log;
        private static bool _hasInitialized;
        private static readonly object LockObj = new object();

        #endregion

        #region Properties

        /// <summary>
        /// Gets the global logger instance.
        /// </summary>
        public static ManualLogSource LoggerInstance =>
            _log ?? throw new InvalidOperationException("[AIRefactored] Logger could not be initialized.");

        #endregion

        #region Unity Lifecycle

        private void Awake()
        {
            lock (LockObj)
            {
                if (_hasInitialized)
                {
                    _log?.LogWarning("[AIRefactored] [Awake] Plugin already initialized — skipping duplicate init.");
                    return;
                }

                try
                {
                    _log = Logger;
                    if (_log == null)
                    {
                        throw new InvalidOperationException("[AIRefactored] Logger is null.");
                    }

                    _log.LogInfo("[AIRefactored] [Init] Plugin starting...");

                    AIRefactoredController.Initialize(_log);
                    BotWorkScheduler.AutoInjectFlushHost();

                    InitializeWorldAndBots();
                    _hasInitialized = true;

                    _log.LogInfo("[AIRefactored] [Init] Plugin startup complete.");
                }
                catch (Exception ex)
                {
                    _log?.LogError($"[AIRefactored] [Init] Exception: {ex.Message}\n{ex.StackTrace}");
                    throw;
                }
            }
        }

        private void OnDestroy()
        {
            try
            {
                lock (LockObj)
                {
                    _hasInitialized = false;
                }

                if (FikaHeadlessDetector.IsHeadless)
                {
                    _log?.LogInfo("[AIRefactored] [Shutdown] Headless mode — bot unhook skipped.");
                }
                else
                {
                    GameWorldHandler.UnhookBotSpawns();
                }

                _log?.LogInfo("[AIRefactored] [Shutdown] Plugin shutdown complete.");
            }
            catch (Exception ex)
            {
                _log?.LogError($"[AIRefactored] [Shutdown] Exception: {ex.Message}\n{ex.StackTrace}");
            }
        }

        #endregion

        #region Initialization Logic

        private void InitializeWorldAndBots()
        {
            try
            {
                _log?.LogInfo("[AIRefactored] Initializing world and bot systems...");

                GameWorldHandler.TryInitializeWorld();
                GameWorldHandler.HookBotSpawns();

                if (!FikaHeadlessDetector.IsHeadless)
                {
                    WorldBootstrapper.TryInitialize();
                    _log?.LogInfo("[AIRefactored] [Bootstrap] Client-host bootstrap initialized.");
                }
                else
                {
                    _log?.LogInfo("[AIRefactored] [Bootstrap] Headless bootstrap active.");
                }
            }
            catch (Exception ex)
            {
                _log?.LogError($"[AIRefactored] [Bootstrap] Exception: {ex.Message}\n{ex.StackTrace}");
            }
        }

        #endregion

        #region Coroutine Utilities

        private IEnumerator SafeCoroutine(IEnumerator routine)
        {
            while (true)
            {
                object? current;

                try
                {
                    if (!routine.MoveNext())
                    {
                        yield break;
                    }

                    current = routine.Current;
                }
                catch (Exception ex)
                {
                    _log?.LogError($"[AIRefactored] [SafeCoroutine] Exception: {ex.Message}\n{ex.StackTrace}");
                    yield break;
                }

                yield return current;
            }
        }

        #endregion
    }
}
