// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored
{
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Entry point for AI-Refactored mod. Registers world bootstrap, logging, and AI system hooks.
    /// Supports both headless and client-hosted environments.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        #region Fields

        private static ManualLogSource? _log;

        #endregion

        #region Properties

        /// <summary>
        /// Global logger reference, safe after Awake().
        /// </summary>
        public static ManualLogSource LoggerInstance =>
            _log ?? throw new System.NullReferenceException("[AIRefactored] Logger accessed before plugin initialization.");

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Unity lifecycle entry point. Initializes all AIRefactored systems.
        /// </summary>
        private void Awake()
        {
            _log = this.Logger;
            _log.LogInfo("[AIRefactored] [Init] Plugin starting...");

            AIRefactoredController.Initialize(_log);
            BotWorkScheduler.AutoInjectFlushHost();
            WorldBootstrapper.TryInitialize();

            if (FikaHeadlessDetector.IsHeadless)
            {
                _log.LogInfo("[AIRefactored] [Headless] Detected headless mode — skipping camera or UI-bound bootstrap.");
                GameWorldHandler.HookBotSpawns();
            }
            else
            {
                this.StartCoroutine(this.WaitForWorldBootstrap());
            }

            this.StartCoroutine(this.MonitorGameWorldAvailability());
            _log.LogInfo("[AIRefactored] [Init] Plugin startup complete.");
        }

        /// <summary>
        /// Called when plugin is unloaded. Cleans up all global AI systems.
        /// </summary>
        private void OnDestroy()
        {
            GameWorldHandler.UnhookBotSpawns();
            _log?.LogInfo("[AIRefactored] [Shutdown] Plugin shutdown complete.");
        }

        #endregion

        #region Coroutine Logic

        /// <summary>
        /// Waits for a valid GameWorld instance before proceeding with initialization (non-headless only).
        /// </summary>
        private IEnumerator WaitForWorldBootstrap()
        {
            float timeout = Time.time + 60f;

            while (!Singleton<ClientGameWorld>.Instantiated &&
                   !Singleton<GameWorld>.Instantiated &&
                   Time.time < timeout)
            {
                yield return null;
            }

            if (Singleton<ClientGameWorld>.Instantiated || Singleton<GameWorld>.Instantiated)
            {
                _log?.LogInfo("[AIRefactored] [Bootstrap] GameWorld detected — continuing bootstrap.");
                GameWorldHandler.TryInitializeWorld();
            }
            else
            {
                _log?.LogWarning("[AIRefactored] [Bootstrap] Timed out waiting for GameWorld. Skipping bootstrap.");
            }
        }

        /// <summary>
        /// Periodically checks for GameWorld reinitialization or late-booted servers and enforces AI system hooks.
        /// </summary>
        private IEnumerator MonitorGameWorldAvailability()
        {
            while (true)
            {
                if (!GameWorldHandler.IsInitialized &&
                    (Singleton<ClientGameWorld>.Instantiated || Singleton<GameWorld>.Instantiated))
                {
                    _log?.LogInfo("[AIRefactored] [Recovery] Late GameWorld detected — enforcing initialization.");
                    GameWorldHandler.TryInitializeWorld();
                }

                yield return new WaitForSeconds(2f);
            }
        }

        #endregion
    }
}
