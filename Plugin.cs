// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored
{
    using System;
    using System.Collections;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Plugin entry point for AI-Refactored. Registers systems, hooks, and world-level bootstrap routines.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        private static ManualLogSource? _log;

        /// <summary>
        /// Global logger instance for AIRefactored systems. Valid after Awake().
        /// </summary>
        public static ManualLogSource LoggerInstance
        {
            get
            {
                if (_log == null)
                {
                    throw new NullReferenceException("[AIRefactored] LoggerInstance accessed before Awake().");
                }

                return _log;
            }
        }

        /// <summary>
        /// Called once by BepInEx when the plugin is loaded.
        /// </summary>
        private void Awake()
        {
            _log = this.Logger;
            _log.LogWarning("[AIRefactored] 🔧 Plugin starting...");

            // Register logger with controller
            AIRefactoredController.Initialize(_log);

            // Inject world bootstrapper
            WorldBootstrapper.TryInitialize();

            // Run FIKA-safe flush hook
            BotWorkScheduler.AutoInjectFlushHost();

            if (!FikaHeadlessDetector.IsHeadless)
            {
                this.StartCoroutine(this.WaitForWorldBootstrap());
            }
            else
            {
                _log.LogWarning("[AIRefactored] 🧠 Headless mode detected — skipping GameWorld checks.");
                GameWorldHandler.HookBotSpawns();
            }

            _log.LogWarning("[AIRefactored] ✅ Plugin.cs startup complete.");
        }

        /// <summary>
        /// Called when the plugin is unloaded or the game shuts down.
        /// </summary>
        private void OnDestroy()
        {
            GameWorldHandler.UnhookBotSpawns();
            _log?.LogInfo("[AIRefactored] 🔻 Plugin shutdown complete.");
        }

        /// <summary>
        /// Coroutine retry loop for client-side multiplayer startup. Ensures GameWorld is valid before boot.
        /// </summary>
        private IEnumerator WaitForWorldBootstrap()
        {
            float timeout = Time.time + 60f;

            while (!Singleton<ClientGameWorld>.Instantiated && !Singleton<GameWorld>.Instantiated && Time.time < timeout)
            {
                yield return null;
            }

            if (Singleton<ClientGameWorld>.Instantiated || Singleton<GameWorld>.Instantiated)
            {
                _log?.LogInfo("[AIRefactored] ✅ World detected — proceeding with AIRefactored initialization.");
                GameWorldHandler.TryInitializeWorld();
            }
            else
            {
                _log?.LogWarning("[AIRefactored] ⚠ Timed out waiting for GameWorld. Skipping world hook.");
            }
        }
    }
}
