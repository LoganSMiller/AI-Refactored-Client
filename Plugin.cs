// <auto-generated>
//   AI-Refactored: Plugin.cs (Supreme Arbitration, Isolation, Parity, Max Realism Edition – June 2025)
//   Entry and guard for all AIRefactored systems: maximally robust, error-isolated, and compliance-locked.
//   Zero legacy, zero log spam, zero risk. Parity in SPT/FIKA/client. MIT License.
// </auto-generated>

namespace AIRefactored
{
    using System;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;

    /// <summary>
    /// Main entry for AI-Refactored mod. All system init, lifecycle, teardown, and global error capture.
    /// Enforces SPT, FIKA, client parity. Bulletproof—no subsystem or error can break global state.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored (Host Only)", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        #region Fields

        private static readonly object InitLock = new object();
        private static ManualLogSource _logger;
        private static bool _initialized;
        private static bool _teardownStarted;

        /// <summary>
        /// Gets the shared logger instance for all AIRefactored systems.
        /// Throws if accessed before plugin Awake.
        /// </summary>
        public static ManualLogSource LoggerInstance
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[AIRefactored] LoggerInstance accessed before plugin Awake.");
                }
                return _logger;
            }
        }

        #endregion

        #region Unity Lifecycle

        /// <summary>
        /// Unity Awake. Initializes logging, controller, and global error capture. Idempotent.
        /// Bulletproof: All failures are locally contained and do not affect Unity or global mod state.
        /// </summary>
        private void Awake()
        {
            lock (InitLock)
            {
                if (_initialized)
                    return;

                _logger = base.Logger;
                AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;

                try
                {
                    _logger.LogInfo("[AIRefactored] ⏳ Awake: Initializing AIRefactoredController and bootstrap...");
                    AIRefactoredController.Initialize();

                    _initialized = true;
                    _logger.LogInfo("[AIRefactored] ✅ Initialization complete.");
                }
                catch (Exception ex)
                {
                    _logger.LogError("[AIRefactored] ❌ Exception during Awake: " + ex);
                }
            }
        }

        /// <summary>
        /// Unity OnDestroy. Tears down world systems and global handlers. Bulletproof: idempotent, never leaks.
        /// </summary>
        private void OnDestroy()
        {
            lock (InitLock)
            {
                if (!_initialized || _teardownStarted || _logger == null)
                    return;

                _teardownStarted = true;
                _logger.LogInfo("[AIRefactored] 🔻 OnDestroy: Performing teardown and resource cleanup...");

                try
                {
                    // Unhook bot spawns only if world is valid.
                    try
                    {
                        if (GameWorldHandler.HasValidWorld())
                        {
                            GameWorldHandler.UnhookBotSpawns();
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("[AIRefactored] UnhookBotSpawns() error: " + ex);
                    }

                    // Teardown all AIRefactored systems safely
                    try
                    {
                        AIRefactoredController.Teardown();
                        _logger.LogInfo("[AIRefactored] 🧹 AIRefactoredController.Teardown() complete.");
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError("[AIRefactored] Teardown error: " + ex);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("[AIRefactored] ❌ Exception during OnDestroy: " + ex);
                }
                finally
                {
                    try { AppDomain.CurrentDomain.UnhandledException -= OnUnhandledException; }
                    catch { /* silent */ }
                    _initialized = false;
                    _teardownStarted = false;
                }

                _logger.LogInfo("[AIRefactored] ✅ Cleanup complete — plugin shutdown successful.");
            }
        }

        /// <summary>
        /// Global handler for any uncaught exceptions in AIRefactored domain. Bulletproof: never propagates, never disables mod.
        /// </summary>
        private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            try
            {
                if (_logger != null && e?.ExceptionObject is Exception ex)
                {
                    _logger.LogError("[AIRefactored] ❗ Unhandled exception: " + ex);
                }
            }
            catch
            {
                // No propagation, no global disable, no spam
            }
        }

        #endregion

        #region Utility

        /// <summary>
        /// Returns true if the plugin has been fully initialized and is ready for system calls.
        /// </summary>
        public static bool IsInitialized
        {
            get { lock (InitLock) { return _initialized && _logger != null; } }
        }

        #endregion
    }
}
