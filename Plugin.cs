// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

#nullable enable

namespace AIRefactored
{
    using System;
    using BepInEx;
    using BepInEx.Logging;
    using AIRefactored.Runtime;
    using AIRefactored.Core;

    /// <summary>
    /// Entry point for AI-Refactored mod. Kicks off the global controller which
    /// handles *all* further injection and bootstrapping exactly once.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        private static ManualLogSource? _log;
        private static bool _initialized;
        private static readonly object _lock = new object();

        /// <summary>
        /// Global logger for other classes to use.
        /// </summary>
        public static ManualLogSource LoggerInstance =>
            _log ?? throw new InvalidOperationException("Logger was not initialized.");

        private void Awake()
        {
            lock (_lock)
            {
                if (_initialized)
                {
                    Logger.LogWarning("[AIRefactored] Plugin already initialized; skipping duplicate Awake.");
                    return;
                }

                _log = Logger; // BaseUnityPlugin.Logger
                _log.LogInfo("[AIRefactored] Plugin Awake — initializing AIRefactoredController.");

                // Hand off *everything* to our single controller instance.
                AIRefactoredController.Initialize(_log);

                _initialized = true;
                _log.LogInfo("[AIRefactored] Plugin initialization complete.");
            }
        }

        private void OnDestroy()
        {
            lock (_lock)
            {
                _initialized = false;
            }

            if (_log != null)
            {
                _log.LogInfo("[AIRefactored] Plugin OnDestroy — cleaning up.");
            }

            // Tear down any host injections if still up.
            GameWorldHandler.UnhookBotSpawns();
        }
    }
}
