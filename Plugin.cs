// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored
{
    using System;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;

    /// <summary>
    /// Entry point for AI-Refactored mod. Initializes the global AIRefactoredController once.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        private static ManualLogSource _logger;
        private static bool _initialized;
        private static readonly object LockObj = new object();

        /// <summary>
        /// Gets the shared logger instance for AIRefactored systems.
        /// </summary>
        public static ManualLogSource LoggerInstance
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[Plugin] LoggerInstance accessed before initialization.");
                }

                return _logger;
            }
        }

        private void Awake()
        {
            lock (LockObj)
            {
                if (_initialized)
                {
                    if (_logger != null)
                    {
                        _logger.LogWarning("[AIRefactored] Plugin already initialized — skipping.");
                    }

                    return;
                }

                try
                {
                    _logger = Logger;
                    _logger.LogInfo("[AIRefactored] Plugin Awake — bootstrapping controller.");
                    AIRefactoredController.Initialize();
                    UnityEngine.Debug.Log("[AIRefactored] AIRefactoredController.Initialize() invoked.");
                    _initialized = true;
                    _logger.LogInfo("[AIRefactored] Initialization complete.");
                }
                catch (Exception ex)
                {
                    UnityEngine.Debug.LogError("[AIRefactored] Plugin Awake failed: " + ex);
                }
            }
        }

        private void OnDestroy()
        {
            lock (LockObj)
            {
                _initialized = false;
            }

            try
            {
                if (_logger != null)
                {
                    _logger.LogInfo("[AIRefactored] Plugin OnDestroy — cleaning up.");
                }

                GameWorldHandler.UnhookBotSpawns();
            }
            catch (Exception ex)
            {
                UnityEngine.Debug.LogError("[AIRefactored] Plugin OnDestroy error: " + ex);
            }
        }
    }
}
