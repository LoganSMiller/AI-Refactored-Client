// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored
{
    using System;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx;
    using BepInEx.Logging;

    /// <summary>
    /// Entry point for AI-Refactored mod. Supports traditional client, client-host, and FIKA headless modes.
    /// </summary>
    [BepInPlugin("com.spock.airefactored", "AI-Refactored (Host Only)", "1.0.0")]
    public sealed class Plugin : BaseUnityPlugin
    {
        #region Fields

        private static readonly object InitLock = new object();
        private static ManualLogSource _logger;
        private static bool _initialized;

        /// <summary>
        /// Gets the shared logger instance for all AI-Refactored systems.
        /// </summary>
        public static ManualLogSource LoggerInstance
        {
            get
            {
                if (_logger == null)
                {
                    throw new InvalidOperationException("[AIRefactored] LoggerInstance accessed before plugin Awake.");
                }

                return _logger;
            }
        }

        #endregion

        #region Unity Lifecycle

        private void Awake()
        {
            lock (InitLock)
            {
                if (_initialized)
                {
                    return;
                }

                _logger = base.Logger;

                try
                {
                    _logger.LogInfo("[AIRefactored] ⏳ Plugin Awake — initializing AIRefactoredController...");
                    AIRefactoredController.Initialize();
                    _initialized = true;
                    _logger.LogInfo("[AIRefactored] ✅ AIRefactoredController.Initialize() complete.");
                }
                catch (Exception ex)
                {
                    _logger.LogError("[AIRefactored] ❌ Plugin Awake exception: " + ex);
                }
            }
        }

        private void OnDestroy()
        {
            lock (InitLock)
            {
                if (!_initialized || _logger == null)
                {
                    return;
                }

                try
                {
                    _logger.LogInfo("[AIRefactored] 🔻 Plugin OnDestroy — performing teardown...");

                    if (GameWorldHandler.HasValidWorld())
                    {
                        GameWorldHandler.UnhookBotSpawns();
                    }

                    _logger.LogInfo("[AIRefactored] ✅ Cleanup complete — plugin shutdown successful.");
                }
                catch (Exception ex)
                {
                    _logger.LogError("[AIRefactored] ❌ Plugin OnDestroy exception: " + ex);
                }

                _initialized = false;
            }
        }

        #endregion
    }
}
